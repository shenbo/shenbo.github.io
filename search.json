[{"title":"小米wifi-AX3600电流声","url":"/2025/06/21/network/%E5%B0%8F%E7%B1%B3wifi3600%E7%94%B5%E6%B5%81%E5%A3%B0/","content":"小米 AX3600 使用过程中很大电流声，声音是在主板上发出来的。\n客服一问三不知；\n网上有说换电源可以解决，原装电源不行。\n额定电压为12V， 空载的实测电压只有10.38V。。。 简直离谱\n\n\n\n\n找了一个旧的12V电源，接上去就好了！\n\n\n","categories":["wifi"],"tags":["network"]},{"title":"pdf文档文字识别-MinerU-pdf-ocr-to-markdown","url":"/2025/06/18/office/pdf%E6%96%87%E6%A1%A3%E6%96%87%E5%AD%97%E8%AF%86%E5%88%AB-MinerU/","content":"\nMinerU https://github.com/opendatalab/MinerU/\n\n官网有详细的说明，需要 gpu cuda 支持。\n实测笔记本 cpu 模式也能使用，如下。\n1. pip 安装 mineru (CPU模式)# 创建虚拟环境python -m venv .venv_mnu.venv_mnu\\Scripts\\activate# 安装pip install -U &quot;mineru[core]&quot; -i https://mirrors.aliyun.com/pypi/simple \n\n2. 预训练模型下载# cmdmineru-models-download# [huggingface|modelscope] 选择 modelscope 源# [pipeline|vlm|all]       选择 pipeline 模型# 或mineru-models-download -s modelscope -m pipeline\n模型默认会被下载到 ~\\.cache\\modelscope\\hub\\models 同时创建一个配置文件 ~\\mineru.json\n默认下载到当前用户目录下。\n运行帮助：\nmineru --helpUsage: mineru [OPTIONS]Options:  -v, --version                   显示版本并退出  -p, --path PATH                 输入文件路径或目录（必填）  -o, --output PATH               输出目录（必填）  -m, --method [auto|txt|ocr]     解析方法：auto（默认）、txt、ocr（仅用于 pipeline 后端）  -b, --backend [pipeline|vlm-transformers|vlm-sglang-engine|vlm-sglang-client]                                  解析后端（默认为 pipeline）  -l, --lang [ch|ch_server|... ]  指定文档语言（可提升 OCR 准确率，仅用于 pipeline 后端）  -u, --url TEXT                  当使用 sglang-client 时，需指定服务地址  -s, --start INTEGER             开始解析的页码（从 0 开始）  -e, --end INTEGER               结束解析的页码（从 0 开始）  -f, --formula BOOLEAN           是否启用公式解析（默认开启，仅 pipeline 后端）  -t, --table BOOLEAN             是否启用表格解析（默认开启，仅 pipeline 后端）  -d, --device TEXT               推理设备（如 cpu/cuda/cuda:0/npu/mps，仅 pipeline 后端）  --vram INTEGER                  单进程最大 GPU 显存占用（仅 pipeline 后端）  --source [huggingface|modelscope|local]                                  模型来源，默认 huggingface  --help                          显示帮助信息\n\n\n\n例：\nmineru -d cpu --source local -o . -p 123.pdf mineru -d cpu --source local -o . -l ch_lite -p 123.pdf \n\n耗时使用 cpu (笔记本 intel ultra 7 155h)， 检测一个 10 页的pdf，内容主要是中文文字。\n\n\n\n步骤\n说明\n数量\n耗时\n\n\n\nLayout Predict\npdf 页面解析\n10&#x2F;10\n00:18&lt;00:00,  1.82s&#x2F;it\n\n\nMFD Predict\n数学公式检测\n10&#x2F;10\n00:52&lt;00:00,  5.27s&#x2F;it\n\n\nMFR Predict\n数学公式识别\n1&#x2F;1\n00:01&lt;00:00,  1.40s&#x2F;it\n\n\nOCR-det ch\nOCR检测中文\n51&#x2F;51\n00:23&lt;00:00,  2.14it&#x2F;s\n\n\nTable Predict\n表格识别\n1&#x2F;1\n00:04&lt;00:00,  4.47s&#x2F;it\n\n\nOCR-rec Predict\nOCR识别\n319&#x2F;319\n00:52&lt;00:00,  6.12it&#x2F;s\n\n\nProcessing pages\n处理页面\n10&#x2F;10\n00:02&lt;00:00,  3.49it&#x2F;s\n\n\n","categories":["office"],"tags":["pdf"]},{"title":"PDF文档翻译 pdf2zh","url":"/2025/06/11/office/PDF%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91-pdf2zh/","content":"PDFMathTranslate（pdf2zh）支持科学论文翻译和双语对照。\n支持全文翻译，并且还能保持原来的 pdf 文档中文字、公式、图表的排版形式。\n现在已经发布了 V2.0版。\n\nhttps://pdf2zh-next.com/zh/index.html \n\nhttps://github.com/PDFMathTranslate/PDFMathTranslate-next\n\nhttps://github.com/Byaidu/PDFMathTranslate\n\n\n1. 使用方法https://pdf2zh-next.com/zh/index.html\n2. 使用方法-加入 scoop 和右键菜单。2.1 scoop 安装\nhttps://github.com/shenbo/portablesoft/blob/master/bucket/pdf2zh.json\n\n\n&#123;    &quot;version&quot;: &quot;2.0.10&quot;,    &quot;description&quot;: &quot;PDF scientific paper translation with preserved formats&quot;,    &quot;homepage&quot;: &quot;https://github.com/PDFMathTranslate/PDFMathTranslate-next/&quot;,    &quot;url&quot;: &quot;https://github.com/PDFMathTranslate/PDFMathTranslate-next/releases/download/v2.0.10/pdf2zh-v2.0.10-BabelDOC-v0.3.69-win64.zip&quot;,    &quot;notes&quot;: [        &quot;The version without assets:  pdf2zh without assets(font, model, etc.)&quot;,        &quot;It will also dynamically download resources when running, but the download may fail due to network issues.&quot;,        &quot;&quot;,        &quot;Add context menu option: &quot;,        &quot;    reg add \\&quot;HKEY_CLASSES_ROOT\\\\SystemFileAssociations\\\\.pdf\\\\shell\\\\pdf2zh\\\\command\\&quot; /ve /d &#x27;$dir\\\\pdf2zh.exe --bing --no-mono \\\\\\&quot;%1\\\\\\&quot;&#x27; /f&quot;,        &quot;&quot;    ],    &quot;bin&quot;: &quot;pdf2zh.exe&quot;,    &quot;shortcuts&quot;: [        [            &quot;pdf2zh.exe&quot;,            &quot;pdf2zh&quot;        ]    ],    &quot;hash&quot;: &quot;25f5301db637b106f5de1249408ded5f106d0ea2b0b8434839c4d278933da146&quot;,    &quot;extract_dir&quot;: &quot;pdf2zh&quot;,    &quot;checkver&quot;: &quot;github&quot;,    &quot;autoupdate&quot;: &#123;        &quot;url&quot;: &quot;https://github.com/PDFMathTranslate/PDFMathTranslate-next/releases/download/v$version/pdf2zh-v$version-BabelDOC-v0.3.69-win64.zip&quot;    &#125;&#125;\n\n2.2 安装使用\nscoop install pdf2zh# 右键菜单，管理员模式运行reg add &quot;HKEY_CLASSES_ROOT\\SystemFileAssociations\\.pdf\\shell\\pdf2zh\\command&quot; /ve /d &#x27;pdf2zh.exe --bing --no-mono \\&quot;%1\\&quot;&#x27; /f# 常用命令说明pdf2zh ~/local.pdf   --bing    --debug     --pages 1-5   --no-mono      #   pdf路径    翻译服务    调试模式    页码范围     不输出仅中文版","categories":["office"],"tags":["pdf2zh"]},{"title":"PDF论文文献重命名","url":"/2025/06/11/office/PDF%E6%96%87%E6%A1%A3-%E8%AE%BA%E6%96%87%E6%96%87%E7%8C%AE%E9%87%8D%E5%91%BD%E5%90%8D/","content":"pdf-renamer 可以对已下载的论文 PDF 文件 进行重命名。\n\nhttps://github.com/MicheleCotrufo/pdf-renamer\n\n调用 pdf2bib 以及 pdf2doi 查找论文的 DOI、并获得 BibTeX 数据。\n\nhttps://github.com/MicheleCotrufo/pdf2bib\n\n1. 安装pip install pdf-renamerpip install pdf2bib\n\n\n2. pdfrenamer 使用方法$ pdfrenamer --husage: pdfrenamer [-h] [-s] [-ro] [-f FORMAT] [-sf] [-max_length_authors MAX_LENGTH_AUTHORS]                  [-max_length_filename MAX_LENGTH_FILENAME] [-max_words_title MAX_WORDS_TITLE]                   [-case CASE]                  [-add_abbreviation_file PATH_ABBREVIATION_FILE] [-fr] [-sd]                   [-install--right--click] [-uninstall--right--click]                  [path ...]\n\n\n\n\n\nargs\nargs\ndescription\n\n\n\npath\n\npdf文件或文件夹的路径\n\n\n\n\n\n\n\n-h\n–help\n帮助\n\n\n-s\n–decrease_verbose\n默认输出全部搜索记录使用此选项，设为不输出\n\n\n-ro\n–readonly\n默认将doi信息写入pdf的metadata信息中使用此选项，设为不写入\n\n\n-f\nFORMAT\n设定新文件名的格式，默认为 “{YYYY} - {Jabbr} - {A3etal} - {T}”\n\n\n\n{YYYY}\n出版年Year of publication\n\n\n\n{MM}\n出版月 (数字 digits)\n\n\n\n{DD}\n出版日 (数字 digits)\n\n\n\n{J}\n期刊全名Journal\n\n\n\n{Jabbr}\n期刊缩写（如有）\n\n\n\n{Aall}\n全部作者姓氏 (逗号分隔)\n\n\n\n{Aetal}\n第一作者姓氏 ‘et al.’\n\n\n\n{A3etal}\n前三作者姓氏 ‘et al.’\n\n\n\n{aAall}\n全部作者姓名 (逗号分隔)\n\n\n\n{aAetal}\n第一作者姓名 ‘et al.’\n\n\n\n{aA3etal}\n前三作者姓名 ‘et al.’\n\n\n\n{T}\n论文标题\n\n\n-sf\n–sub_folders\n是否重命名子文件夹，默认：False\n\n\n-max_length_authors\nMAX_LENGTH_AUTHORS\n设定作者的最大字符长度，默认：80\n\n\n-max_length_filename\nMAX_LENGTH_FILENAME\n设定文件名最大字符长度，默认：250\n\n\n-max_words_title\nMAX_WORDS_TITLE\n设定标题的最大字符长度，默认：20\n\n\n-case\nCASE\n连接符：驼峰、下划线、减号、空格\n\n\n\n\nCASE：[‘camel’, ‘snake’, ‘kebab’, ‘none’ (default)]\n\n\n-add_abbreviation_file\nPATH_ABBREVIATION_FILE\n期刊缩写\n\n\n-fr\n–force_rename\n默认跳过相同文件使用此选项，设为重命名每一个文件\n\n\n-sd\n–set_default\n将现有参数设置为默认值\n\n\n-install–right–click\n\n加入 Windows 右键菜单\n\n\n-uninstall–right–click\n\n删除 Windows 右键菜单\n\n\n3. pdf2bib 使用方法pdf2bib --husage: pdf2bib [-h] [-v] [-nostore] [-s FILENAME_BIBTEX] [-clip]                [-install--right--click] [-uninstall--right--click]               [path ...]\n\n\n\n\nargs\nargs\ndescription\n\n\n\npath\n\npdf文件或文件夹的路径\n\n\n\n\n\n\n\n-h\n–help\n帮助\n\n\n-v\n–verbose\n默认仅输出搜索结果使用此选项，设为输出搜索过程记录\n\n\n-nostore\n–no_store_identifier_metadata\n默认将doi信息写入pdf的metadata信息中使用此选项，设为不写入\n\n\n-s\nFILENAME_BIBTEX\n将 bibtex 信息写入 FILENAME_BIBTEX 文本文件.\n\n\n–make_bibtex_file\nFILENAME_BIBTEX\n将 bibtex 信息写入 FILENAME_BIBTEX 文本文件\n\n\n-clip\n–save_bibtex_clipboard\n将 bibtex 写入粘贴板\n\n\n-install–right–click\n\n加入 Windows 右键菜单\n\n\n-uninstall–right–click\n\n删除 Windows 右键菜单\n\n\n4. 加入右键菜单。Windows 操作系统下，可以将 pdf-renamer 添加到右键菜单作为快捷方式。\npdfrenamer --install-right-click# pdfrenamer --uninstall-right-clickpdf2bib -install--right--click# pdf2bib -uninstall--right--click","categories":["office"],"tags":["pdf2"]},{"title":"caj2pdf：将知网caj文件转换为pdf(2)","url":"/2025/06/06/office/caj2pdf%EF%BC%9A%E5%B0%86%E7%9F%A5%E7%BD%91caj%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BApdf(2)/","content":"caj2pdf: 将知网caj文件转换为pdf\nhttps://github.com/shenbo/caj2pdf/\n\n\n在原来基础上使用 pystand 简单封装，并增加右键菜单快捷命令\n\n1. 克隆仓库git clone https://github.com/shenbo/caj2pdf.git# 或git clone https://github.com/caj2pdf/caj2pdf.git\n\n2. 创建 python 虚拟环境\n只需要安装一个库第三方库：pypdf2\npystand 需要 Python embed\n原来的 dll 文件路径是相对路径，需要调整一下\n\nWrite-Host &quot;==== 0. Create folders ====&quot;New-Item -Path &quot;./build&quot; -ItemType Directory -ForceNew-Item -Path &quot;./.cache&quot; -ItemType Directory -ForceWrite-Host &quot;==== 1. Setup Python venv ====&quot;if (-not (Test-Path &quot;.venv_caj&quot;)) &#123;    python -m venv .venv_caj&#125;.venv_caj/Scripts/activate.ps1python -Vpip install pypdf2Write-Host &quot;==== 1.1 Download Python embed version====&quot;$pythonUrl = &quot;https://www.python.org/ftp/python/3.13.4/python-3.13.4-embed-amd64.zip&quot;if (-not (Test-Path &quot;./.cache/python.zip&quot;)) &#123;    Invoke-WebRequest -Uri $pythonUrl -OutFile &quot;./.cache/python.zip&quot;&#125;Expand-Archive -Path &quot;./.cache/python.zip&quot; -DestinationPath &quot;./build/runtime&quot; -ForceWrite-Host &quot;==== 2. Copy files to ./build/* ====&quot;Get-ChildItem -Path &quot;./*.py&quot; | Copy-Item -Destination &quot;./build&quot; -Recurse -ForceGet-ChildItem -Path &quot;./lib&quot; | Copy-Item -Destination &quot;./build/lib&quot; -Recurse -ForceCopy-Item -Path &quot;./caj2pdf&quot; -Destination &quot;./build/caj2pdf.int&quot; -Recurse -ForceWrite-Host &quot;==== 2.1  change .dll path ====&quot;$jbigdec_file = &#x27;./build/jbigdec.py&#x27;$old_cmd = &#x27;&quot;./lib/bin/libjbigdec-w64.dll&quot;&#x27;$new_cmd = &#x27;os.path.join(os.path.dirname(__file__), &quot;lib/libjbigdec-w64.dll&quot;)&#x27;(Get-Content $jbigdec_file).replace($old_cmd, $new_cmd) | Set-Content $jbigdec_file\n\n\n\n3. 下载 PyStand、 简单配置ref: \n\nhttps://github.com/skywind3000/PyStand/\nhttps://skywind.me/blog/archives/3002\n\nWrite-Host &quot;==== 3. Download PyStand ====&quot;$pystandUrl = &quot;https://github.com/skywind3000/PyStand/releases/download/1.1.5/PyStand-v1.1.5-exe.zip&quot;if (-not (Test-Path &quot;./.cache/pystand.zip&quot;)) &#123;    Invoke-WebRequest -Uri $pystandUrl -OutFile &quot;./.cache/pystand.zip&quot;&#125;Expand-Archive -Path &quot;./.cache/pystand.zip&quot; -DestinationPath &quot;./.cache/pystand&quot; -ForceCopy-Item -Path &quot;./.cache/pystand/PyStand-x64-CLI/PyStand.exe&quot; -Destination &quot;./build/caj2pdf.exe&quot; -Force\n\n\n4. PyPDF2Write-Host &quot;==== 4. Copy venv/Lib/site-packages to build/ ====&quot;Copy-Item -Path &quot;.venv_caj/Lib/site-packages/PyPDF2&quot; -Destination &quot;./build/site-packages/PyPDF2&quot; -Recurse -Force# Remove-Item -Path &quot;./.cache&quot; -Recurse -Force\n\n5. 加入右键菜单\n需要管理员权限\n\nWrite-Host &quot;==== 5. Add to context ====&quot;$caj2pdf = Get-Location | Join-Path -ChildPath &quot;build/caj2pdf.exe&quot;$regKey = &quot;HKEY_CLASSES_ROOT\\SystemFileAssociations\\.caj\\shell\\caj2pdf\\command&quot;$regCommand = $caj2pdf + &#x27; convert \\&quot;%1\\&quot;&#x27;Write-Host (&#x27;reg add &quot;&#x27; + $regKey + &#x27;&quot; /ve /d &quot;&#x27; + $regCommand + &#x27;&quot; /f&#x27;)reg add $regKey /ve /d $regCommand /f\n\n详见 https://github.com/shenbo/caj2pdf/blob/master/build.ps1\n","categories":["office"],"tags":["caj2pdf"]},{"title":"PDF文档-电子发票信息提取","url":"/2025/05/22/office/PDF%E6%96%87%E6%A1%A3-%E7%94%B5%E5%AD%90%E5%8F%91%E7%A5%A8%E4%BF%A1%E6%81%AF%E6%8F%90%E5%8F%96/","content":"\npymupdf \n\npip install pymupdf\nhttps://pymupdf.readthedocs.io/en/latest/index.html\n\n\npyzbar \n\npip install pyzbar\nhttps://github.com/NaturalHistoryMuseum/pyzbar/\n\n\n\n用 pymupdf 提取电子发票中的信息\nhttps://pymupdf.readthedocs.io/en/latest/page.html#Page.get_text\n\nhttps://pymupdf.readthedocs.io/en/latest/page.html#Page.find_tables\n\n\n\n\n# %%import reimport fitz  # pip install PyMuPDFfrom rich.pretty import pprintdef fapiao_txt_reg(text=&quot;&quot;):    # 正则规则    regs = dict(        type=r&quot;(电子发票.*[普通发票|增值税专用发票].*)&quot;,        numb=r&quot;发票号码\\s*[:：]\\s*(\\d&#123;20&#125;)&quot;,        date=r&quot;开票日期\\s*[:：]\\s*(\\d&#123;4&#125;年\\d&#123;2&#125;月\\d&#123;2&#125;日)&quot;,        item=r&quot;(\\*[\\u4e00-\\u9fff]+\\*[\\u4e00-\\u9fff|\\w]+)&quot;,        totl=r&quot;价税合计[\\s\\S]*[¥￥](\\d+\\.\\d+)&quot;,    )    result = &#123;&#125;    for key, reg in regs.items():        match = re.search(reg, text)        if match:            result[key] = match.group(1)    return result# 1. 获取页面中的文字，从文字中正则提取fapiao = &quot;digital_12345678901234567890.pdf&quot;print(f&quot;filename: &#123;fapiao&#125;&quot;)src_pdf = fitz.open(fapiao)for p, page in enumerate(src_pdf):    blks = page.get_text(&quot;words&quot;, sort=True)    text = &quot;\\n&quot;.join(blk[4] for blk in blks)    print(f&quot;- page &#123;p&#125;&quot;)    pprint(text.split(&#x27;\\n&#x27;))src_pdf.close()fapiao_infos = fapiao_txt_reg(text)pprint(fapiao_infos)# %%from PIL import Imagefrom io import BytesIOfrom pyzbar import pyzbar# 2. 获取页面中的二维码图片-解析二维码src_pdf = fitz.open(fapiao)print(f&quot;filename: &#123;fapiao&#125;&quot;)for p, page in enumerate(src_pdf):    img_list = page.get_images()    for img in img_list:        print(f&quot;- page &#123;p&#125;, &quot;, img)                # 跳过长宽不等的图片        if img[2] != img[3]:            continue                # 转为 pillow 图片        pixmap = src_pdf.extract_image(img[0])        pprint(pixmap)        qr_img = Image.open(BytesIO(pixmap[&quot;image&quot;]))        # qr_img.show()        qr_decoded = pyzbar.decode(qr_img)        pprint(qr_decoded)        if qr_decoded:            qr_data = qr_decoded[0].data.decode(&quot;utf-8&quot;)            pprint(qr_data)src_pdf.close()# 二维码的字段定义不太确定 ？keys = [&quot;type&quot;, &quot;aera&quot;, &quot;x&quot;, &quot;numb&quot;, &quot;totl&quot;, &quot;date&quot;, &quot;y&quot;, &quot;code&quot;]fapiao_infos = dict(zip(keys, qr_data.split(&quot;,&quot;)))pprint(fapiao_infos)# %%# 3. 获取页面中的表格src_pdf = fitz.open(fapiao)page = src_pdf[0]tabs = page.find_tables().tablestable  = tabs[0].extract()for row in table:    pprint(row)for row in table:    for col in row:        if col:            print(col.replace(&quot;\\n&quot;, &quot;&quot;), end=&#x27;\\n&#x27;)    print()# %%\n\n","categories":["office"],"tags":["pdf"]},{"title":"xlwings 在 excel 中使用自定义 python 函数","url":"/2025/05/12/office/python-in-excel-xlwings/","content":"\n\nref: https://www.xlwings.org/\nref: https://docs.xlwings.org/en/latest/installation.html#installation\nref: https://docs.xlwings.org/en/latest/udfs.html#udfs\n\n\n0. xlwings 简介xlwings 提供了四种用法:\n\nxlwings (Open Source)， 本地 python模块、excel插件，代码在本地，运行在本地\nxlwings PRO， 商业版，收费\nxlwings Lite， 代码内置在excel文件中、运行在云端（代码公开）\nxlwings Server， 商业版，收费\n\n1. xlwings (Open Source) 本地版，在 excel 中使用自定义 python 函数1.1 excel 启用宏文件 -&gt; 选项 -&gt; 信任中心 -&gt; 信任中心设置 -&gt;宏设置 -&gt; 勾选 启用VBA宏 和 信任对VBA工程对象模型的访问\n1.2 安装 xlwings (Open Source)pip install xlwingsxlwings addin install# xlwings addin remove# pip uninstall xlwings\n\n1.3 快速使用xlwings config create --force# .xlwings\\xlwings.conf xlwings quickstart xlwings_test\nxlwings quickstart 命令会自动建立一个文件夹,内部有两个文件：\n\nxlwings_test.xlsm\nxlwings_test.py\n\n\n\n简单看一下 xlwings_test.py 的代码：\nimport xlwings as xwdef main():    wb = xw.Book.caller()    sheet = wb.sheets[0]    if sheet[&quot;A1&quot;].value == &quot;Hello xlwings!&quot;:        sheet[&quot;A1&quot;].value = &quot;Bye xlwings!&quot;    else:        sheet[&quot;A1&quot;].value = &quot;Hello xlwings!&quot;# 可以看出 main 函数的功能是：用于直接操作指定的单元格@xw.funcdef hello(name):    return f&quot;Hello &#123;name&#125;!&quot;# hello 函数则是一个方法函数，有输入输出：# 输入是 name， # 输出是 返回一个拼接的字符串if __name__ == &quot;__main__&quot;:    xw.Book(&quot;openmc_xlwings.xlsm&quot;).set_mock_caller()    main()\n\n1.4 测试 main 函数打开 xlwings_test.xlsm, 菜单栏切换到 xlwings 标签：\n\n\n点击 Run main: A1 表格 应该会出现 Hello xlwings!\n再次点击 Run main: A1 表格 应该会出现 Bye xlwings!\n1.5 测试 hello 函数打开 xlwings_test.xlsm, 菜单栏切换到 xlwings 标签：\n第一次导入 py 文件或有改动时, 点击 Import Functions （或 Restart UDF Server）。\n在任单元格中输入 =hello , 应该能弹出函数提示。\n假设 D1 单元格内容为： xlwings for excel, 在 D2 中填入： =hello(D1),  \nD2 最终返回 Hello xlwings for excel!\n2. 自定义函数： 调用 numpy、pandas 插值函数2.1 xlwings_test.py自定义一个插值函数：xl_interp\n\n\nref： https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.interp1d.html\n\n\nimport xlwings as xwimport pandas as pdfrom numpy import log, exp, interpfrom scipy.interpolate import interp1d@xw.funcdef xl_interp(x_val: float, y_str: str):    xy_cols = [&quot;xx&quot;, &quot;y1&quot;, &quot;y2&quot;, &quot;y3&quot;, &quot;y4&quot;],    xy_data = [            [0.1, 0.1509, 0.1674, 0.3425, 5.355],            [0.15, 0.1341, 0.149, 0.1829, 1.921],            [0.2, 0.1225, 0.1361, 0.1383, 0.9432],            [0.3, 0.1063, 0.1183, 0.1064, 0.3772],            [0.4, 0.09525, 0.1059, 0.092, 0.2172],            [0.5, 0.08694, 0.09667, 0.08282, 0.1514],            [0.6, 0.08041, 0.08943, 0.07611, 0.1178],            [0.8, 0.07065, 0.07856, 0.06644, 0.08472],            [1.0, 0.06349, 0.07062, 0.05957, 0.06844],            [1.5, 0.05168, 0.05747, 0.04862, 0.05102],            [2.0, 0.0444, 0.04932, 0.0425, 0.04536],            [3.0, 0.03573, 0.03961, 0.03611, 0.04199],            [4.0, 0.03072, 0.03395, 0.03303, 0.04175],            [5.0, 0.02745, 0.03024, 0.03139, 0.04257],            [6.0, 0.02516, 0.02763, 0.0305, 0.04379],            [8.0, 0.0222, 0.02423, 0.02985, 0.04667],            [10.0, 0.0204, 0.02214, 0.02989, 0.04965],            [15.0, 0.01805, 0.01936, 0.03088, 0.05653],            [20.0, 0.01702, 0.01808, 0.0322, 0.06202],        ]    df = pd.DataFrame(xy_data, columns=xy_cols)        # 1. 线性插值    y_interp = interp(x_val, df[&quot;xx&quot;], df[y_str])     # 2. 指数插值    y_interp_log = exp(interp(log(x_val), log(df[&quot;xx&quot;]), log(df[y_str])))    # 3. 样条插值：    # &#x27;zero&#x27;, &#x27;slinear&#x27;, &#x27;quadratic&#x27;, &#x27;cubic&#x27; : 零阶、一阶、二阶或三阶样条插值    y_interp_quad = scipy.interpolate.interp1d(df[&quot;xx&quot;], df[y_str], kind=&quot;quadratic&quot;)(x_val)    return y_interp\n\n2.2 xlwings_test.xlsm假设 G1 单元格内容为：2.5;  G2 单元格内容为：y1, \n在 G3 中填入： =xl_interp(G1, G2),\nG3 最终返回：0.040065\n3. xlwings Lite\n\nref: https://lite.xlwings.org/\n\n\n\n\nxlwings Lite 也挺好用的\n\n不需要本地有 python 环境。（基于 Pyodide）\n代码内置在 excel 文档中。\n库管理功能挺完善，numpy pandas scipy等基本库都没问题\n第一次运行应该是要联网的\n速度比本地慢一点，刷新计算时能感觉到，但也基本不影响正常使用\n\n使用时直接在侧边栏中编写 python 代码，有一些基本的功能\n\n配置安装 python 第三方库\n代码格式化： alt + shift + F\n简单的终端窗口\n\n","categories":["office"],"tags":["excel"]},{"title":"python-pyproject.toml打包","url":"/2025/04/29/python/python-%E6%89%93%E5%8C%85/","content":"1. pyproject.toml 说明pyproject.toml 是目前官方推荐的打包方式。\n\n官网 https://packaging.python.org/en/latest/guides/writing-pyproject-toml/\nhttps://setuptools.pypa.io/en/latest/userguide/datafiles.html\n\n官网写的比较抽象。这里记录下一个简单的使用方法。\n2. 包的文件夹结构建议的包文件结构如下，假设要创建一个名为snake的包：\nsnake_proj├──src/   └──snake/      ├──__init__.py      ├──AA.py      ├──BB.py      └──snake_data/         ├──xx.txt         └──yy.txt├──tests/   └──snake/├──.gitignore├──LICENSE├──pyproject.toml└──README.md\n\n3. 编写 pyproject.toml\n\n[project]name = &#x27;snake&#x27;version = &#x27;0.0.1&#x27;description = &quot;snake package&quot;authors = [&#123; name = &quot;123&quot;, email = &quot;abc@xyz.com&quot; &#125;][build-system]requires = [&quot;setuptools &gt;= 61.0&quot;]build-backend = &quot;setuptools.build_meta&quot;[tool.setuptools.package-data]&quot;snake_data&quot; = [&quot;*.txt&quot;]\n\n4. 打包# 安装 build 工具python -m pip install build# 打包python -m build -w -v# 安装 whlpython -m pip install dist\\snake-0.0.1-py3-none-any.whl --force-reinstall\n","categories":["python"],"tags":["python"]},{"title":"Win11-WSL-Ubuntu22.04-openmc 从源码编译安装","url":"/2025/03/27/wsl/wsl-ubuntu-openmc-build/","content":"一、WSL 安装 Ubuntu22.04\n启用 WSL\n\n打开 Microsoft Store，安装 Ubuntu22.04\n\n设置源，更新ref： https://linuxmirrors.cn/use/\n\n\n# 用户权限sudo -i# 安装 LinuxMirrors：bash &lt;(curl -sSL https://linuxmirrors.cn/main.sh)# 恢复原始设置：# bash &lt;(curl -sSL https://linuxmirrors.cn/main.sh) --use-official-source true# Docker 源：# bash &lt;(curl -sSL https://linuxmirrors.cn/docker.sh)sudo apt updatesudo apt upgrade\n\n\n安装 ZSH、oh-my-zsh\n\n参考 zsh &amp; oh-my-zsh 安装配置 \nsudo apt install zshsh -c &quot;$(wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh -O -)&quot;# sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;git clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-syntax-highlighting $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlightingsource ~/.zshrc\n\n二、编译安装 openmcref： https://docs.openmc.org/en/stable/quickinstall.html\n\n参照 Manually Installing from Source, 安装编译所需的基础库\n\nsudo apt install g++ cmake libhdf5-dev libpng-dev\n\n\n编译 build\n\ngit clone --recurse-submodules https://github.com/openmc-dev/openmc.gitcd openmcmkdir build &amp;&amp; cd buildcmake ..makesudo make install\n\n\n创建虚拟环境，安装 openmc 库\n\n\n\npython3 -Vsudo apt install python3-pippip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple# 创建虚拟环境sudo apt install python3-venvpython3 -m venv ~/openmc-venvsource ~/openmc-venv/bin/activate# 安装 openmcpython3 -m pip install .\n\n\n下载材料数据集\n\ngit clone https://github.com/openmc-dev/data openmc-dev_datacd openmc-dev_datapython3 convert_nndc71.py\n\n把 cross_sections.xml 的路径加入环境变量，或直接在openmc程序中设置：\n# code /home/xxxx/.local/lib/python3.10/site-packages/openmc/config.pyconfig[&#x27;cross_sections&#x27;] = &quot;/home/xxxx/openmc-dev_data/nndc-b7.1-hdf5/cross_sections.xml&quot;# 或者 直接加在程序前面import openmcopenmc.config[&quot;cross_sections&quot;] = &quot;/home/bo/openmc_data/nndc-b7.1-hdf5/cross_sections.xml&quot;\n","categories":["WSL"],"tags":["Ubuntu","WSL","openmc"]},{"title":"openmc.model 复合面命令","url":"/2025/02/22/wsl/wsl-ubuntu-openmc-model/","content":"一、openmc 面命令https://docs.openmc.org/en/stable/pythonapi/generated/openmc.XPlane.html\n\n\n\nmethod\n面\nmcnp\nparas\n参数说明\ngeometry\n\n\n\nopenmc.Plane\n任意无限平面\n\na&#x3D;1, b&#x3D;0, c&#x3D;0, d&#x3D;0\n系数\n$Ax+By+Cz&#x3D;D$\n\n\nopenmc.XPlane\nX无限平面\n\nx0&#x3D;0\n与原点的距离\n$x−x_0&#x3D;0$\n\n\nopenmc.YPlane\nY无限平面\n\ny0&#x3D;0\n与原点的距离\n$y−y_0&#x3D;0$\n\n\nopenmc.ZPlane\nZ无限平面\n\nz0&#x3D;0\n与原点的距离\n$z−z_0​&#x3D;0$\n\n\nopenmc.XCylinder\nX无限圆柱\n\ny0&#x3D;0, z0&#x3D;0, r&#x3D;1\n圆柱中心y0,z0  圆柱半径r\n$(y−y_0​)^2+(z−z_0​)^2&#x3D;r^2$\n\n\nopenmc.YCylinder\nY无限圆柱\n\nx0&#x3D;0, z0&#x3D;0, r&#x3D;1\n圆柱中心x0,z0  圆柱半径r\n$(x−x_0​)^2+(z−z_0​)^2&#x3D;r^2$\n\n\nopenmc.ZCylinder\nZ无限圆柱\n\nx0&#x3D;0, y0&#x3D;0, r&#x3D;1\n圆柱中心x0,y0  圆柱半径r\n$(x−x_0​)^2+(y−y_0​)^2&#x3D;r^2$\n\n\nopenmc.Sphere\n球面\n\nx0&#x3D;0, y0&#x3D;0, z0&#x3D;0, r&#x3D;1\n球心 x0,y0,z0  球半径r\n$(x−x_0)^2+(y−y_0)^2+(z−z_0)^2&#x3D;r^2$\n\n\nopenmc.Cone\n圆锥面\n\n\n\n\n\n\nopenmc.XCone\nx方向圆锥面\n\n\n\n$(y−y_0)^2+(z−z_0)^2&#x3D;r^2(x−x_0)^2$\n\n\nopenmc.YCone\ny方向圆锥面\n\n\n\n\n\n\nopenmc.ZCone\nz方向圆锥面\n\n\n\n\n\n\nopenmc.Quadric\n二次曲面\n\n\n\n\n\n\nopenmc.XTorus\nx环面\n\n\n\n\n\n\nopenmc.YTorus\ny环面\n\n\n\n\n\n\nopenmc.ZTorus\nz环面\n\n\n\n\n\n\n二、openmc 复合面命令 （mcnp macrobody）https://docs.openmc.org/en/stable/pythonapi/model.html#composite-surfaces\n\n\n\nmethod\n复合面\nmcnp\nparas\n\n\n\nConicalFrustum\n圆锥台\nTRC\ncenter_base 底面中心  axis 轴线方向  r1 底面半径  r2 顶面半径\n\n\nCruciformPrism\n多边形棱柱体\n\ndistances 距离  center&#x3D;(0, 0) 中心  axis&#x3D;”z” 轴线\n\n\nCylinderSector\n无限扇形柱体\n\nr1 扇内半径 r2 扇外半径\n\n\n\n\n\ntheta1 起始角度  theta2 结束角度\n\n\n\n\n\ncenter 中心轴坐标  axis 中心轴\n\n\nHexagonalPrism\n六边形柱体\n\nedge_length&#x3D;1 边长  orientation 方向  origin 原点\n\n\nIsogonalOctagon\n八边形柱体题\n\ncenter 中心轴坐标  r1 半宽 r2 半宽  axis&#x3D;”z” 轴线\n\n\nOrthogonalBox\n任意正交体\nBOX\nv 顶点坐标  a1 边1向量  a2 边2向量  a3 边3向量\n\n\nPolygon\n闭合点路径形成的多边形\n\npoints 点集 basis 基\n\n\nRectangularParallelepiped\n平行于轴的长方体\nRPP\nxmin xmax ymin ymax zmin zmax 坐标范围\n\n\nRectangularPrism\n四面围成的无限长方体\n\nwidth 宽  height 高  axis 轴向  origin 原点\n\n\nRightCircularCylinder\n圆柱体\nRCC\ncenter_base 底面中心  height 高度  radius 半径  axis 中心轴\n\n\nVessel\n圆柱容器及椭圆封头\n\nr 半径  p1 坐标  p2 坐标 \n\n\n\n\n\nh1 下封头高度  h2 上封头高度  center 中心轴坐标  axis 中心轴\n\n\nXConeOneSided\nx方向圆锥\n\n\n\n\nYConeOneSided\ny方向圆锥\n\n\n\n\nZConeOneSided\nz方向圆锥\n\n\n\n\n","categories":["WSL"],"tags":["Ubuntu","WSL","openmc"]},{"title":"pandas-numpy压缩保存数据","url":"/2025/02/06/sci-pandas/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-pandas-numpy%E5%8E%8B%E7%BC%A9%E4%BF%9D%E5%AD%98%E6%95%B0%E6%8D%AE/","content":"numpy的保存\nhttps://numpy.org/doc/stable/reference/generated/numpy.save.html\n\nnumpy保存数组比较简单。\n# 1. 保存单个数组numpy.save(file, arr, allow_pickle=True)# 2. 保存多个数组numpy.savez(file, *args, allow_pickle=True, **kwds)# 保存时如果不指定数组名字， 默认按照 arr_0, arr_1 编号numpy.savez(file, a1, a2) #  Arrays will be named: arr_0, arr_1 ...# 保存时指定数组名字numpy.savez(file, a1=a1, a2=a2) #  Arrays will be named: a1, a2 ...# 读取 npznpzfile = np.load(&#x27;file.npz&#x27;)print(npzfile.files)a1, a2 = [npzfile[key] for key in npzfile.files]# 3. 保存多个数组, 保存时进行数据压缩，用法与 numpy.savez() 一样# 压缩率一般在 10 倍以上，相应牺牲的是读取、保存时间，时间消耗大概是同样的倍率。numpy.savez_compressed(file, *args, allow_pickle=True, **kwds)\n\npandas的保存\nhttps://pandas.pydata.org/docs/user_guide/io.html\n\npandas保存复杂得多，提供了非常多的格式，常见的：csv，xlsx，h5等。\n\n\n\nType\nData Description\nReader\nWriter\n\n\n\ntext\nCSV\nread_csv\nto_csv\n\n\ntext\nFixed-Width Text File\nread_fwf\nNA\n\n\ntext\nJSON\nread_json\nto_json\n\n\ntext\nHTML\nread_html\nto_html\n\n\ntext\nLaTeX\nStyler.to_latex\nNA\n\n\ntext\nXML\nread_xml\nto_xml\n\n\ntext\nLocal clipboard\nread_clipboard\nto_clipboard\n\n\nbinary\nMS Excel\nread_excel\nto_excel\n\n\nbinary\nOpenDocument\nread_excel\nNA\n\n\nbinary\nHDF5 Format\nread_hdf\nto_hdf\n\n\nbinary\nFeather Format\nread_feather\nto_feather\n\n\nbinary\nParquet Format\nread_parquet\nto_parquet\n\n\nbinary\nORC Format\nread_orc\nto_orc\n\n\nbinary\nStata\nread_stata\nto_stata\n\n\nbinary\nSAS\nread_sas\nNA\n\n\nbinary\nSPSS\nread_spss\nNA\n\n\nbinary\nPython Pickle Format\nread_pickle\nto_pickle\n\n\nSQL\nSQL\nread_sql\nto_sql\n\n\n\n\n对比读写速度和文件体积。\n# %%import numpy as npimport pandas as pdimport hashlibimport osfrom rich.pretty import pprint  np.random.seed(42)#%%size = 10000df = pd.DataFrame()df[&quot;A&quot;] = np.random.rand(size)df[&quot;B&quot;] = np.random.randint(0, 10000, size)df[&quot;sin&quot;] = df[&quot;A&quot;].apply(lambda x: np.sin(x))df[&quot;datetime&quot;] = pd.date_range(&quot;20240101&quot;, periods=size, freq=&quot;s&quot;)df[&quot;array&quot;] = df[&quot;B&quot;].apply(lambda x: np.sin(x) * np.array([1, 2, 3]))df[&quot;string&quot;] = df[&quot;array&quot;].apply(lambda x: hashlib.md5(str(x).encode(&quot;utf8&quot;)).hexdigest())print(df)print(df.dtypes)# %%import timeitXLSX = &quot;test.xlsx&quot;CSV = &quot;test.csv&quot;PKL = &quot;test.pkl&quot;PKLZ = &quot;test.pklz&quot;HDF = &quot;test.hdf&quot;HDFZ = &quot;test.hdfz&quot;FTH = &quot;test.feather&quot;PQT = &quot;test.parquet&quot;funcs = [    # xls    lambda x: df.to_excel(XLSX),    lambda x: pd.read_excel(XLSX, index_col=0),    # csv    lambda x: df.to_csv(CSV, mode=&quot;w&quot;),    lambda x: pd.read_csv(CSV, index_col=0),    # pkl    lambda x: df.to_pickle(PKL),    lambda x: pd.read_pickle(PKL),    lambda x: df.to_pickle(PKLZ, compression=&quot;xz&quot;),    lambda x: pd.read_pickle(PKLZ, compression=&quot;xz&quot;),    # hdf    lambda x: df.to_hdf(HDF, key=&quot;test&quot;, mode=&quot;w&quot;),    lambda x: pd.read_hdf(HDF, &quot;test&quot;),    lambda x: df.to_hdf(HDFZ, key=&quot;test&quot;, mode=&quot;w&quot;, complib=&quot;blosc&quot;),    lambda x: pd.read_hdf(HDFZ, &quot;test&quot;),    # feather    lambda x: df.to_feather(FTH),    lambda x: pd.read_feather(FTH),    # parquet    lambda x: df.to_parquet(PQT),    lambda x: pd.read_parquet(PQT)]# %%# 定义测试参数runs_number = 1runs_result = []for i, name in enumerate([XLSX, CSV, PKL, PKLZ, HDF, HDFZ, FTH, PQT]):    func = name.replace(&quot;test.&quot;, &quot;&quot;)    w_speed = timeit.timeit(lambda: funcs[2 * i](df), number=runs_number)    r_speed = timeit.timeit(lambda: funcs[2 * i + 1](df), number=runs_number)    filesize = os.path.getsize(name) / 1024 / 1024    runs_result.append([func, w_speed, r_speed, filesize])pprint(runs_result)# %%# 打印结果df_rst = pd.DataFrame(runs_result, columns=[&quot;func&quot;, &quot;write [s]&quot;, &quot;read [s]&quot;, &quot;filesize [M]&quot;])pprint(df_rst)# %%df_rst.plot(x=&#x27;func&#x27;, y=[&#x27;write [s]&#x27;, &#x27;read [s]&#x27;, &#x27;filesize [M]&#x27;], kind=&#x27;bar&#x27;, title=f&#x27;datasize = &#123;size&#125;&#x27;)# %%\n\n\n\n\n经过对比发现 feather 、 parquet 格式的压缩率、读写速度通常比其他格式更好一些。\n","categories":["sci"],"tags":["pandas","numpy"]},{"title":"windows创建文件链接mklink","url":"/2025/02/04/apps/windows%E5%88%9B%E5%BB%BA%E6%96%87%E4%BB%B6%E9%93%BE%E6%8E%A5mklink/","content":"cmd命令：mklink&gt; mklink创建符号链接。MKLINK [[/D] | [/H] | [/J]] Link Target        /D      创建目录符号链接。默认为文件符号链接。        /H      创建硬链接而非符号链接。        /J      创建目录联接。        Link    指定新的符号链接名称。        Target  指定新链接引用的路径 (相对或绝对)。\n\n例：创建wechat文件夹目录链接将微信默认的接收文件夹 设置到 指定位置。\n\n注意：命令执行需要左边文件夹不存在，可先将微信退出、默认文件夹重命名为 file1、然后执行命令，再将 file1 中全部文件移至 file 里。\n\n# mklink /J [微信默认文件夹路径] [自定义的文件夹路径]mklink /J xxxx\\wechat\\xwechat_files\\wxid_123456789_1234\\msg\\file yyyy\\weixin_file# output# 为 xxxx\\wechat\\xwechat_files\\wxid_123456789_1234\\msg\\file &lt;&lt;===&gt;&gt; yyyy\\weixin_file 创建的联接\n","categories":["apps"],"tags":["mklink"]},{"title":"红杏楼","url":"/2025/01/01/yoyo/20250101-%E7%BA%A2%E6%9D%8F%E6%A5%BC/","content":"烟波金陵 缥缈江湖车走马急 你追我逐尽己所能 敬我弗如梦遥路远 终有归途\n二零二五元旦于红杏楼\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"python将png图片转换为gif、mp4","url":"/2024/12/24/python/python%E5%B0%86png%E5%9B%BE%E7%89%87%E8%BD%AC%E6%8D%A2%E4%B8%BAgif%E3%80%81mp4/","content":"gifpillow\nfrom PIL import Imageimport globpngs = glob.glob(&#x27;temp_png/*.png&#x27;)# print(pngs)frames = [Image.open(png) for png in pngs]frames[0].save(&#x27;z.gif&#x27;, format=&#x27;GIF&#x27;, append_images=frames[1:], save_all=True, duration=100, loop=0)\n\nmp4opencv-python\nimport globimport cv2pngs = glob.glob(&#x27;temp_png/*.png&#x27;)# print(pngs)frames = [cv2.imread(png) for png in pngs]h, w, l = frames[0].shapefourcc = cv2.VideoWriter_fourcc(*&#x27;mp4v&#x27;)video = cv2.VideoWriter(f&#x27;&#123;pl&#125;.mp4&#x27;, fourcc, 15, (w, h))for f in frames:    video.write(f) cv2.destroyAllWindows()video.release()\n","categories":["python"],"tags":["python"]},{"title":"用 pandoc 将 latex 转换为 word 文档","url":"/2024/12/08/sci/%E8%AE%BA%E6%96%87-latex2word-by-pandoc/","content":"用 pandoc 将 latex 转换为 word 文档\nref: https://www.cnblogs.com/jiankychen/p/pandoc.html\n\npandoc paper.tex |    --number-sections |    --filter pandoc-crossref |    -t docx+native_numbering |    -M tableEqns -M autoEqnLabels |    --bibliography ref.bib |    --citeproc --csl ieee-wireless-communications-letters.csl |    -M reference-section-title=Reference |    --reference-doc template.docx |    -o output.docx\n\n\n\n--number-sections 用于章节自动编号 【可选】\n\n--resource-path=.;Figures 指定源图片的存放文件夹；源图片与 tex 文件同一文件夹时可缺省\n\n. 表示当前工作目录，\n; 是 Windows 系统的分隔符; Linux、Unix、macOs 用 : \nFigures 是存放 tex 源图片的子文件夹的名称\neps、pdf 等格式无法正常转化进 Word 文件，需提前将图片转为 png、 jpg 等格式\n\n\n-filter pandoc-crossref 用于公式、图片、表格等的交叉引用【可选】\n\n需要从 Github 下载 pandoc-crossref, https://github.com/lierdakil/pandoc-crossref/releases\n并将 pandoc-crossref.exe 放到 Pandoc 的安装目录中\n\n\n-t docx+native_numbering 用于表格和图片的编号\n\n-M tableEqns -M autoEqnLabels\n\ntableEqns 以表格形式显示公式编号，即：创建一个两列表，将公式放在左边列，将公式编号放在右边列\nautoEqnLabels 为公式编号 \n具体可查看 pandoc-crossref 文档, http://lierdakil.github.io/pandoc-crossref\n\n\n--bibliography ref.bib 参考文献 bib 文件 【可选】\n\n--citeproc --csl references_style.csl 用于参考文献的引用、和参考文件的样式文件【可选】\n\n样式文件可从 Zotero Style Repository https://www.zotero.org/styles 下载 【可选】\n\n\n- M reference-section-title=Reference 添加参考文献的章节名 【可选】\n\n--toc 生成目录 【可选】\n\n--reference-doc template.docx  参考模板 Docx 文件 【可选】\n\n可从 IEEE article template 下载  https://template-selector.ieee.org/secure/templateSelector/publicationType\n或 https://github.com/Achuan-2/pandoc_word_template\n\n\n-o output.docx  输出 Word 文件名\n\n\n","categories":["sci"],"tags":["latex"]},{"title":"数据处理-scipy 三维插值 RegularGridInterpolator","url":"/2024/11/21/sci/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-scipy%E6%8F%92%E5%80%BC-%E4%B8%89%E7%BB%B4%E6%8F%92%E5%80%BC/","content":"scipy 三维插值现有一组 mesh datagrid 数据，主要包括坐标及该坐标对应的value。\ndata = &quot;&quot;&quot;│   │   x    y   z   val     0       1    1   1   0.00e+00 1       2    1   1   9.46e-072       3    1   1   8.44e-073       4    1   1   0.00e+004       5    1   1   2.05e-07...     ...  ... ... ...     249995  96   50  50  8.07e-07249996  97   50  50  1.35e-06249997  98   50  50  1.03e-06249998  99   50  50  5.56e-07249999  100  50  50  1.40e-06[250000 rows x 5 columns]&quot;&quot;&quot;\n\n插值获取其中任意一点 value。对这种规则的 mesh datagrid 可以直接使用 RegularGridInterpolator\nref https://docs.scipy.org/doc/scipy/reference/generated/scipy.interpolate.RegularGridInterpolator.html\nscipy.interpolate.RegularGridInterpolator(points, values, method=&#39;linear&#39;, bounds_error=True, fill_value=nan, *, solver=None, solver_args=None)\n\n\n\n参数\n定义\n说明\n\n\n\npoints\nn维规则网格\n数据格式举例：三维数据 (x,y,z)\n\n\n\n\nx,y,z 的shape分别为 m1,m2,m3 , 必须严格为升序或者降序\n\n\nvalues\n数据\n数据格式举例：values\n\n\n\n\nvalues.shape 应该为 (m1,m2,m3)\n\n\nmethod\n插值算法\n默认’linear’\n\n\n\n\n可选’nearest’、’slinear’、’cubic’、’quintic’和’pchip’\n\n\nbounds_error\n界内判定\n默认True, 越界报错；如果False，则使用fill_value\n\n\nfill_value\n界外填充值\n默认np.nan；如果None，则外推插值\n\n\nsolver\n求解器\n插值算法为 ‘slinear’、’cubic’和’quintic’时可用\n\n\nsolver_args\n求解器参数\n\n\n\n\n\nimport numpy as npimport pandas as pdfrom scipy.interpolate import RegularGridInterpolatordf = pd.read_csv(&#x27;data.csv&#x27;)x = np.sort(df[&#x27;x&#x27;].unique())y = np.sort(df[&#x27;y&#x27;].unique())z = np.sort(df[&#x27;z&#x27;].unique())# 将数据值转为三维数组values = df[&#x27;val&#x27;].values.reshape(len(x), len(y), len(z))print(values)mesh_intp = RegularGridInterpolator((x, y, z), values, bounds_error=False, fill_value=None)pos = (50.5, 45.5, 3.2)res = mesh_intp(pos)","categories":["sci"],"tags":["scipy"]},{"title":"blender-运动基础","url":"/2024/11/16/blender/blender-%E8%BF%90%E5%8A%A8%E5%9F%BA%E7%A1%80/","content":"1. blender 运动基础: 平移、旋转创建一个立方体，按照动作设定坐标后新建关键帧，就可以了。\n\n\n# give Python access to Blender&#x27;s functionalityimport bpy# extend Python&#x27;s math functionalityimport math# add a cube into the scenebpy.ops.mesh.primitive_cube_add()# get a reference to the currently active objectcube = bpy.context.active_object# insert keyframe at frame onecube.keyframe_insert(&quot;rotation_euler&quot;, frame=1)# change the rotation of the cube around z-axiscube.rotation_euler.z = math.radians(360)# insert keyframe at the last framecube.keyframe_insert(&quot;rotation_euler&quot;, frame=90)# change the location of the cube on the z-axiscube.location.z = 0cube.keyframe_insert(&quot;location&quot;, frame=100)cube.location.z = 5cube.keyframe_insert(&quot;location&quot;, frame=150)\n\n\n\n\nref:Beginner Python Exercise in Blender: Simple cube location animationhttps://www.youtube.com/watch?v=nmJqIaSZlRs\nFinal Code:https://gist.github.com/CGArtPython/83a324c9938216c91df746c15179e992\nBeginner Blender Python Exercise: Easy cube rotation animationhttps://www.youtube.com/watch?v=tBPuEWh88Lo\nFinal Code:https://gist.github.com/CGArtPython/11927dffa39a378fa00f7ab514e76f07\nhttps://twitter.com/cgpython\n\n2. blender 阵列实体旋转运动\n创建立方体阵列，沿Z轴堆叠，并旋转（每隔3°）；\n运动动画：逐个从下到上旋转一圈。\n\n\n\n\n# give Python access to Blender&#x27;s functionalityimport bpy# extend Python&#x27;s math functionalityimport math# extend Python functionality to generate random numbersimport randomdef animate_rotation(obj, current_frame, rotation_frame_count):    # remove the animation data from the duplicated object    obj.animation_data_clear()    # insert key frame    obj.keyframe_insert(&quot;rotation_euler&quot;, frame=current_frame)    # rotate object    obj.rotation_euler.z += math.radians(360)    # calculate the end frame    frame = current_frame + rotation_frame_count    # insert key frame    obj.keyframe_insert(&quot;rotation_euler&quot;, frame=frame)# add first cube mesh into the scenebpy.ops.mesh.primitive_cube_add(scale=(0.5, 2, 0.1))obj = bpy.context.active_objectobj.rotation_euler.z = math.radians(random.uniform(0, 360))bpy.ops.object.transform_apply()# create variables for stacking and rotatingangle_step = 3current_angle = 3# create variables for animating the rotationcurrent_frame = 1frame_step = 1rotation_frame_count = 90# animate the original meshanimate_rotation(obj, current_frame, rotation_frame_count)# stack and rotate the meshwhile current_angle &lt; 360:    # duplicate the mesh    bpy.ops.object.duplicate(linked=True)    # set location and rotation    obj = bpy.context.active_object    obj.location.z += obj.dimensions.z    obj.rotation_euler.z = math.radians(current_angle)    animate_rotation(obj, current_frame, rotation_frame_count)    # update the angle for the next iteration    current_angle += angle_step    # update the current_frame    current_frame += frame_step# update the end frame for the whole animationbpy.context.scene.frame_end = current_frame + rotation_frame_count\n\n\n\nref:Beginner Blender Python Tutorial: for loop practice \nhttps://www.youtube.com/watch?v=AcoYA4T2ErUhttps://www.youtube.com/watch?v=tC_Bu-VO8p0\nStart code:https://gist.github.com/CGArtPython/004d414871f04bfb2c7605a88ea1e7a7\nFinal code:https://gist.github.com/CGArtPython/cf74ed708ff8c7fc76d2aeda1710e034\n\n","categories":["blender"],"tags":["blender"]},{"title":"blender-mesh基础","url":"/2024/11/13/blender/blender-mesh%E5%9F%BA%E7%A1%80/","content":"Blender mesh 创建点线面  uOQ-CPcaqMo AxazJi3x6js任务：创建一个半径为2圆环，圆环上均布32个点，显示为点或者线。\n1. 点# give Python access to Blender&#x27;s functionalityimport bpy# extend Python&#x27;s math functionalityimport math# extend Python&#x27;s print functionalityimport pprint# initialize paramatersvert_count = 32  # show with 16 and 64angle_step = math.tau / vert_countradius = 2# create a list of vert coordinatesvert_coordinates = list()# repeat code in a loopfor i in range(vert_count):    # calculate current current_angle    current_angle = angle_step * i    # calculate coordinate    x = radius * math.cos(current_angle)    y = radius * math.sin(current_angle)    # visualize what we are doing    bpy.ops.mesh.primitive_ico_sphere_add(radius=0.05, location=(x, y, 0))    # add current coordinate to list    vert_coordinates.append((x, y, 0))pprint.pprint(vert_coordinates)\n\n\n\n\n2. 线# give Python access to Blender&#x27;s functionalityimport bpy# extend Python&#x27;s math functionalityimport mathimport pprintdef get_circle_verts(vert_count, radius):    # initialize paramaters    angle_step = math.tau / vert_count    # create a list of vert coordinates    vert_coordinates = list()    # repeat code in a loop    for i in range(vert_count):        # calculate current current_angle        current_angle = angle_step * i        # calculate coordinate        x = radius * math.cos(current_angle)        y = radius * math.sin(current_angle)        # visualize what we are doing        # bpy.ops.mesh.primitive_ico_sphere_add(radius=0.05, location=(x, y, 0))        # add current coordinate to list        vert_coordinates.append((x, y, 0))    return vert_coordinatesdef create_circle_mesh(coordinates, vert_count):    verts = coordinates    faces = []    edges = []    for i in range(vert_count - 1):        current_vert_index = i        next_vert_index = i + 1        edges.append((current_vert_index, next_vert_index))    edges.append((vert_count - 1, 0))    # create a mesh from the vert, edge, and face data    mesh_data = bpy.data.meshes.new(&quot;circle_data&quot;)    mesh_data.from_pydata(verts, edges, faces)    # create a object using the mesh data    mesh_obj = bpy.data.objects.new(&quot;circle_object&quot;, mesh_data)    bpy.context.collection.objects.link(mesh_obj)# initialize paramatersvert_count = 32radius = 2coordinates = get_circle_verts(vert_count, radius)mesh_obj = create_circle_mesh(coordinates, vert_count)\n\n\n\n\n\nref:Beginner Blender Python Exercise: Circle mesh from scratchhttps://www.youtube.com/watch?v=uOQ-CPcaqMohttps://www.youtube.com/watch?v=AxazJi3x6js\nFinal Code:circle_mesh_part_1 https://gist.github.com/CGArtPython/6e98beb424b6c58bbda0469b2c0434a9circle_mesh_part_2 https://gist.github.com/CGArtPython/a4dff81d8c233601759dffd48917f296\n\n","categories":["blender"],"tags":["blender"]},{"title":"blender-安装、vscode配置","url":"/2024/11/13/blender/blender-%E5%AE%89%E8%A3%85-vscode%E9%85%8D%E7%BD%AE/","content":"Blender Python 配置 (on Windows) YUytEtaVrrc1. 安装 vscode、 blenderscoop install vscodescoop install blender# blender 和内置的 python 路径如下：# blender path : C:\\Users\\xxxx\\scoop\\apps\\blender\\4.2.3\\blender.exe# blender build-in python path : C:\\Users\\shenb\\scoop\\apps\\blender\\4.2.3\\4.2\\python\\bin\\python.exe\n在 vscode 中选择 python 解释器，注意选择 blender 内置的 python 路径。\n2. 安装自动补全 fake-bpy-module安装时注意要选用 blender 内置的 python -m pip 安装。\n\nref: https://github.com/nutti/fake-bpy-module\n\nC:\\Users\\shenb\\scoop\\apps\\blender\\4.2.3\\4.2\\python\\bin\\python.exe -m pip install fake-bpy-module# 安装常用的其他包：# C:\\Users\\shenb\\scoop\\apps\\blender\\4.2.3\\4.2\\python\\bin\\python.exe -m pip install pandas# C:\\Users\\shenb\\scoop\\apps\\blender\\4.2.3\\4.2\\python\\bin\\python.exe -m pip install matplotlib\n\n\n3. 安装 vscode 插件： Blender Development\nref: https://marketplace.visualstudio.com/items?itemName=JacquesLucke.blender-development\n\n使用时打开命令面板 Ctrl+Shift+P:\n\nBlender: Start command 启动一个 Blender 程序实例。\nBlender: Run Script command 执行当前的 python 脚本。\n\n\n\nref:5 Steps to setup VSCode for Blender Python (on Windows)https://www.youtube.com/watch?v=YUytEtaVrrc\n\n","categories":["blender"],"tags":["blender"]},{"title":"视频字幕提取(2)-基于opencv和paddleocr","url":"/2024/11/11/sci-opencv/%E8%A7%86%E9%A2%91%E5%AD%97%E5%B9%95%E6%8F%90%E5%8F%96-opencv-paddleocr/","content":"视频内字幕提取\nvideo-subtitles-ocr视频字幕提取，基于 opencv 和 paddleocr\n视频内字幕提取这里是针对内封了硬字幕的视频，字幕已经成为了画面的一部分。\n思路：简单用 opencv 提取视频内的所有帧，现在可以使用 paddleocr，更加方便一点对图片进行 ocr 识别。\n0. 首先需要配置一下0.1 安装 python 库\nopencv-python\nscikit-image\npaddleocr\n\n\nref: https://paddlepaddle.github.io/PaddleOCR/latest/quick_start.html#1-paddlepaddle\n\n\n\n1. 读取视频使用 opencv 读取视频\nimport cv2video_path = &#x27;d7.mp4&#x27;v = cv2.VideoCapture(video_path)num_frames = int(v.get(cv2.CAP_PROP_FRAME_COUNT))fps = v.get(cv2.CAP_PROP_FPS)height = int(v.get(cv2.CAP_PROP_FRAME_HEIGHT))width = int(v.get(cv2.CAP_PROP_FRAME_WIDTH))print(f&#x27;video      :  &#123;video_path&#125;\\n&#x27;      f&#x27;num_frames :  &#123;num_frames&#125;\\n&#x27;      f&#x27;fps        :  &#123;fps&#125;\\n&#x27;      f&#x27;resolution :  &#123;width&#125; x &#123;height&#125;&#x27;)\n\n2. 提取所有帧import datetimedef get_frame_index(time_str: str, fps: float):    t = time_str.split(&#x27;:&#x27;)    t = list(map(float, t))    if len(t) == 3:        td = datetime.timedelta(hours=t[0], minutes=t[1], seconds=t[2])    elif len(t) == 2:        td = datetime.timedelta(minutes=t[0], seconds=t[1])    else:        raise ValueError(            &#x27;Time data &quot;&#123;&#125;&quot; does not match format &quot;%H:%M:%S&quot;&#x27;.format(time_str))    index = int(td.total_seconds() * fps)    return index# 起始时间、结束时间time_start = &#x27;0:00&#x27;time_end = &#x27;0:10&#x27;ocr_start = get_frame_index(time_start, fps) if time_start else 0ocr_end = get_frame_index(time_end, fps) if time_end else num_framesnum_ocr_frames = ocr_end - ocr_startprint(f&#x27;ocr_start       :  &#123;ocr_start&#125;\\n&#x27;      f&#x27;ocr_end         :  &#123;ocr_end&#125;\\n&#x27;      f&#x27;num_ocr_frames  :  &#123;num_ocr_frames&#125;&#x27;)\n\n3. 只保留画面中有字幕的区域# *** 调整字幕区域的高度，按比例 ***h1, h2 = 0.86, 0.94h1, h2 = int(height * h1), int(height * h2)v.set(cv2.CAP_PROP_POS_FRAMES, ocr_start)frames = [v.read()[1] for _ in range(num_ocr_frames)]z_frames = [frame[h1:h2, :] for frame in frames]# 预览一下title = &#x27;preview&#x27;cv2.startWindowThread()cv2.namedWindow(title)for idx, img in enumerate(z_frames):    tmp_img = img.copy()    cv2.putText(tmp_img, f&#x27;idx:&#123;idx&#125;&#x27;, (5, 25),                 cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)    cv2.imshow(title, tmp_img)    cv2.imshow(title, img)    cv2.waitKey(50)cv2.destroyWindow(title)cv2.destroyAllWindows()\n\n4. 去除相似度较高的帧，保留关键帧为了减少识别量，先去除一部分相似度较高的图片。\n\n计算两个图片的均方差（即 MSE）， 采用 skimage.metrics.mean_squared_error 函数\n\n# 设置阈值mse_threshold = 100from skimage.metrics import mean_squared_errork_frames = [&#123;&#x27;start&#x27;: 0,             &#x27;end&#x27;: 0,             &#x27;frame&#x27;: z_frames[0],             &#x27;text&#x27;: &#x27;&#x27;&#125;]for idx in range(1, num_ocr_frames):    img1 = z_frames[idx - 1]    img2 = z_frames[idx]    mse = mean_squared_error(img1, img2)    # print(idx, mse)    if mse &lt; mse_threshold:        k_frames[-1][&#x27;end&#x27;] = idx    else:        k_frames.append(&#123;&#x27;start&#x27;: idx,                         &#x27;end&#x27;: idx,                         &#x27;frame&#x27;: z_frames[idx],                         &#x27;text&#x27;: &#x27;&#x27;&#125;)for kf in k_frames:    print(f&quot;&#123;kf[&#x27;start&#x27;]&#125; --&gt; &#123;kf[&#x27;end&#x27;]&#125; : &#123;kf[&#x27;text&#x27;]&#125;&quot;)\n\n5.1 识别字幕 pytesseractimport pytesseractconfig = f&#x27;--tessdata-dir &quot;&#123;tessdata_dir&#125;&quot; --psm 7&#x27;for idx, kf in enumerate(k_frames):    # 识别为字符串    ocr_str = pytesseract.image_to_string(kf[&#x27;frame&#x27;], lang=lang, config=config)    ocr_str = ocr_str.strip().replace(&#x27; &#x27;, &#x27;&#x27;)    if ocr_str:        k_frames[idx][&#x27;text&#x27;] = ocr_str        print(f&quot;&#123;kf[&#x27;start&#x27;]&#125; --&gt; &#123;kf[&#x27;end&#x27;]&#125; : &#123;kf[&#x27;text&#x27;]&#125;&quot;)print([k_frames.remove(kf) for kf in k_frames if not kf[&#x27;text&#x27;]])\n\n5.2 识别字幕 paddleocrfrom paddleocr import PaddleOCRocr = PaddleOCR(lang=&#x27;ch&#x27;)for idx, kf in enumerate(k_frames):    # 识别字符串        result = ocr.ocr(kf[&#x27;frame&#x27;])    print(result)    for line in result:        if line == None: break                words = &#x27;&#x27;        for rect, word in line:            words += word[0]        print(idx, words)        k_frames[idx][&#x27;text&#x27;] = wordsprint([k_frames.remove(kf) for kf in k_frames if not kf[&#x27;text&#x27;]])\n\n6. 格式化字幕for kf in k_frames:    print(f&quot;&#123;kf[&#x27;start&#x27;]&#125; --&gt; &#123;kf[&#x27;end&#x27;]&#125; : &#123;kf[&#x27;text&#x27;]&#125;&quot;)def get_srt_timestamp(frame_index: int, fps: float):    td = datetime.timedelta(seconds=frame_index / fps)    ms = td.microseconds // 1000    m, s = divmod(td.seconds, 60)    h, m = divmod(m, 60)    return &#x27;&#123;:02d&#125;:&#123;:02d&#125;:&#123;:02d&#125;,&#123;:03d&#125;&#x27;.format(h, m, s, ms)for kf in k_frames:    time1 = get_srt_timestamp(kf[&#x27;start&#x27;], fps)    time2 = get_srt_timestamp(kf[&#x27;end&#x27;], fps)    print(f&quot;&#123;time1&#125; --&gt; &#123;time2&#125;\\n&#123;kf[&#x27;text&#x27;]&#125;\\n&quot;)\n","categories":["opencv"],"tags":["opencv","paddleocr"]},{"title":"latex eps图片转PNG","url":"/2024/11/08/sci/%E8%AE%BA%E6%96%87-latex-eps%E5%9B%BE%E7%89%87%E8%BD%ACpng/","content":"word 不能直接导入 eps 格式的图片，所以先将 eps 图片转换成 png 格式。\n这里使用 python 调用 PIL 读取 eps 图片，直接保存为 png 图片\n# pip install pillow# scoop install ghostscriptfrom PIL import Imageimport osfor parent, dirnames, filenames in os.walk(os.getcwd()):    for filename in filenames:        ext = os.path.splitext(filename)[1]        if ext != &#x27;.eps&#x27;:          continue        eps_image = Image.open(filename)        size = eps_image.size                print(filename, size)        eps_image.load(scale=10)    # 分辨率增大到10倍        eps_image.save(filename+&#x27;.png&#x27;, quality=100)\n\n\nPIL 默认采用 Ghostscript 处理 eps 图片， 所以先确保安装了 Ghostscript。 scoop install ghostscript\neps 为矢量图，默认情况下其尺寸较小，导致保存成图片式分辨率较低，eps_image.load(scale=10) 将分辨率增大到10倍后保存。\n\n","categories":["sci"],"tags":["latex"]},{"title":"音频转文字 openai whisper","url":"/2024/11/04/apps/%E9%9F%B3%E9%A2%91%E8%BD%AC%E6%96%87%E5%AD%97-openai-whisper/","content":"下载 bili 视频pip install you-get# you-get https://www.bilibili.com/video/BV1234567890pip install yt-dlp# yt-dlp https://www.bilibili.com/video/BV1234567890# yt-dlp &quot;https://www.youtube.com/watch?v=GGGGGGGGGGGG&quot; --proxy http://127.0.0.1:7890\n\n视频转音频scoop install ffmpegffmpeg -i xxx.mp4# checkout the audio video formatffmpeg -i xxx.mp4 -acodec copy xxx.aacffmpeg -i xxx.mp4 -acodec copy xxx.mp3ffmpeg -i xxx.mkv -acodec copy xxx.opus\n\n音频转文字 📘\nhttps://github.com/openai/whisper\n\n\n** whisper **：\n\npip install -U openai-whisperwhisper audio.flac audio.mp3 audio.wav --model small --device cpu --language zh\n\n\n** python **：使用 Python 运行 main.py 脚本。\n\nimport whispermodel = whisper.load_model(&quot;small&quot;, device=&quot;cpu&quot;)result = model.transcribe(f&quot;123.mp3&quot;)print(result[&quot;text&quot;]))\n","categories":["apps"],"tags":["openai whisper ffmpeg"]},{"title":"数据处理-scipy插值","url":"/2024/09/30/sci/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-scipy%E6%8F%92%E5%80%BC/","content":"numpy: 线性插值、 对数插值\nscipy: 样条插值 interp1d 等\nhttps://docs.scipy.org/doc/scipy/reference/interpolate.html\n# %%import numpy as npfrom numpy import log, exp, interpimport matplotlib.pyplot as pltfrom scipy.interpolate import interp1d as sciInterfrom scipy.interpolate import Akima1DInterpolator as sciAkimafrom scipy.interpolate import PchipInterpolator as sciPchipfrom scipy.interpolate import CubicSpline as sciCubicimport pandas as pdfrom rich.pretty import pprintpd.set_option(&quot;display.width&quot;, 1000)pd.set_option(&quot;display.max_rows&quot;, 500)pd.set_option(&quot;display.max_columns&quot;, 500)# %%df = pd.read_csv(&quot;datas.csv&quot;)pprint(df)\n\n\n\n# %%# === 对比插值方法 取值范围 = [0.1, 10]df_it = pd.DataFrame(np.logspace(-1, 1, num=1000), columns=[&quot;x&quot;])pprint(df_it)X, Y = df[&quot;xxx&quot;], df[&quot;val&quot;]df_it[&quot;linear&quot;] = df_it[&quot;x&quot;].apply(lambda x: interp(x, X, Y))df_it[&quot;np_log&quot;] = df_it[&quot;x&quot;].apply(lambda x: exp(interp(log(x), log(X), log(Y))))df_it[&quot;Inter1&quot;] = df_it[&quot;x&quot;].apply(lambda x: sciInter(X, Y, kind=&quot;slinear&quot;)(x))df_it[&quot;Inter2&quot;] = df_it[&quot;x&quot;].apply(lambda x: sciInter(X, Y, kind=&quot;quadratic&quot;)(x))df_it[&quot;Inter3&quot;] = df_it[&quot;x&quot;].apply(lambda x: sciInter(X, Y, kind=&quot;cubic&quot;)(x))df_it[&quot;Akima1&quot;] = df_it[&quot;x&quot;].apply(lambda x: sciAkima(X, Y, method=&quot;akima&quot;)(x))df_it[&quot;PchipI&quot;] = df_it[&quot;x&quot;].apply(lambda x: sciPchip(X, Y)(x))df_it[&quot;CubicS&quot;] = df_it[&quot;x&quot;].apply(lambda x: sciCubic(X, Y)(x))pprint(df_it)\n\n# %%# === 3. plotplt.figure(figsize=(16, 9))plt.scatter(X, Y, color=&quot;r&quot;, marker=&quot;*&quot;, label=&quot;data&quot;)for col in df_it.columns[1:]:    plt.plot(df_it[&quot;x&quot;], df_it[col], linestyle=&quot;-.&quot;, lw=1, label=f&quot;&#123;col&#125;&quot;)plt.xscale(&quot;log&quot;)plt.yscale(&quot;log&quot;)# plt.xlim(0.1, 10)# plt.ylim(0.0, 10)plt.legend()plt.grid(&quot;:&quot;)plt.show()","categories":["sci"],"tags":["scipy pandas"]},{"title":"XPS 9340 (intel 集显)使用Solidworks卡顿","url":"/2024/07/25/xps/XPS9340-Intel%E9%9B%86%E6%98%BE-Solidworks%E5%8D%A1%E9%A1%BF/","content":"新 XPS 9340（Intel Ultra 7 155H）使用 Solidworks 2023 还是会卡。\n毛病跟之前 XPS 9370 一样。\n但是现在 Solidworks 官方已经给出类解决方案：\n\nhttps://www.solidworks.com/support/hardware-certification/\n\n下载 SolidWorks_GraphicsCards_Support.msi, 安装就行了。\n\n\n\n\n","categories":["xps"],"tags":["xps","solidworks"]},{"title":"cat-catch 插件调用 N_m3u8DL-RE","url":"/2024/04/04/apps/n_m3u8dl-re_cat-catch/","content":"cat-catch 设置 N_m3u8DL-RE\nref https://github.com/nilaoda/N_m3u8DL-REref https://github.com/xifangczy/cat-catchref https://github.com/corbamico/m3u8dl-invoke/\n\n1.1 电脑安装 n-m3u8dl-re 软件scoop install n-m3u8dl-re_x\n\n1.2 Edge 浏览器安装 cat-catch 插件\nhttps://cat-catch.bmmmd.com/\nhttps://cat-catch.bmmmd.com/docs/m3u8dl\n\n设置 -  N_m3u8DL-RE 的参数：\n&quot;$&#123;url&#125;&quot; --save-dir &quot;%USERPROFILE%\\Downloads\\m3u8dl&quot; --save-name &quot;$&#123;title&#125;_$&#123;now&#125;&quot; $&#123;referer|exists:&#x27;-H &quot;Referer:*&quot;&#x27;&#125; --del-after-done --no-log\n1.3 添加 m3u8dl协议\n使用 https://github.com/xifangczy/URLProtocol 工具。\n下载URLProtocol和N_m3u8DL-RE 并放置在一起。\n打开URLProtocol工具，协议名填写 m3u8dl 点击选择目标程序按钮，选择N_m3u8DL-RE.exe 点击添加。\n\n1.4 添加 m3u8dl协议（另一种方法）\n\n先用 powershell 写一段脚本 n_m3u8dl-re_protocol.ps1 ，然后转换成可执行文件 n_m3u8dl-re_protocol.exe \n\n脚本\n\n# 接收m3u8://xxxxxxparam($m3u8url)Write-Host &quot;m3u8url: $m3u8url&quot;$bs64 = $m3u8url.replace(&#x27;m3u8dl://&#x27;, &#x27;&#x27;).replace(&#x27;/&#x27;, &#x27;&#x27;)$httpurl = [Text.Encoding]::ASCII.GetString([Convert]::FromBase64String($bs64))Write-Host &quot;httpurl: $httpurl&quot;$path = &#x27;c:\\Users\\xxxxx\\scoop\\shims\\N_m3u8DL-re.exe&#x27; $cmd = $path + &#x27; &#x27; + $httpurlWrite-Host &quot;$cmd&quot;Start-Process &quot;$path&quot; &quot;$httpurl&quot; -NoNewWindowStart-Sleep 30\n\n转换\n\nInstall-Module ps2exeps2exe n_m3u8dl-re_protocol.ps1 n_m3u8dl-re_protocol.exe\n\n添加注册表 m3u8dl 协议\nreg add &quot;HKCR\\m3u8dl\\shell\\open\\command&quot; /ve /t REG_SZ /d &quot;C:\\Users\\XXXX\\n_m3u8dl-re_protocol.exe %1&quot; /f# 测试在浏览器输入 &#x27;m3u8dl://&#x27; , 能够打开？ \n\n&#x3D;&#x3D;&#x3D;\n2 N_m3u8DL-RE on Synology2.1 下载&#x2F;安装 N_m3u8DL-REwget https://github.com/nilaoda/N_m3u8DL-RE/releases/download/v0.2.0-beta/N_m3u8DL-RE_Beta_linux-x64_20230628.tar.gz\n\n2.2 设置 ffmpeg 等路径~/N_m3u8DL-RE --del-after-done --binary-merge \\  --ffmpeg-binary-path /var/packages/ffmpeg7/target/bin/ffmpeg7 \\  --tmp-dir /volume2/downloads/ \\  --save-dir /volume2/video \\  -M mp4 https://xxxxxxxxxxxxxxxxxxxxxx.m3u8\n\n2.3 或者 新建 config 文件# N_m3u8DL-RE.cfg--del-after-done --binary-merge --ffmpeg-binary-path /var/packages/ffmpeg7/target/bin/ffmpeg7--tmp-dir /volume2/downloads/--save-dir /volume2/video-M mp4\n\n~/N_m3u8DL-RE @N_m3u8DL-RE.cfg --save-name 1229 https:xxxxxxxxxxxxxxxxxxxxxx.m3u8\n","categories":["apps"],"tags":["N_m3u8DL-RE"]},{"title":"数据可视化：matplotlib color 字符对照","url":"/2024/03/07/sci-matplotlib/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-matplotlib-color-%E5%AD%97%E7%AC%A6%E5%AF%B9%E7%85%A7/","content":"matplotlib marker color 字符对照\nref: https://matplotlib.org/stable/api/colors_api.htmlref: https://matplotlib.org/stable/gallery/color/named_colors.html\n\nimport matplotlib.pyplot as pltimport matplotlib.colors as mcolorsfor (k, v) in mcolors.BASE_COLORS.items():    v = &quot;#&quot; + &quot;&quot;.join(format(round(val * 255), &quot;02x&quot;) for val in v)    print(f&#x27;&lt;font color=&quot;&#123;v&#125;&quot;&gt; &#123;k:&lt;10&#125; ■  &lt;/font&gt;&#x27;)for (k, v) in mcolors.TABLEAU_COLORS.items():    print(f&#x27;&lt;font color=&quot;&#123;v&#125;&quot;&gt; &#123;k:&lt;10&#125; ■ &lt;/font&gt;&#x27;)\nmcolors.BASE_COLORS (8) ████ b           ████ g           ████ r           ████ c           ████ m           ████ y           ████ k           ████ w          \n\n\nmcolors.TABLEAU_COLORS (10) ████ tab:blue    ████ tab:orange  ████ tab:green   ████ tab:red     ████ tab:purple  ████ tab:brown   ████ tab:pink    ████ tab:gray    ████ tab:olive   ████ tab:cyan   \n\n\n\n\nmcolors.CSS4_COLORS (148)\n\nmcolors.XKCD_COLORS (949)\n\ncodeimport mathimport matplotlib.pyplot as pltimport matplotlib.colors as mcolorsfrom matplotlib.patches import Rectangledef plot_colortable(colors, *, ncols=4, sort_colors=True):    cell_width = 212    cell_height = 22    swatch_width = 48    margin = 12    # Sort colors by hue, saturation, value and name.    if sort_colors is True:        names = sorted(            colors, key=lambda c: tuple(mcolors.rgb_to_hsv(mcolors.to_rgb(c))))    else:        names = list(colors)    n = len(names)    nrows = math.ceil(n / ncols)    width = cell_width * ncols + 2 * margin    height = cell_height * nrows + 2 * margin    dpi = 72    fig, ax = plt.subplots(figsize=(width / dpi, height / dpi), dpi=dpi)    fig.subplots_adjust(margin/width, margin/height,                        (width-margin)/width, (height-margin)/height)    ax.set_xlim(0, cell_width * ncols)    ax.set_ylim(cell_height * (nrows-0.5), -cell_height/2.)    ax.yaxis.set_visible(False)    ax.xaxis.set_visible(False)    ax.set_axis_off()    for i, name in enumerate(names):        row = i % nrows        col = i // nrows        y = row * cell_height        swatch_start_x = cell_width * col        text_pos_x = cell_width * col + swatch_width + 7        ax.text(text_pos_x, y, name, fontsize=14,                horizontalalignment=&#x27;left&#x27;,                verticalalignment=&#x27;center&#x27;)        ax.add_patch(            Rectangle(xy=(swatch_start_x, y-9), width=swatch_width,                      height=18, facecolor=colors[name], edgecolor=&#x27;0.7&#x27;)        )    return fig# =========== 1 =================for cl in [mcolors.BASE_COLORS, mcolors.TABLEAU_COLORS, mcolors.CSS4_COLORS, mcolors.XKCD_COLORS]:    print(len(cl))for (k, v) in mcolors.BASE_COLORS.items():    v = &quot;#&quot; + &quot;&quot;.join(format(round(val * 255), &quot;02x&quot;) for val in v)    print(f&#x27;&lt;font color=&quot;&#123;v&#125;&quot;&gt; ████ &#123;k:&lt;10&#125; &lt;/font&gt;&#x27;)for (k, v) in mcolors.TABLEAU_COLORS.items():    print(f&#x27;&lt;font color=&quot;&#123;v&#125;&quot;&gt; ████ &#123;k:&lt;10&#125; &lt;/font&gt;&#x27;)# =========== 2 =================plot_colortable(mcolors.BASE_COLORS, ncols=5, sort_colors=False)# plt.savefig(&#x27;mcolors.BASE_COLORS.png&#x27;, dpi=300)plt.show()plot_colortable(mcolors.TABLEAU_COLORS, ncols=5, sort_colors=False)# plt.savefig(&#x27;mcolors.TABLEAU_COLORS.png&#x27;, dpi=300)plt.show()plot_colortable(mcolors.CSS4_COLORS, ncols=10)# plt.savefig(&#x27;mcolors.CSS4_COLORS.png&#x27;, dpi=300)plt.show()plot_colortable(mcolors.XKCD_COLORS, ncols=10)# plt.savefig(&#x27;mcolors.XKCD_COLORS.png&#x27;, dpi=300)plt.show()\n","categories":["sci"],"tags":["matplotlib"]},{"title":"Win 11 禁用文件夹的文件类型识别","url":"/2024/03/04/apps/Win11-folder/","content":"文件夹禁用文件类型识别文件夹启动时默认会识别该文件夹内的文件类型（比如图片、音乐、视频等媒体文件的信息），媒体文件过多时加载速度较慢。\n可以禁用此功能。\n# 管理员运行运行后重启：reg add &quot;HKCU\\SOFTWARE\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\Bags\\AllFolders\\Shell&quot; /v &quot;FolderType&quot; /t REG_SZ /d &quot;NotSpecified&quot; /f  # 恢复默认：# reg.exe delete &quot;HKCU\\SOFTWARE\\Classes\\Local Settings\\Software\\Microsoft\\Windows\\Shell\\Bags\\AllFolders\\Shell&quot; /f \n\n","categories":["apps"],"tags":["config"]},{"title":"python f-string 备忘表","url":"/2024/03/03/python/python-f-string/","content":"Python f-string 备忘单\nref https://fstring.help/cheat/\nref https://cheatography.com/brianallan/cheat-sheets/python-f-strings-basics/ref https://cheatography.com/brianallan/cheat-sheets/python-f-strings-number-formatting/\n\n数字\n\n\nnum\nformat\n\n\n\n%d\n整数\n\n\n%e\n科学计数\n\n\n%f\n浮点\n\n\n%\n百分数\n\n\n%b\n二进制\n\n\n%o\n八进制\n\n\n%x\n十六进制\n\n\n%c\nUnicode\n\n\n\n\n\ninteger &#x3D; 123number_ &#x3D; 9876.6789percent &#x3D; 0.98765\n\n\n\n\n\n\nvar\nnum\nformat\nf-string\noutput\n\n\n\ninteger\n123\nd\nf’{integer:d}’\n123\n\n\ninteger\n123\nb\nf’{integer:b}’\n1111011\n\n\ninteger\n123\n8b\nf’{integer:8b}’\n1111011\n\n\ninteger\n123\n_b\nf’{integer:_b}’\n111_1011\n\n\ninteger\n123\n09_b\nf’{integer:09_b}’\n0111_1011\n\n\ninteger\n123\no\nf’{integer:o}’\n173\n\n\ninteger\n123\n#o\nf’{integer:#o}’\n0o173\n\n\ninteger\n123\nx\nf’{integer:x}’\n7b\n\n\ninteger\n123\n#x\nf’{integer:#x}’\n0x7b\n\n\ninteger\n123\n08x\nf’{integer:08x}’\n0000007b\n\n\ninteger\n123\nc\nf’{integer:c}’\n{\n\n\nnumber_\n9876.6789\nf\nf’{number_:f}’\n9876.678900\n\n\nnumber_\n9876.6789\n.2f\nf’{number_:.2f}’\n9876.68\n\n\nnumber_\n9876.6789\n09.2f\nf’{number_:09.2f}’\n009876.68\n\n\nnumber_\n9876.6789\n09.5f\nf’{number_:09.5f}’\n9876.67890\n\n\nnumber_\n9876.6789\n.2f\nf’{number_:.2f}’\n9876.68\n\n\npercent\n0.98765\n%\nf’{percent:%}’\n98.765000%\n\n\npercent\n0.98765\n9.5%\nf’{percent:9.5%}’\n98.76500%\n\n\npercent\n0.98765\n09.4%\nf’{percent:09.4%}’\n098.7650%\n\n\npercent\n0.98765\n09.5%\nf’{percent:09.5%}’\n98.76500%\n\n\nnumber_\n9876.6789\n.2e\nf’{number_:.2e}’\n9.88e+03\n\n\nnumber_\n9876.6789\n09.2e\nf’{number_:09.2e}’\n09.88e+03\n\n\n\n\n\nstring &#x3D; “Python”\n\n\n\n\n\n\nvar\nnum\nformat\nf-string\noutput\n\n\n\nstring\nPython\n20\nf’{string:20}’\nPython\n\n\nstring\nPython\n&gt;20\nf’{string:&gt;20}’\nPython\n\n\nstring\nPython\n&lt;20\nf’{string:&lt;20}’\nPython\n\n\nstring\nPython\n^20\nf’{string:^20}’\nPython\n\n\nstring\nPython\n&gt;&gt;20\nf’{string:&gt;&gt;20}’\n&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Python\n\n\nstring\nPython\n&lt;&lt;20\nf’{string:&lt;&lt;20}’\nPython&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n\n\nstring\nPython\n^^20\nf’{string:^^20}’\n^^^^^^^Python^^^^^^^\n\n\nstring\nPython\n&#x3D;^20\nf’{string:&#x3D;^20}’\n&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;Python&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n\n\n\n\n\n","categories":["python"],"tags":["python"]},{"title":"python 正则表达式备忘表","url":"/2024/02/03/python/python-regex/","content":"Python 正则表达式备忘表\nref https://regexlearn.com/zh-cn/cheatsheet\n\n\nref https://www.w3schools.com/python/python_regex.asp\n\n\n\n\n\n","categories":["python"],"tags":["python"]},{"title":"放射性核素衰变-radioactivedecay(2)","url":"/2024/01/04/nuclear/Python-%E6%94%BE%E5%B0%84%E6%80%A7%E6%A0%B8%E7%B4%A0%E8%A1%B0%E5%8F%98-radioactivedecay(2)/","content":"radioactivedecay 用于放射性核素衰变的简单分析计算的开源包，支持放射性核素、亚稳态和分支衰变的衰变链。\n\nhttps://github.com/radioactivedecay/radioactivedecay\n\n安装：pip install radioactivedecay\n# %%# ============ (2) ==================import radioactivedecay as rdimport matplotlib.pyplot as plt# 创建一组放射性源项：Inventoryinv = rd.Inventory(&#123;&#x27;U-235&#x27;: 1&#125;, &#x27;Ci&#x27;)inv_t1 = inv.decay(50, &#x27;d&#x27;)print(inv_t1.activities(&#x27;Bq&#x27;))# 绘图 inv.plot(50, &#x27;d&#x27;)inv.plot(50, &#x27;d&#x27;, order=&#x27;alphabetical&#x27;)# %%import radioactivedecay as rdimport matplotlib.pyplot as pltfrom cycler import cyclerplt.rcParams[&quot;font.family&quot;] = &quot;monospace&quot;cm = [&#x27;#1f77b4&#x27;, &#x27;#ff7f0e&#x27;, &#x27;#2ca02c&#x27;, &#x27;#d62728&#x27;, &#x27;#9467bd&#x27;, &#x27;#8c564b&#x27;, &#x27;#e377c2&#x27;, &#x27;#7f7f7f&#x27;, &#x27;#bcbd22&#x27;, &#x27;#17becf&#x27;]ls = [&#x27;-&#x27;, &#x27;--&#x27;]mk = [&#x27;+&#x27;, &#x27;x&#x27;, &#x27;*&#x27;, &#x27;^&#x27;, &#x27;s&#x27;]me = [31, 71, 91, 113, 161]cc = (cycler(color=cm) + cycler(linestyle=ls) * (cycler(marker=mk))) + cycler(markevery=me) * 2DICT = &#123;&#x27;U-235&#x27;: 1e9,        &#x27;Rn-222&#x27;: 1e9&#125;TIME = iter([10, 1])for (hesu, huodu) in DICT.items():    t1 = next(TIME)    inv = rd.Inventory(&#123;hesu: huodu&#125;, &#x27;Bq&#x27;)    inv_t1 = inv.decay(t1, &#x27;d&#x27;)    act_t1 = inv_t1.activities(&#x27;Bq&#x27;)    fig_name = f&#x27;&#123;hesu&#125; @ &#123;huodu:0.2e&#125; Bq&#x27;    fig_note = f&#x27;the Activity after &#123;t1&#125; days of Decay:\\n&#x27;    fig_note += &#x27;\\n&#x27;.join(f&#x27;- &#123;k&#125; &#123;v:.2e&#125; Bq&#x27; for (k, v) in act_t1.items())    print(fig_name, &#x27;\\n&#x27; ,fig_note)    fig0 = plt.figure(figsize=(9, 9))    plt.gca().set_prop_cycle(cc)       fig, ax = inv.plot(t1, &#x27;d&#x27;, yscale=&#x27;log&#x27;, ymin=1e-8, order=&#x27;alphabetical&#x27;, fig=fig0)    plt.title(fig_name)    plt.text(0.3, 0.1, fig_note, transform=ax.transAxes)    plt.grid(True, linestyle=&#x27;:&#x27;, color=&#x27;gray&#x27;, alpha=0.5)    plt.show()    fig.savefig(f&#x27;decay_activity_&#123;hesu&#125;.png&#x27;, dpi=300)\n\n\n\n\n","categories":["python"],"tags":["python","radioactivedecay"]},{"title":"放射性核素衰变-radioactivedecay","url":"/2024/01/04/nuclear/Python-%E6%94%BE%E5%B0%84%E6%80%A7%E6%A0%B8%E7%B4%A0%E8%A1%B0%E5%8F%98-radioactivedecay/","content":"radioactivedecay 用于放射性核素衰变的简单分析计算的开源包，支持放射性核素、亚稳态和分支衰变的衰变链。\n\nhttps://github.com/radioactivedecay/radioactivedecay\n\n安装：pip install radioactivedecay\n#%%import radioactivedecay as rdimport matplotlib.pyplot as plt# 创建一个放射性核素： Nuclidencld = rd.Nuclide(&#x27;U-235&#x27;)half = ncld.half_life(&#x27;readable&#x27;)    # 半衰期prog = ncld.progeny()                # 衰变产物frac = ncld.branching_fractions()    # 占比mode = ncld.decay_modes()            # 衰变射线类型print(ncld, mode, prog, frac, half, sep=&#x27;\\n&#x27;)# 绘制衰变链ncld.plot()#%%# 列出多个核算衰变类型NUCs = [&#x27;U-235&#x27;,        &#x27;Pu-239&#x27;]for name in NUCs:    ncld = rd.Nuclide(name)    half = ncld.half_life(&#x27;readable&#x27;)    prog = ncld.progeny()    frac = ncld.branching_fractions()    mode = ncld.decay_modes()    print(ncld, mode, prog, frac, half, sep=&#x27;\\n&#x27;)    fig, ax = ncld.plot()    fig.savefig(f&#x27;decay_chains_&#123;name&#125;.png&#x27;, dpi=300)\n\n\n\n","categories":["python"],"tags":["python","radioactivedecay"]},{"title":"pandas按条件筛选和设置表格样式","url":"/2023/11/06/sci-pandas/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-pandas%E6%8C%89%E6%9D%A1%E4%BB%B6%E7%AD%9B%E9%80%89/","content":"pandas 按条件筛选和设置表格样式。\n\nhttps://pandas.pydata.org/docs/user_guide/indexing.html#boolean-indexing\nhttps://pandas.pydata.org/docs/reference/style.html#style\n\n\n\n#%%import pandas as pd# df 数据来自 《pandas合并pd.concat-pd.merge》#%%print(&#x27;\\n*** 计算: 对比数据 与 基础 的差 标记： _pd  ***&#x27;)cols = [&#x27;rmse1&#x27;, &#x27;r_2_1&#x27;, &#x27;rmse2&#x27;, &#x27;r_2_2&#x27;, &#x27;rmse3&#x27;, &#x27;r_2_3&#x27;]        for col in cols:        df[col] = df[col] * 100    df[col+&#x27;p&#x27;] = df[col+&#x27;p&#x27;] * 100    df[col+&#x27;_pd&#x27;] = df[col] - df[col+&#x27;p&#x27;]df.head(10)#%%print(&#x27;\\n*** 计算: LSTM模型 与 RNN 的差, 标记： _md  ***&#x27;)for idx, row in df.iterrows():    if row.model==&#x27;LSTM&#x27;:        on1 = df.model    == &#x27;RNN&#x27;        on2 = df.steps    == row.steps        on3 = df.seed     == row.seed        on4 = df.epochs   == row.epochs        on5 = df.out_size == row.out_size                pk = df[on1 &amp; on2 &amp; on3 &amp; on4 &amp; on5]        pk_idx = pk.index[0]                for col in cols:            md = df.loc[idx, col] - df.loc[pk_idx, col]            df.loc[idx, col+&#x27;_md&#x27;] = md# %%colsp = [&#x27;rmse1_pd&#x27;, &#x27;r_2_1_pd&#x27;, &#x27;rmse2_pd&#x27;, &#x27;r_2_2_pd&#x27;, &#x27;rmse3_pd&#x27;, &#x27;r_2_3_pd&#x27;]colsm = [&#x27;rmse1_md&#x27;, &#x27;r_2_1_md&#x27;, &#x27;rmse2_md&#x27;, &#x27;r_2_2_md&#x27;, &#x27;rmse3_md&#x27;, &#x27;r_2_3_md&#x27;]cols1 = [&#x27;rmse1_md&#x27;, &#x27;rmse2_md&#x27;, &#x27;rmse3_md&#x27;]cols2 = [&#x27;r_2_1_md&#x27;, &#x27;r_2_2_md&#x27;, &#x27;r_2_3_md&#x27;]format_dict = &#123;&#x27;delta&#x27;: &#x27;&#123;0:.2%&#125;&#x27;&#125;for col in colsp: format_dict[col] = &#x27;&#123;0:.2%&#125;&#x27;for col in colsm: format_dict[col] = &#x27;&#123;0:.2%&#125;&#x27;def color_map1(val):    color = &#x27;white&#x27;    if val &lt; 0: color = &#x27;lightgreen&#x27;    return f&#x27;background-color: &#123;color&#125;&#x27;def color_map2(val):    color = &#x27;#FFFFFF&#x27;    if val &gt; 0: color = &#x27;lightblue&#x27;    return f&#x27;background-color: &#123;color&#125;&#x27;df.style.format(format_dict)\\        .highlight_between(left=-0.05,right=0.05, subset=colsp)\\        .applymap(color_map1, subset=[&#x27;rmse1_md&#x27;, &#x27;rmse2_md&#x27;, &#x27;rmse3_md&#x27;])\\        .applymap(color_map2, subset=[&#x27;r_2_1_md&#x27;, &#x27;r_2_2_md&#x27;, &#x27;r_2_3_md&#x27;])","categories":["sci"],"tags":["pandas"]},{"title":"pandas合并pd.concat-pd.merge","url":"/2023/11/01/sci-pandas/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-pandas%E5%90%88%E5%B9%B6pd.concat-pd.merge/","content":"pandas 合并数据常用的两个函数：\n\npd.concat https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html\n\npd.merge https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.merge.html\n\n\n刚好有一个对比 RNN 和 LSTM 神经网络运行结果的场景分别用到了这两个函数：\n\n采用 concat 合并两个csv表； csv表为两次运行结果的，列名基本一致。\n采用 merge 合并模型运行条件类似的表， 用于对比数据\n\n\n\n#%%import pandas as pdimport iopd.set_option(&#x27;display.width&#x27;, 1000)pd.set_option(&#x27;display.max_rows&#x27;, 500)pd.set_option(&#x27;display.max_columns&#x27;, 500)# -------------print(&#x27;*** 基础数据 ***&#x27;)res1_csv = &#x27;&#x27;&#x27;model,steps,out_size,seed,epochs,rmse1p,r_2_1p,rmse2p,r_2_2p,rmse3p,r_2_3pRNN,24,2,0,0,0.1131,0.8846,0.1681,0.7449,,RNN,48,2,0,0,0.1119,0.8871,0.1694,0.7412,,LSTM,24,2,0,0,0.1108,0.8894,0.166,0.7514,,LSTM,48,2,0,0,0.1109,0.8892,0.1661,0.7511,,RNN,24,3,0,0,0.1157,0.8797,0.1629,0.76,0.1978,0.6471RNN,48,3,0,0,0.1159,0.8792,0.162,0.7628,0.1982,0.6455LSTM,24,3,0,0,0.1126,0.886,0.1584,0.7732,0.1926,0.6653LSTM,48,3,0,0,0.1125,0.8863,0.1587,0.7723,0.1933,0.6629&#x27;&#x27;&#x27;df_res1 = pd.read_csv(io.StringIO(res1_csv))print(df_res1)#%%# -------------print(&#x27;\\n*** 对比数据 ***&#x27;)res2_csv = &#x27;&#x27;&#x27;model,steps,seed,epochs,rmse1,r_2_1,rmse2,r_2_2LSTM,24,1,50,0.1110,0.8890,0.1661,0.7512LSTM,24,2,50,0.1109,0.8892,0.1658,0.7520LSTM,24,3,50,0.1118,0.8874,0.1667,0.7494LSTM,24,4,50,0.1109,0.8891,0.1666,0.7496LSTM,24,5,50,0.1127,0.8855,0.1662,0.7507LSTM,24,6,50,0.1107,0.8896,0.1659,0.7518LSTM,24,7,50,0.1110,0.8889,0.1659,0.7516LSTM,24,8,50,0.1119,0.8872,0.1667,0.7493LSTM,24,9,50,0.1109,0.8892,0.1657,0.7523LSTM,48,1,50,0.1110,0.8891,0.1663,0.7504LSTM,48,2,50,0.1106,0.8897,0.1658,0.7520LSTM,48,3,50,0.1120,0.8869,0.1671,0.7481LSTM,48,4,50,0.1117,0.8876,0.1677,0.7464LSTM,48,5,50,0.1110,0.8890,0.1662,0.7508LSTM,48,6,50,0.1145,0.8819,0.1683,0.7445LSTM,48,7,50,0.1113,0.8883,0.1676,0.7467LSTM,48,8,50,0.1106,0.8898,0.1665,0.7499LSTM,48,9,50,0.1107,0.8896,0.1657,0.7524RNN,24,1,50,0.1219,0.8660,0.1723,0.7321RNN,24,2,50,0.1114,0.8882,0.1674,0.7471RNN,24,3,50,0.1139,0.8830,0.1675,0.7468RNN,24,4,50,0.1106,0.8898,0.1678,0.7461RNN,24,5,50,0.1145,0.8818,0.1738,0.7275RNN,24,6,50,0.1134,0.8842,0.1677,0.7463RNN,24,7,50,0.1164,0.8778,0.1694,0.7412RNN,24,8,50,0.1121,0.8867,0.1711,0.7358RNN,24,9,50,0.1104,0.8901,0.1668,0.7490RNN,48,1,50,0.1121,0.8868,0.1682,0.7447RNN,48,2,50,0.1134,0.8842,0.1657,0.7524RNN,48,3,50,0.1122,0.8865,0.1678,0.7459RNN,48,4,50,0.1123,0.8864,0.1673,0.7476RNN,48,5,50,0.1146,0.8817,0.1694,0.7411RNN,48,6,50,0.1185,0.8735,0.1722,0.7325RNN,48,7,50,0.1122,0.8865,0.1725,0.7317RNN,48,8,50,0.1175,0.8756,0.1752,0.7231RNN,48,9,50,0.1130,0.8849,0.1662,0.7509&#x27;&#x27;&#x27;df_res2 = pd.read_csv(io.StringIO(res2_csv))df_res2[&#x27;out_size&#x27;] = 2res3_csv = &#x27;&#x27;&#x27;model,steps,seed,epochs,rmse1,r_2_1,rmse2,r_2_2,rmse3,r_2_3LSTM,24,1,50,0.114,0.8833,0.1588,0.7721,0.1937,0.6615LSTM,24,2,50,0.1126,0.8861,0.1588,0.7721,0.1928,0.6648LSTM,24,3,50,0.1138,0.8835,0.1585,0.7728,0.1931,0.6637LSTM,24,4,50,0.1124,0.8864,0.1583,0.7735,0.1925,0.6657LSTM,24,5,50,0.1131,0.8851,0.1581,0.7741,0.1922,0.6667LSTM,24,6,50,0.1126,0.886,0.159,0.7715,0.1931,0.6636LSTM,24,7,50,0.1129,0.8854,0.16,0.7684,0.1942,0.6599LSTM,24,8,50,0.1121,0.887,0.1583,0.7734,0.1931,0.6635LSTM,24,9,50,0.1126,0.8861,0.1584,0.7732,0.193,0.6639LSTM,48,1,50,0.1119,0.8874,0.1578,0.7748,0.1928,0.6646LSTM,48,2,50,0.1124,0.8865,0.1592,0.771,0.1948,0.6577LSTM,48,3,50,0.1131,0.8851,0.1588,0.772,0.1932,0.6634LSTM,48,4,50,0.1127,0.8858,0.158,0.7742,0.193,0.6639LSTM,48,5,50,0.1124,0.8865,0.1583,0.7735,0.1932,0.6632LSTM,48,6,50,0.1122,0.8869,0.1585,0.773,0.1933,0.663LSTM,48,7,50,0.1135,0.8842,0.1599,0.7688,0.1934,0.6626LSTM,48,8,50,0.1121,0.887,0.158,0.7744,0.1932,0.6632LSTM,48,9,50,0.1132,0.8848,0.1591,0.7711,0.193,0.6639RNN,24,1,50,0.1175,0.876,0.1597,0.7694,0.195,0.657RNN,24,2,50,0.1153,0.8804,0.1597,0.7693,0.1946,0.6584RNN,24,3,50,0.1176,0.8757,0.159,0.7714,0.1951,0.6567RNN,24,4,50,0.1144,0.8823,0.159,0.7715,0.1949,0.6572RNN,24,5,50,0.1146,0.8819,0.1599,0.769,0.196,0.6533RNN,24,6,50,0.1168,0.8774,0.1611,0.7653,0.1954,0.6556RNN,24,7,50,0.1192,0.8723,0.1594,0.7702,0.194,0.6604RNN,24,8,50,0.1154,0.8803,0.1591,0.7712,0.1942,0.6599RNN,24,9,50,0.1152,0.8806,0.1609,0.7659,0.1955,0.6551RNN,48,1,50,0.116,0.879,0.1611,0.7653,0.1985,0.6445RNN,48,2,50,0.113,0.8853,0.161,0.7657,0.1957,0.6544RNN,48,3,50,0.115,0.8812,0.1589,0.7716,0.195,0.6568RNN,48,4,50,0.1131,0.8851,0.159,0.7715,0.1945,0.6589RNN,48,5,50,0.1141,0.883,0.1599,0.769,0.1953,0.6558RNN,48,6,50,0.1156,0.8799,0.1596,0.7698,0.1952,0.6561RNN,48,7,50,0.1169,0.8773,0.1626,0.761,0.1967,0.6508RNN,48,8,50,0.1213,0.8678,0.1605,0.7672,0.1946,0.6583RNN,48,9,50,0.1132,0.8848,0.1587,0.7723,0.1943,0.6594&#x27;&#x27;&#x27;df_res3 = pd.read_csv(io.StringIO(res3_csv))df_res3[&#x27;out_size&#x27;] = 3print(df_res2)print(df_res3)#%%# concat# res2、res3 分别为两次运行结果的# 由于res3 比 res2 多两列， 合并后 res2 会有两列缺失的数据。print(&#x27;\\n*** 合并对比数据 Nx2 Nx3 ***&#x27;)df_res = pd.concat((df_res2, df_res3)).reset_index(drop=True)df_res# 将列重新排序df_res = df_res[[&#x27;model&#x27;, &#x27;steps&#x27;, &#x27;out_size&#x27;, &#x27;seed&#x27;, &#x27;epochs&#x27;,                  &#x27;rmse1&#x27;, &#x27;r_2_1&#x27;, &#x27;rmse2&#x27;, &#x27;r_2_2&#x27;, &#x27;rmse3&#x27;, &#x27;r_2_3&#x27;]]# print(df_res.columns)df_res#%%# merge# 这里将res 与 res1 按照模型、步长、输出等条件进行合并# 会产生扩展的列，不需要的列一并删掉print(&#x27;\\n*** 拼接结果 ***&#x27;)df = pd.merge(df_res, df_res1, how=&#x27;outer&#x27;,               on=[&#x27;model&#x27;, &#x27;steps&#x27;, &#x27;out_size&#x27;],               suffixes=(&#x27;&#x27;, &#x27;_DROP&#x27;)).filter(regex=&#x27;^(?!.*_DROP)&#x27;)df.info()df = df.fillna(0)df.head(10)","categories":["sci"],"tags":["pandas"]},{"title":"Win10-WSL-Ubuntu22.04-openmc 安装与配置","url":"/2023/10/12/wsl/wsl-ubuntu-openmc/","content":"一、WSL 安装 Ubuntu22.04\n启用 WSL\n\n打开 Microsoft Store，安装 Ubuntu22.04\n\n设置源，更新ref： https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/\n\n\n更新：sudo apt update\n升级：sudo apt upgrade\n\n安装 ZSH、oh-my-zsh\n\n参考 zsh &amp; oh-my-zsh 安装配置 \n二、安装 openmc with condaref： https://docs.openmc.org/en/stable/quickinstall.html\n\n参照 Installing on Linux&#x2F;Mac with Conda，安装 openmc。\n\n# https://www.anaconda.com/docs/getting-started/miniconda/install#linux# 安装 minicondawget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.shbash ~/Miniconda3-latest-Linux-x86_64.sh# 安装 openmcconda config --add channels conda-forgeconda config --set channel_priority strictconda create --name openmc-env openmcconda activate openmc-env\n\n安装完成后，运行 openmc 试一下, 提示错误： 找不到材料数据卡 cross_sections.xml。\n\n下载材料数据集\n\ngit clone https://github.com/openmc-dev/data openmc-dev_datacd openmc-dev_datapython3 convert_nndc71.py\n\n\n材料库数据集目录如下：\n.├── LICENSE├── README.md├── combine_libraries.py├── convert_fendl.py├── convert_jeff32.py├── convert_jeff33.py├── convert_lib80x.py├── convert_mcnp70.py├── convert_mcnp71.py├── convert_nndc71.py  ### 下载脚本， ENDF/B-VII.1├── convert_tendl.py├── convert_tendl_rand.py├── depletion│   └── ...├── generate_cendl.py├── generate_endf.py├── generate_jeff33.py├── generate_jendl.py├── make_compton.py├── make_stopping_powers.py├── make_test_data.py├── nndc-b7.1-ace│   ├── ENDF-B-VII.1-neutron-293.6K│   │   ├── Ac_225_293.6K.ace│   │   ├── Ac_226_293.6K.ace│   │   ...│   │   ├── Zr_095_293.6K.ace│   │   ├── Zr_096_293.6K.ace│   │   └── xsdir│   ├── al.acer│   ├── be.acer│   ...│   └── zrzrh.acer├── nndc-b7.1-download    ### 下载的源文件│   ├── neutron│   │   ├── ENDF-B-VII.1-neutron-293.6K.tar.gz│   │   └── ENDF-B-VII.1-tsl.tar.gz│   └── photon│       ├── ENDF-B-VII.1-atomic_relax.zip│       └── ENDF-B-VII.1-photoat.zip├── nndc-b7.1-endf│   ├── atomic_relax│   │   ├── atom-001_H_000.endf│   │   ├── atom-002_He_000.endf│   │   ...│   │   ├── atom-099_Es_000.endf│   │   └── atom-100_Fm_000.endf│   └── photoat│       ├── photoat-001_H_000.endf│       ├── photoat-002_He_000.endf│       ...│       ├── photoat-099_Es_000.endf│       └── photoat-100_Fm_000.endf├── nndc-b7.1-hdf5│   ├── cross_sections.xml    ### 转换生成的材料卡，以后主要就是调用这个│   ├── neutron│   │   ├── Ac225.h5│   │   ├── Ac226.h5│   │   ...│   │   ├── c_para_D.h5│   │   └── c_para_H.h5│   └── photon│       ├── Ac.h5│       ├── Ag.h5│       ...│       ├── Zn.h5│       └── Zr.h5├── sample_sandy.py└── utils.py\n\n\n把 cross_sections.xml 的路径加入环境变量，或直接在openmc程序中设置：\n# code /home/xxxx/.local/lib/python3.10/site-packages/openmc/config.pyconfig[&#x27;cross_sections&#x27;] = &quot;/home/xxxx/openmc-dev_data/nndc-b7.1-hdf5/cross_sections.xml&quot;\n\n\ndone.\n\n","categories":["WSL"],"tags":["Ubuntu","WSL","openmc"]},{"title":"使用 scoop 安装管理 windows 软件（4）：安装包解压密码","url":"/2023/07/23/scoop/%E4%BD%BF%E7%94%A8scoop%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86windows%E8%BD%AF%E4%BB%B6(4)-%E5%AE%89%E8%A3%85%E5%8C%85%E8%A7%A3%E5%8E%8B%E5%AF%86%E7%A0%81/","content":"ref: https://github.com/ScoopInstaller/Scoop/issues/4390\n0. 问题： scoop 本身不支持安装包有解压密码的自动解压。scoop 本身不支持安装包有解压密码的自动解压。因此在安装 MAS 时会卡在解压处，无法继续安装。\n1. 7z 命令手册7z 命令是支持的： 7z x FILENAME.7z -pPWD -oOUTDIR\n2. 查 Scoop 源码的解压函数找到 Scoop 源码里的 “~\\scoop\\apps\\scoop\\current\\lib\\decompress.ps1” 文件。文件封装了 Expand-7zipArchive 函数命令， 但参数没有能将密码传入的方法。\n3. 试 Scoop 的 pre_installScoop Wiki 里提到了 pre_install 等说法。\n在 MAS.json 中加入：\n&quot;pre_install&quot;: &quot;7z x $dir\\\\$fname -p1234 $(&#x27;-o&#x27; + $dir)&quot;，\n尝试了很多次还是不起作用，Scoop的策略是遇到压缩包先执行解压、再做后续的事情。所以这一句不会被执行，安装程序依旧卡在解压处，无法继续安装。\n\n\n\ngithub 也有类似问题：ref: https://github.com/ScoopInstaller/Scoop/issues/4390JourneyOver commented on Sep 27, 2022\n Does this no longer work? I&#39;ve tried multiple different things of trying to set it to install / pre_install and neither seem to actually work, looking at task manager it seems that it&#39;s not actually calling 7-zip at all with the password and instead just defaulting to trying to extract the file without the password at all.does extract_dir or extract_to support password any? as looking at https://scoop-docs.vercel.app/docs/concepts/App-Manifests.html#a-simple-example doesn&#39;t seem to show an example with &gt; password protect files at all.\nniheaven commented on Sep 27, 2022\nUse Expand-7zipArchive and pass arguments, sorry the password has not been supported in manifest.\nJourneyOver commented on Sep 28, 2022\nSo I actually figured out the situation, whenever the url ends in either .zip/.rar or any other rared typed of extension, it&#39;ll always throw the default extraction method, no matter the pre_install or installer stuff.. solution is just to append random bit at end that isn’t .zip&#x2F;.rar or other rar type of extensions and then it’ll extract the file correctly with the installer or pre_install bits.&#96;\nniheaven commented on Sep 28, 2022\nSo I actually figured out the situation, whenever the url ends in either .zip/.rar or any other rared typed of extension, it&#39;ll always throw the default extraction method, no matter the pre_install or installer stuff.. solution is just to append random bit at end that isn&#39;t .zip/.rar or other rar type of extensions and then it&#39;ll extract the file correctly with the installer or pre_install bits.\n\n4. 解决办法下载时将文件后缀改为不是压缩包的格式，将 url 后面加上 #dl.7z_ , 下载完成后缀名就变成了 .7z_。\nScoop 的安装程序就不会自动执行默认的解压程序 Expand-7zipArchive ； 这样 pre_install 命令就可以正常工作。 \n修改后的安装配置文件：\nmas_x.json\n&#123;    &quot;version&quot;: &quot;1.7&quot;,    &quot;description&quot;: &quot;Microsoft-Activation-Scripts https://massgrave.dev&quot;,    &quot;homepage&quot;: &quot;https://github.com/massgravel/Microsoft-Activation-Scripts&quot;,    &quot;url&quot;: &quot;https://github.com/massgravel/Microsoft-Activation-Scripts/releases/download/1.7/MAS_1.7_Password_1234.7z#dl.7z_&quot;,    &quot;hash&quot;: &quot;852946f630a25b46f9fcbf34b777f57aacfe10036ba0d7e9e919385c510c212e&quot;,    &quot;bin&quot;: &quot;All-In-One-Version\\\\MAS_AIO.cmd&quot;,    &quot;shortcuts&quot;: [        [            &quot;All-In-One-Version\\\\MAS_AIO.cmd&quot;,            &quot;MAS_AIO&quot;        ]    ],    &quot;pre_install&quot;:[        &quot;$zip=(Get-ChildItem $dir\\\\MAS_*).Name&quot;,        &quot;7z x $dir\\\\$zip -p1234 $(&#x27;-o&#x27; + $dir) | Out-Null&quot;,        &quot;Move-Item $dir\\\\MAS_$version\\\\* $dir&quot;    ],    &quot;post_install&quot;: [        &quot;Remove-Item $dir\\\\*dl.7z_ -Force&quot;,        &quot;Remove-Item $dir\\\\MAS_$version -Force -Recurse&quot;    ],    &quot;checkver&quot;: &#123;        &quot;github&quot;: &quot;https://github.com/massgravel/Microsoft-Activation-Scripts&quot;    &#125;,    &quot;autoupdate&quot;: &#123;        &quot;url&quot;: &quot;https://github.com/massgravel/Microsoft-Activation-Scripts/releases/download/$version/MAS_$version_Password_1234.7z&quot;    &#125;&#125;","categories":["apps"],"tags":["scoop"]},{"title":"ESP8266 定时开关 [Micropython]","url":"/2023/07/22/esp8266/ESP8266%20Switch%20Micropython/","content":"0. 引脚表引脚如下图所示：\n\n\n\n\n\n\n\n注意：开机之后有的引脚是默认上电的!!!https://zhuanlan.zhihu.com/p/568057038https://www.yiboard.com/thread-1834-1-1.html\n\n1. 定时开关from machine import Pinimport networkimport timeimport ntptimeimport uasyncio as asyncio# === 0. wifi config ==========================ssid = &#x27;xxxx&#x27;pswd = &#x27;cccc&#x27;led = Pin(2, Pin.OUT)led.on()async def wifi_connect():    while True:        try:            wlan = network.WLAN(network.STA_IF)            wlan.active(True)            wlan.connect(ssid, pswd)            status = wlan.ifconfig()            print(&#x27;wifi=&#123;&#125;  ip=&#123;&#125;&#x27;.format(ssid, status[0]))            print(time.localtime(), &#x27;wifi time&#x27;)            led.off()            await asyncio.sleep(300)                    except Exception as e:            led.on()            print(&#x27;ERROR&#x27;, e)# === 1. ntp update ==========================async def ntp_update():    while True:        try:            # https://www.pool.ntp.org/zone/cn            ntptime.host = &#x27;cn.pool.ntp.org&#x27;            ntptime.settime()            now = time.localtime(time.time() + 8*3600)            print(now, ntptime.host)            led.off()            await asyncio.sleep(300)                    except Exception as e:            led.on()            print(&#x27;ERROR&#x27;, e)# === 2. light control ==========================light = Pin(5, Pin.OUT)light.on()async def led_control():    while True:        try:            now = time.localtime(time.time() + 8*3600)            hh, mm, ss = now[3], now[4], now[5]                        if hh not in range(7, 22):                light.on()            else:                light.off()                        await asyncio.sleep(3)                    except Exception as e:            print(&#x27;ERROR&#x27;, e)loop = asyncio.get_event_loop()loop.create_task(wifi_connect())loop.create_task(ntp_update())loop.create_task(led_control())loop.run_forever()","categories":["ESP8266"],"tags":["ESP8266","Micropython"]},{"title":"ESP8266 Micropython 配置","url":"/2023/07/17/esp8266/ESP8266%20Micropython%20config/","content":"板子型号：ESP-12E\n0. 安装 windows 驱动：CP2102\nhttps://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers?tab=downloads\nCP210x_Universal_Windows_Driver\n\n1. 安装 esptoolpip install esptool# usb 连接电脑，# &quot;我的电脑&quot;-&gt;&quot;管理&quot;-&gt;&quot;设备管理器&quot;-&gt;&quot;端口&quot;# 检查端口号esptool chip_id \n\n\n\n\n2. 刷入固件\nhttps://micropython.org/download/esp8266/\nesp8266-20210618-v1.16.bin\n\nesptool --port COM3 erase_flashesptool --port COM3 --baud 115200 write_flash --flash_size=detect 0 esp8266-20230426-v1.20.0.bin \n\n2. 刷入固件（Thonny）安装 Thonny， scoop install thonny\nThonny 对 Micropython 的支持也挺好的，可以当作代码编辑器。\n3. Led 测试板载 LED 的编号是 2， 测试一下。\nfrom machine import Pinled = Pin(2, Pin.OUT)  # 对应板子上的引脚编号是 D4led.off()              # 亮灯，你们看错，是相反的!#led.on()               # 灭灯\n\n板载LED 亮灭的逻辑是反向的GPIO2 为高电平时，LED 熄灭；GPIO2 低电平时，LED 亮起。\n注意：开机之后有的引脚是默认上电的!!!\n\n","categories":["ESP8266"],"tags":["ESP8266","Micropython"]},{"title":"群晖 VSCode Remote 配置","url":"/2023/07/16/synology/%E7%BE%A4%E6%99%96-vscoderemote%E9%85%8D%E7%BD%AE/","content":"1. 客户端 VSCode 安装 Remote 插件安装插件, 略\n添加远程连接 aaa@192.168.1.xxx， 连接、等待， 输入密码\n2. 连接时可能连不上，并出现警告\n警告： The remote host may not meet VS Code Server&#39;s prerequisitesfor glibc and libstdc++\n\n\n\n\n\n这个警告实际上不用管它。我在这个问题上卡了很久。。。\n3. 连不上的真实原因原因：群晖考虑安全性默认禁止了TCP转发，即配置文件里AllowTcpForwarding的默认值为: “no”\n解决方法： 通过ssh 连接群晖， 编辑 /etc/ssh/sshd_config 文件，修改：\n# AllowTcpForwarding no  AllowTcpForwarding yes\n保存后重启群晖。\n","categories":["synology"],"tags":["vscode","synology"]},{"title":"日历：从在线日历获取事件","url":"/2023/07/12/office/%E6%97%A5%E5%8E%86%EF%BC%9A%E4%BB%8E%E5%9C%A8%E7%BA%BF%E6%97%A5%E5%8E%86%E8%8E%B7%E5%8F%96%E4%BA%8B%E4%BB%B6/","content":"从在线日历获取事件Outlook 查看日历链接： 设置-日历-共享日历-发布日历，可以看到如下链接：\n“https://outlook.live.com/owa/calendar/d82e6afe-XXXX-XXXX/cid-YYYY/calendar.ics“\nfrom ics import Calendarimport requests # Parse the URLurl = &quot;https://outlook.live.com/owa/calendar/d82e6afe--XXXX-XXXX/cid-YYYY/calendar.ics&quot;cal = Calendar(requests.get(url).text)#%%# Print all the eventsevents = sorted(cal.events)for event in events:    print(event.begin , event.name )#%%timeline = cal.timelinefor tl in timeline:    print(tl.begin , tl.name )# %%# 获取今天及之后的事件from ics import Calendarimport requestsimport arrowcal = Calendar(requests.get(url).text)today = arrow.now()print(today)today = arrow.now().replace(hour=0, minute=0, second=0, microsecond=0)print(today)today = arrow.now().span(&#x27;day&#x27;)[0]print(today)evts = cal.timeline.start_after(today)for evt in evts:    print(evt.begin.strftime(&quot;%Y-%m-%d %a %H:%M&quot;), evt.name )\n","categories":["office"],"tags":["calendar"]},{"title":"使用 scoop 安装管理 windows 软件（3）：自己制作一个安装配置文件","url":"/2023/02/23/scoop/%E4%BD%BF%E7%94%A8scoop%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86windows%E8%BD%AF%E4%BB%B6(3)-%E8%87%AA%E5%B7%B1%E5%81%9A%E4%B8%80%E4%B8%AA%E5%AE%89%E8%A3%85%E6%96%87%E4%BB%B6/","content":"\nref: (https://github.com/ScoopInstaller/Scoop/wiki/App-Manifests)\n\n尝试自己制作一个安装配置文件， 软件是 N_m3u8DL-RE。\n&#123;    &quot;version&quot;: &quot;v0.2.0-beta&quot;,    &quot;description&quot;: &quot;Cross-Platform, modern and powerful stream downloader for MPD/M3U8/ISM&quot;,    &quot;homepage&quot;: &quot;https://github.com/nilaoda/N_m3u8DL-RE&quot;,    &quot;license&quot;: &quot;MIT&quot;,    &quot;suggest&quot;: &#123;        &quot;ffmpeg&quot;: [            &quot;ffmpeg&quot;,            &quot;ffmpeg-nightly&quot;        ]    &#125;,    &quot;url&quot;: &quot;https://github.com/nilaoda/N_m3u8DL-RE/releases/download/v0.2.0-beta/N_m3u8DL-RE_Beta_win-x64_20230628.zip&quot;,    &quot;hash&quot;: &quot;9e3133f03e112cc57f34bf04234b7857ae7c997c214f0eb510a120739c388652&quot;,    &quot;bin&quot;: [        &quot;N_m3u8DL-RE_Beta_win-x64/N_m3u8DL-RE.exe&quot;,        [            &quot;N_m3u8DL-RE.exe&quot;,            &quot;N_m3u8DL_RE&quot;        ]    ],    &quot;checkver&quot;: &#123;        &quot;url&quot;: &quot;https://api.github.com/repos/nilaoda/N_m3u8DL-RE/releases&quot;,        &quot;regex&quot;: &quot;releases/download/(?&lt;tag&gt;[vV]?[\\\\w-.]+)/N_m3u8DL-RE_Beta_win-x64_(?&lt;date&gt;[\\\\d.-]+).zip&quot;,        &quot;replace&quot;: &quot;$&#123;tag&#125;&quot;    &#125;,    &quot;autoupdate&quot;: &#123;        &quot;url&quot;: &quot;https://github.com/nilaoda/N_m3u8DL-RE/releases/download/$matchTag/N_m3u8DL-RE_Beta_win-x64_$matchDate.zip&quot;    &#125;&#125;\n\n\n参数说明：\n\nurl: 下载地址\n\nhash: 可缺省。 要添加的话： aria2 下载后会有输出，复制过来。 \n\nbin: 可执行文件的相对路径，根目录是 ~\\scoop\\apps\\XXXX\\current\\\n\ncheckver: 可缺省。 \n\nautoupdate: 可缺省。这两项原理也搞不清楚，看其他类似软件的配置文件做相对应修改。\n\n\n","categories":["apps"],"tags":["scoop"]},{"title":"zsh & oh-my-zsh 安装配置","url":"/2023/02/03/wsl/oh-my-zsh/","content":"1 安装 zshsudo apt install zsh# echo $SHELL           # 显示当前 shell 类型# cat /etc/shells       # 显示可使用的 shell# chsh -s /bin/zsh      # 将 zsh 设为默认终端\n2 安装 ohmyzshref: https://ohmyz.sh/\n\n用 wget 安装。\n\nsh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;\n\n\n有时候会出现 443 网路错误，可手动下载、安装 install.sh\nnano zsh-install.sh\n打开 https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh将安装代码全部复制进去\nsudo chmod +x zsh-install.sh./zsh-install.sh\n3 安装 ohmyzsh （gitee 源）ref: https://gitee.com/mirrors/oh-my-zsh.git\nsh -c &quot;$(wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh -O -)&quot;\n\n4 配置 ohmyzsh （gitee 源）\n打开配置文件\n\nnano ~/.zshrc\n\n\n修改如下：\n\n# 主题ZSH_THEME=&quot;ys&quot;# 插件plugins=(git zsh-autosuggestions zsh-syntax-highlighting )\n\n也可以用命令修改：\n\nsed -i &#x27;s/^ZSH_THEME=.*/ZSH_THEME=&quot;ys&quot;/g&#x27; .zshrcsed -i &#x27;s/^plugins=.*/plugins=(git zsh-autosuggestions zsh-syntax-highlighting)/g&#x27; .zshrc\n\n\n\n下载插件\n\ngit clone https://gitee.com/mirrors/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestionsgit clone https://gitee.com/mirrors/zsh-syntax-highlighting $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting\nref: https://github.com/zsh-users/zsh-autosuggestions\nref: https://github.com/zsh-users/zsh-syntax-highlighting\n\n加载配置文件， 使生效\n\nsource ~/.zshrc\n\n&#x3D;&#x3D;&#x3D;\nsudo apt install zsh -ysudo apt install git -ysh -c &quot;$(wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh -O -)&quot;sed -i &#x27;s/^ZSH_THEME=.*/ZSH_THEME=&quot;ys&quot;/g&#x27; .zshrcsed -i &#x27;s/^plugins=.*/plugins=(git zsh-autosuggestions zsh-syntax-highlighting)/g&#x27; .zshrcgit clone https://gitee.com/mirrors/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestionsgit clone https://gitee.com/mirrors/zsh-syntax-highlighting $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlightingsource ~/.zshrc\n\n&#x3D;&#x3D;&#x3D;\n# Clean, simple, compatible and meaningful.# Tested on Linux, Unix and Windows under ANSI colors.# It is recommended to use with a dark background.# Colors: black, red, green, yellow, *blue, magenta, cyan, and white.## Mar 2013 Yad Smood# VCSYS_VCS_PROMPT_PREFIX1=&quot; %&#123;$reset_color%&#125;on%&#123;$fg[blue]%&#125; &quot;YS_VCS_PROMPT_PREFIX2=&quot;:%&#123;$fg[cyan]%&#125;&quot;YS_VCS_PROMPT_SUFFIX=&quot;%&#123;$reset_color%&#125;&quot;YS_VCS_PROMPT_DIRTY=&quot; %&#123;$fg[red]%&#125;x&quot;YS_VCS_PROMPT_CLEAN=&quot; %&#123;$fg[green]%&#125;o&quot;# Git infolocal git_info=&#x27;$(git_prompt_info)&#x27;ZSH_THEME_GIT_PROMPT_PREFIX=&quot;$&#123;YS_VCS_PROMPT_PREFIX1&#125;\\ue0a0&quot;ZSH_THEME_GIT_PROMPT_SUFFIX=&quot;$YS_VCS_PROMPT_SUFFIX&quot;ZSH_THEME_GIT_PROMPT_DIRTY=&quot;$YS_VCS_PROMPT_DIRTY&quot;ZSH_THEME_GIT_PROMPT_CLEAN=&quot;$YS_VCS_PROMPT_CLEAN&quot;# SVN infolocal svn_info=&#x27;$(svn_prompt_info)&#x27;ZSH_THEME_SVN_PROMPT_PREFIX=&quot;$&#123;YS_VCS_PROMPT_PREFIX1&#125;svn$&#123;YS_VCS_PROMPT_PREFIX2&#125;&quot;ZSH_THEME_SVN_PROMPT_SUFFIX=&quot;$YS_VCS_PROMPT_SUFFIX&quot;ZSH_THEME_SVN_PROMPT_DIRTY=&quot;$YS_VCS_PROMPT_DIRTY&quot;ZSH_THEME_SVN_PROMPT_CLEAN=&quot;$YS_VCS_PROMPT_CLEAN&quot;# HG infolocal hg_info=&#x27;$(ys_hg_prompt_info)&#x27;ys_hg_prompt_info() &#123;        # make sure this is a hg dir        if [ -d &#x27;.hg&#x27; ]; then                echo -n &quot;$&#123;YS_VCS_PROMPT_PREFIX1&#125;hg$&#123;YS_VCS_PROMPT_PREFIX2&#125;&quot;                echo -n $(hg branch 2&gt;/dev/null)                if [[ &quot;$(hg config oh-my-zsh.hide-dirty 2&gt;/dev/null)&quot; != &quot;1&quot; ]]; then                        if [ -n &quot;$(hg status 2&gt;/dev/null)&quot; ]; then                                echo -n &quot;$YS_VCS_PROMPT_DIRTY&quot;                        else                                echo -n &quot;$YS_VCS_PROMPT_CLEAN&quot;                        fi                fi                echo -n &quot;$YS_VCS_PROMPT_SUFFIX&quot;        fi&#125;# VirtualenvVIRTUAL_ENV_DISABLE_PROMPT=1local py_versionif  [[ -n &quot;$VIRTUAL_ENV&quot; ]] ; then    py_version=$&#123;(@)$(python -V 2&gt;&amp;1)[2]&#125;filocal venv_info=&#x27;$(virtualenv_prompt_info)&#x27;virtualenv_prompt_info()&#123;    [[ -n $&#123;VIRTUAL_ENV&#125; ]] || return    echo &quot;($&#123;VIRTUAL_ENV:t:gs/%/%%&#125; \\ue235 $&#123;py_version&#125;)&quot;&#125;local exit_code=&quot;%(?,,C:%&#123;$fg[red]%&#125;%?%&#123;$reset_color%&#125;)&quot;# Prompt format:## PRIVILEGES USER @ MACHINE in DIRECTORY on git:BRANCH STATE [TIME] C:LAST_EXIT_CODE# $ COMMAND## For example:## % ys @ ys-mbp in ~/.oh-my-zsh on git:master x [21:47:42] C:0# $PROMPT=&quot;%&#123;$terminfo[bold]$fg[blue]%&#125;#%&#123;$reset_color%&#125; \\%(#,%&#123;$bg[yellow]%&#125;%&#123;$fg[black]%&#125;%n%&#123;$reset_color%&#125;,%&#123;$fg[cyan]%&#125;%n) \\%&#123;$reset_color%&#125;@ \\%&#123;$fg[green]%&#125;%m \\%&#123;$terminfo[bold]$fg[magenta]%&#125;$&#123;venv_info&#125; \\%&#123;$reset_color%&#125;in \\%&#123;$terminfo[bold]$fg[yellow]%&#125;%~%&#123;$reset_color%&#125;\\$&#123;hg_info&#125;\\$&#123;git_info&#125;\\$&#123;svn_info&#125;\\ \\[%*] $exit_code%&#123;$terminfo[bold]$fg[red]%&#125;$ %&#123;$reset_color%&#125;&quot;","categories":["ubuntu"],"tags":["zsh"]},{"title":"用树莓派 pico w 和墨水屏做一个 mnist-clock","url":"/2022/12/23/raspi/raspberry-pico-w-epaper-mnist-clock/","content":"用 raspberry pico w 和墨水屏做一个 mnist-clock1. 墨水屏\n型号：Pico-ePaper-2.9\nhttps://www.waveshare.net/wiki/Pico-ePaper-2.9\n工作电压：3.3V&#x2F;5V\n通信接口：SPI\n分辨率：296 x 128\n显示颜色：黑、白\n局部刷新：0.3s\n全局刷新 ：2s\n\n2. pico w 基本配置2.1 刷固件\nhttps://micropython.org/download/rp2-pico-w/\n\n下载类似rp2-pico-w-20221107-unstable-v1.19.1-616-g5987130af.uf2\n\n首次将 pico w 连接电脑之后，会以U盘形式弹出来，把固件拖进去。\n\n已经刷过固件的，按着板子上的 BOOTTSEL 按钮连接电脑。\n\n\n重新上电，固件就自动刷好了。\n2.2 开发环境 thonny\n安装 thonny, scoop install thonny \nThonny IED： 打开 ‘运行’ - ‘配置解释器’， 配置一下\n运行一下板载的 LED 测试程序：\n\nfrom machine import Pin import timeled = Pin(&#x27;LED&#x27;, Pin.OUT)while(True):    led.on()    time.sleep(1)    led.off()    time.sleep(1)\n可以看到板载的 LED 在闪烁。\n\n\n3. 处理 mnist 数据集，保存成二进制文件\n由于pico可用的内存有限， thonny中显示仅有 800kb 左右可用？\n\n每个数字的mnist字符为 28x28 &#x3D; 784 像素， 原始数据集是 0-255 黑白色阶的。\n\n这里我们节省存储空间，将每个像素压缩成以黑、白图像保存，这样每个像素仅占1个bit\n\n那么784个bit需要 784 &#x2F; 8 &#x3D; 98 个字节，约 0.1kb\n\n也就是每个数字的 mnist 字符的存储空间为 ~ 0.1kb\n\n选择x_train数据集， 选出中 0-9 每个数字的前 500 个\n\n分别转换成一个 *.bin 文件保存，文件名：font_lib_&#123;0-9&#125;.bin \n\n那么每个*.bin 文件为 48kb，全部 mnist font lib 总共占用 480kb\n\n\n#%%import jsonimport numpy as np# 1.load mnist datasetwith np.load(&#x27;../mnist.npz&#x27;) as f:    x_train, y_train = f[&#x27;x_train&#x27;], f[&#x27;y_train&#x27;]    x_test, y_test = f[&#x27;x_test&#x27;], f[&#x27;y_test&#x27;]with open(&#x27;../mnist_index.json&#x27;, &#x27;r&#x27;) as f:    idx_dict = json.load(f)#%%# 2. 将 mnist 打印成字符画def draw_mnist_num(image):    bool_array = np.array(image &gt; 128, dtype=int)    print(bool_array)    char_array = np.where(image &gt; 128, &#x27;@&#x27;, &#x27;-&#x27;)    for row in char_array:        print(&#x27;&#x27;.join(i for i in row))draw_mnist_num(x_train[0])#%%# 3. 将mnist转成2进制字符def convert_2_hex_str(image):    # print(image.shape)    image_bw = image &gt; 128    image_bit = np.packbits(image_bw)    # print(image_bit)    char_2 = image_bit.tobytes()    # print(char_2)    return char_2mm_2 = convert_2_hex_str(x_train[0])print(len(mm_2), mm_2)# %% # 4. 转成字符数组def gen_mnist_font_lib_str(m=1):    font_lib = []    for num in range(10):        font = b&#x27;&#x27;        for idx in idx_dict[str(num)][:m]:            img = x_train[idx]            xxx = convert_2_hex_str(img)            font += xxx        font_lib.append(font)    return font_libmnist_font_lib = gen_mnist_font_lib_str(500)print(len(mnist_font_lib))# 5. 保存for n, font in enumerate(mnist_font_lib):    f = open(f&#x27;font_lib_&#123;n&#125;.bin&#x27;, &#x27;wb&#x27;)    f.write(font)    f.close()\n\n4. 先测试下用 pico w 显示 mnist 字符\n将生成的 *.bin 文件通过 Thonny 全部上传至 pico w。\n\n测试一下能否正常读取并显示。\n\n\n4.1 读取 mnist 字符# 读取字符，返回一个由 &#x27;0&#x27; 或 &#x27;1&#x27; 组成的字符串，字符串长度为784。def get_mnist_font(num):        SIZE = 98    NUM = 500            f = open(&#x27;font_lib_&#123;&#125;.bin&#x27;.format(num), &#x27;rb&#x27;)    f.seek(random.randrange(0, NUM) * SIZE)    mf_bin = f.read(SIZE)    f.close()         # string: 784 * &#x27;0&#x27; or &#x27;1&#x27;    mf_str = &#x27;&#x27;.join([&#x27;&#123;:08b&#125;&#x27;.format(mf_bin[i]) for i in range(SIZE)])    # mf_x28 = [[mf_str[i*28+j] for j in range(28)] for i in range(28)]     return mf_str\n\n4.2 绘制字符 28x28 像素# 字符串长度为784，按照 28x28 逐个绘制像素 def MNIST(draw, mf, i):        c0 = [2, 72, 154, 224]    r0 = [20, 20, 20, 20]    mf_x28 = [[mf_str[i*28+j] for j in range(28)] for i in range(28)]    for r in range(28):        for c in range(28):            color = 0x00 if mf[r*28+c]==&#x27;1&#x27; else 0xff            draw.pixel(c + c0[i], r + r0[i], color)\n\n4.3 绘制字符，缩放为 nR x nC 像素# 字符串长度为784，按照 nR x nC 逐个绘制像素 def MNIST(draw, mf, i):        c0 = [2, 72, 154, 224]    r0 = [20, 20, 20, 20]    nR = 100    nC = 70    # resize: 28x28 -&gt; nRxnC    # mf_x28 = [[mf_str[i*28+j] for j in range(28)] for i in range(28)]    # mf_rsz = [[int(mf_x28[int(28*r/nR)][int(28*c/nC)]) for c in range(nC)] for r in range(nR)]    for r in range(nR):        for c in range(nC):            color = mf[ int(28*r/nR) * 28 + int(28*c/nC) ]            color = 0x00 if color == &#x27;1&#x27; else 0xff            draw.pixel(c + c0[i], r + r0[i], color)\n\n4.4 完整代码import randomimport timeimport Pico_ePaper29 as epd29import gcgc.collect()print(&quot;mem: &quot;, gc.mem_free())# === 1. load mnist font libdef get_mnist_font(num):    SIZE = 98    NUM = 100            f = open(&#x27;font_lib_&#123;&#125;.bin&#x27;.format(num), &#x27;rb&#x27;)    f.seek(random.randrange(0, NUM) * SIZE)    mf_bin = f.read(SIZE)    f.close()         # string: 784 * &#x27;0&#x27; or &#x27;1&#x27;    mf_str = &#x27;&#x27;.join([&#x27;&#123;:08b&#125;&#x27;.format(mf_bin[i]) for i in range(SIZE)])    # mf_x28 = [[mf_str[i*28+j] for j in range(28)] for i in range(28)]     return mf_str# === 2. epaper29: 296x128;     0xff:white;  0x00:black;   epd = epd29.EPD_2in9_Landscape()       def MNIST(draw, mf, i):        c0 = [2, 72, 154, 224]    r0 = [20, 20, 20, 20]    nR = 100    nC = 70    # mf_x28 = [[mf_str[i*28+j] for j in range(28)] for i in range(28)]    # for r in range(28):    #     for c in range(28):    #         color = 0x00 if mf[r*28+c]==&#x27;1&#x27; else 0xff    #         draw.pixel(c + c0[i], r + r0[i], color)        # resize: 28x28 -&gt; nRxnC    # mf_rsz = [[int(mf_x28[int(28*r/nR)][int(28*c/nC)]) for c in range(nC)] for r in range(nR)]    for r in range(nR):        for c in range(nC):            color = mf[ int(28*r/nR) * 28 + int(28*c/nC) ]            color = 0x00 if color == &#x27;1&#x27; else 0xff            draw.pixel(c + c0[i], r + r0[i], color)    gc.collect()    print(i, &quot;mem: &quot;, gc.mem_free())    # --------------------------------------------print(&#x27;full update&#x27;)epd.Clear(0xff)        epd.delay_ms(100)epd.fill(0xff)epd.delay_ms(100)epd.display(epd.buffer)epd.display_Partial(epd.buffer)last_time = [-1, -1, -1, -1]now_time = [1, 2, 3, 4]        for i in range(4):    if last_time[i] != now_time[i]:        mnist = get_mnist_font(now_time[i])        MNIST(epd, mnist, i)        print(&#x27;partial update&#x27;, now_time)        epd.display_Partial(epd.buffer)        epd.delay_ms(1000)gc.collect()print(&quot;mem: &quot;, gc.mem_free())\n\n5. 在墨水屏显示时间import networkimport randomimport timeimport ntptimeimport Pico_ePaper29 as epd29# === 0. wifi config ==========================ssid = &#x27;aaa&#x27;pswd = &#x27;xxx&#x27;wlan = network.WLAN(network.STA_IF)wlan.active(True)wlan.connect(ssid, pswd)status = wlan.ifconfig()print(&#x27;wifi=&#123;&#125;  ip=&#123;&#125;&#x27;.format(ssid, status[0]))print(time.localtime())try:    # https://www.pool.ntp.org/zone/cn    ntptime.host = &#x27;cn.pool.ntp.org&#x27;    ntptime.settime()except Exception as e:    print(&#x27;NTPTIME ERROR&#x27;, e, ntptime.host)# === 1. load mnist font lib ==================def get_mnist_font(num):        SIZE = 98    NUM = 100            f = open(&#x27;font_lib_&#123;&#125;.bin&#x27;.format(num), &#x27;rb&#x27;)    f.seek(random.randrange(0, NUM) * SIZE)    mf_bin = f.read(SIZE)    f.close()         # string: 784 * &#x27;0&#x27; or &#x27;1&#x27;    mf_str = &#x27;&#x27;.join([&#x27;&#123;:08b&#125;&#x27;.format(mf_bin[i]) for i in range(SIZE)])    # mf_x28 = [[mf_str[i*28+j] for j in range(28)] for i in range(28)]     return mf_str# === 2. epaper29: 296x128;     0xff:white;  0x00:black;   epd = epd29.EPD_2in9_Landscape()def YMD(draw, ymd, wid):    draw.fill(0xff)        draw.fill_rect(5, 5, 95, 8, 0xff)    draw.text(wid, 5, 5, 0x00)        draw.fill_rect(100, 5, 120, 8, 0xff)    draw.text(ymd, 100, 5, 0x00)        def HMS(draw, txt):    draw.fill_rect(240, 5, 50, 8, 0xff)    draw.text(txt, 240, 5, 0x00)def DOT(draw):    draw.fill_rect(144, 60, 7, 7, 0x00)    draw.fill_rect(144, 80, 7, 7, 0x00)def MNIST(draw, mf, i):        c0 = [2, 72, 154, 224]    r0 = [20, 20, 20, 20]    nR = 100    nC = 70    # mf_x28 = [[mf_str[i*28+j] for j in range(28)] for i in range(28)]    # for r in range(28):    #     for c in range(28):    #         color = 0x00 if mf[r*28+c]==&#x27;1&#x27; else 0xff    #         draw.pixel(c + c0[i], r + r0[i], color)        # resize: 28x28 -&gt; nRxnC    # mf_rsz = [[int(mf_x28[int(28*r/nR)][int(28*c/nC)]) for c in range(nC)] for r in range(nR)]    for r in range(nR):        for c in range(nC):            color = mf[ int(28*r/nR) * 28 + int(28*c/nC) ]            color = 0x00 if color == &#x27;1&#x27; else 0xff            draw.pixel(c + c0[i], r + r0[i], color)            def MNIST_clear(draw):    draw.fill_rect(0, 20, 296, 100, 0xff)    draw.fill_rect(240, 5, 50, 8, 0xff)    # === 3. run ==================================last_time = [-1, -1, -1, -1]while (True):    # 2.1 get time.now    wifi_id = ssid if wlan.status()==3 else &#x27;no wifi&#x27;    now = time.localtime(time.time() + 8*3600)        year, mon, day = now[0], now[1], now[2]    hour, mnt, sec = now[3], now[4], now[5]    week = [&#x27;Mon&#x27;, &#x27;Tue&#x27;, &#x27;Wed&#x27;, &#x27;Thu&#x27;, &#x27;Fri&#x27;, &#x27;Sat&#x27;, &#x27;Sun&#x27;]    weekday = week[now[6]]    now_time = [hour//10, hour%10, mnt//10, mnt%10]        print(now, wifi_id, last_time, now_time)            # 2.2 full update    if -1 in last_time or (mnt%10==0 and sec&lt;5):        print(&#x27;full update&#x27;)        epd.Clear(0xff)                epd.delay_ms(100)                YMD(epd, &#x27;&#123;:04d&#125;-&#123;:02d&#125;-&#123;:02d&#125; &#123;&#125;&#x27;.format(year, mon, day, weekday), wifi_id)        epd.display(epd.buffer)        epd.delay_ms(100)                MNIST_clear(epd)        epd.display_Partial(epd.buffer)        epd.delay_ms(100)                last_time = [-1, -1, -1, -1]            # 2.3 partial update    for i in range(4):        if last_time[i] != now_time[i]:            print(&#x27;partial update&#x27;, last_time, now_time)            last_time[i] = now_time[i]                        mnist = get_mnist_font(now_time[i])            HMS(epd, &#x27;&#123;:02d&#125;:&#123;:02d&#125;&#x27;.format(hour, mnt))            MNIST(epd, mnist, i)                        epd.display_Partial(epd.buffer)            epd.delay_ms(100)                        if i == 1:                DOT(epd)                epd.display_Partial(epd.buffer)                epd.delay_ms(100)                     time.sleep(5)\n\n\n仓库： https://github.com/shenbo/mnist-clock\n","categories":["raspi"],"tags":["raspberry-pi","mnist-clock"]},{"title":"runcat-pyqt5-win：在windows任务栏养猫（3）","url":"/2022/11/28/python-app/runcat-for-win-%E5%9C%A8windows%E4%BB%BB%E5%8A%A1%E6%A0%8F%E5%85%BB%E7%8C%AB%20V3/","content":"runcat-pystray-win V3之前撸了一个 runcat-pyqt5-win，可以在windows任务栏养猫，用奔跑的猫来显示当前系统资源（CPU）的占用情况。\n\ngithub仓库： https://github.com/shenbo/runcat-pyqt5-win\n原mac应用： http://kyomesuke.com/runcat/index.html\n\n原来的基于 ptqt5 库比较大； 这次采用 pystray 轻量实现：\nRequirements\npsutil\npystray\n\n\n\n\n完整代码import threadingimport timefrom psutil import cpu_percent, virtual_memoryfrom pystray import Icon, Menu, MenuItem# PIL dependency simplification# ref: https://github.com/moses-palmer/pystray/issues/26class ICOImage:    def __init__(self, path: str):        with open(path, &#x27;rb&#x27;) as file:            self._data = file.read()    def save(self, file, format):        file.write(self._data)# get cpu usagedef thread_get_usage():    global cpu_usage, mem_usage    while True:        if thread_flag: break        cpu_usage = cpu_percent(interval=1) / 100        mem_usage = virtual_memory().percent / 100        time.sleep(0.5)def changeMonitor(new_monitor):    global monitor    print(monitor, new_monitor)    if new_monitor != monitor:        monitor = new_monitordef on_quit():    global thread_flag    thread_flag = 1    runcat.stop()# 初始化monitor = &#x27;CPU&#x27;cpu_usage = 0.2  # 初始化mem_usage = 0.2  # 初始化cats = [ICOImage(f&#x27;icons/runcat/&#123;i&#125;.ico&#x27;) for i in range(5)]menu = (MenuItem(text=&#x27;CPU&#x27;, action=lambda: changeMonitor(&#x27;cpu&#x27;)),        MenuItem(text=&#x27;MEM&#x27;, action=lambda: changeMonitor(&#x27;mem&#x27;)),        MenuItem(text=&#x27;QUIT&#x27;, action=on_quit))runcat = Icon(&#x27;run cat&#x27;, icon=cats[0], title=&#x27;run cat&#x27;,  menu=menu)# 创建两个 threading：一个获取使用率，一个更新图标thread_flag = 0threading.Thread(target=runcat.run).start()threading.Thread(target=thread_get_usage).start()while True:    if thread_flag: break    for icon in cats:        runcat.icon = icon        mon = mem_usage if monitor == &#x27;mem&#x27; else cpu_usage        t = 0.2 - mon * 0.15                print(f&#x27;&#123;mon=:.2%&#125;, &#123;t=:.2f&#125;s, &#123;cpu_usage=:.2%&#125;, &#123;mem_usage=:.2%&#125;&#x27;)        tip = f&#x27;cpu: &#123;cpu_usage:.2%&#125; \\nmem: &#123;mem_usage:.2%&#125;&#x27;        runcat.title = tip        time.sleep(t)# pyinstaller -w -i favicon.ico runcat-v0.6-pystray.py --add-data &quot;icons;icons&quot;\n","categories":["python"],"tags":["python","pyqt5"]},{"title":"使用leancloud存储运行日志","url":"/2022/10/13/python-app/%E4%BD%BF%E7%94%A8leancloud%E5%AD%98%E5%82%A8%E8%BF%90%E8%A1%8C%E6%97%A5%E5%BF%97/","content":"\n申请 leancloud 应用。\n\n\nref: https://console.leancloud.cn/apps\n\n\n安装 pip install leancloud\n\nimport leancloudleancloud.init(&quot;xxx&quot;, &quot;yyy&quot;)TestObject = leancloud.Object.extend(&#x27;my_log&#x27;)test_object = TestObject()test_object.set(&#x27;col1&#x27;, &#x27;a&#x27;)test_object.set(&#x27;col2&#x27;, &#x27;b&#x27;)test_object.set(&#x27;col3&#x27;, &#x27;c&#x27;)test_object.save()\n","categories":["python"],"tags":["leancloud"]},{"title":"群晖安装aria2","url":"/2022/07/13/synology/%E7%BE%A4%E6%99%96%E5%AE%89%E8%A3%85aria2/","content":"群晖型：   DS218+，CPU:     Intel Celeron J3355DSM版本:  7.0\n1. 安装 bootstrapwget http://ipkg.nslu2-linux.org/feeds/optware/syno-i686/cross/unstable/syno-i686-bootstrap_1.2-7_i686.xshchmod +x syno-i686-bootstrap_1.2-7_i686.xshsudo sh syno-i686-bootstrap_1.2-7_i686.xshreboot\n\n\n2. 安装 aria2ipkg updateipkg install aria2\n\n\n\nref: https://www.kejiwanjia.com/circle/10888.htmlref: http://homtang.com/ds216j-install-aria2/\n\n","categories":["synology"],"tags":["synology","aria2"]},{"title":"access-python调用odbc数据库","url":"/2022/07/04/office/access-python%E8%B0%83%E7%94%A8odbc%E6%95%B0%E6%8D%AE%E5%BA%93/","content":"1. 安装 Access (以access 2016 为例)\n安装 Access 2016: 略 \n安装 Microsoft Access Database Engine\n\nhttps://www.microsoft.com/zh-CN/download/details.aspx?id=54920\naccessdatabaseengine_X64.exe    2020&#x2F;8&#x2F;11  File Size: 79.5 MB\n\n\n\n\n2. 安装 pyodbcpip install pyodbc\n\n3. 新建数据库并进行操作\n\nimport pyodbc# 数据库路径accdb_dir = &#x27;C:/Users/xxx/Documents/Database1.accdb&#x27;# 1.1 创建数据表create_table_sql = &#x27;&#x27;&#x27;\\  create table suanfa  (    id      autoincrement primary key,    value1  varchar(255),    value2  varchar(255),      result  varchar(255)  )&#x27;&#x27;&#x27;# 2.2 查询、插入、更新select_sql = &#x27;select * from suanfa where id&gt;0&#x27;insert_sql = &#x27;insert into suanfa(value1, value2, result) values (?, ?, ?)&#x27;update_sql = &#x27;update suanfa(result,) values (?,)&#x27;# 2 连接数据库connection = pyodbc.connect(rf&#x27;Driver=&#123;&#123;Microsoft Access Driver (*.mdb, *.accdb)&#125;&#125;;DBQ=&#123;accdb_dir&#125;;&#x27;)connection.autocommit = True# 2.1 创建数据表，插入数据with connection.cursor() as cursor:    cursor.execute(create_table_sql)with connection.cursor() as cursor:    for i in range(10):        cursor.execute(insert_sql, i, i, i+1)# 2.2. 读取、更新数据with connection.cursor() as cursor:    cursor.execute(select_sql)    values = cursor.fetchall()    print(values)        aa, bb = values[0], values[1]    rst = aa * bb  # 改成我们的算法:  rst = f(a， b)    cursor.execute(update_table_sql, rst)    for row in cursor.execute(select_sql):        print(row)\n","categories":["office"],"tags":["access"]},{"title":"日历文件：将csv文件转换为ics","url":"/2022/07/01/office/%E6%97%A5%E5%8E%86%E6%96%87%E4%BB%B6%EF%BC%9A%E5%B0%86csv%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAics/","content":"日历文件：将csv文件转换为ics# pip install icalendar# %%import pandas as pddf = pd.read_csv(&#x27;1.csv&#x27;,                  encoding=&#x27;gbk&#x27;,                header=0,                 parse_dates=[0,1],                 date_parser=lambda x: pd.to_datetime(x, format=&#x27;%Y/%m/%d %H:%M&#x27;))print(df)# %%from icalendar import Calendar, Eventcal = Calendar()cal.add(&#x27;version&#x27;, &#x27;2.0&#x27;)for row in df.itertuples(index=False):    stime, etime, thing = row[0], row[1], row[2]    # print(row[0], row[1], row[2])    event = Event()    event.add(&#x27;summary&#x27;, thing)    event.add(&#x27;dtstart&#x27;, stime)    event.add(&#x27;dtend&#x27;, etime)    # print(event)    cal.add_component(event)    txt = cal.to_ical()    print(str(txt, encoding=&#x27;utf8&#x27;))# %%with open(&#x27;1.ics&#x27;, &#x27;wb&#x27;) as f:    f.write(txt)\n","categories":["office"],"tags":["calendar"]},{"title":"文件替换：保留原始路径","url":"/2022/06/28/office/%E6%96%87%E4%BB%B6%E6%9B%BF%E6%8D%A2%EF%BC%9A%E4%BF%9D%E7%95%99%E5%8E%9F%E5%A7%8B%E8%B7%AF%E5%BE%84/","content":"文件替换：保留原始路径问题描述：将特定类型文件的文件挑出来，放入一个文件夹，批量处理之后再替换原文件。\n1. 文件迁移\n将文件路径经过md5加密后，作为文件名前缀。\n复制文件到一个新文件夹\n\n# xyz_a.py# %%import osimport shutilfrom hashlib import md5# 创建 md5 对象def encrypt_md5(s):    new_md5 = md5()    new_md5.update(s.encode(encoding=&#x27;utf-8&#x27;))    return new_md5.hexdigest()# old_root = os.getcwd()    # 待处理文件的根目录old_root = &quot;E:\\\\&quot;new_root = &quot;D:\\\\0\\\\&quot;exts = [&#x27;.xyz&#x27;]for parent, dirnames, filenames in os.walk(old_root):    for filename in filenames:        extension = os.path.splitext(filename)[1]                if extension.lower() in ext:            old_dir = os.path.join(parent, filename)            new_name = encrypt_md5(old_dir) + &#x27;_&#x27; + filename   # 修改文件名            new_dir = os.path.join(new_root, new_name)                        print(f&#x27;&#123;old_dir&#125;;; &#123;new_name&#125;;; &#123;new_dir&#125;&#x27;)                        # shutil.copyfile(old_dir, new_dir)    # 复制到新文件夹\n\n\n用命令行运行：\n\npython xyz_a.py &gt; zzz.csv\n\n\n\n\n2. 文件处理略\n3. 替换原始文件# xyz_b.py# %%import osimport pandas as pdimport shutil# ------df = pd.read_csv(&#x27;zzz.csv&#x27;, encoding=&#x27;utf16&#x27;, sep=&#x27;;;&#x27;, )df.columns = [&#x27;old_dir&#x27;, &#x27;new_name&#x27;, &#x27;new_dir&#x27;]df[&#x27;new_name&#x27;] = df[&#x27;new_name&#x27;].str.strip()print(df.head())# ------new_root = &quot;D:\\\\0\\\\&quot;for parent, dirnames, filenames in os.walk(new_root):    for filename in filenames:        # print(filename)        new_dir = os.path.join(parent, filename)        rst = df[df[&#x27;new_name&#x27;] == filename]                try:            old_dir = rst[&#x27;old_dir&#x27;].values[0]            print(new_dir, &#x27;-&gt;&#x27;, old_dir)            # f1, f2 = os.path.split(old_dir)[0], os.path.split(old_dir)[1]            # print(f1, f2)                        # shutil.copyfile(new_dir, old_dir)                except Exception as result:            print(result)\n","categories":["office"],"tags":["file"]},{"title":"使用 winget 安装管理 windows 软件 - Win10 LTSC","url":"/2022/06/23/scoop/%E4%BD%BF%E7%94%A8winget%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86windows%E8%BD%AF%E4%BB%B6-Win10-LTSC/","content":"0 Winget官网\nWinget官网: https://github.com/microsoft/winget-cli \n\n1. 安装 winget （Win10 LTSC）目前官方只支持 windows store 安装，但 LTSC 并没有应用商店。\n版本\tWindows 10 企业版 LTSC版本号 \t21H2操作系统内部版本\t19044.1766体验\tWindows Feature Experience Pack 120.2212.4170.0\n\nWin10 手动安装 winget 方法如下：\n\n参考安装方法: https://github.com/muradbuyukasik/winget-script   \n\n1.1 安装 VC++ v14 依赖\n下载页面： https://docs.microsoft.com/en-gb/troubleshoot/developer/visualstudio/cpp/libraries/c-runtime-packages-desktop-bridge#how-to-install-and-update-desktop-framework-packages\n\n下载、安装 appx：\n\n\ncd ~aria2c -c -s 5 -x 5 https://aka.ms/Microsoft.VCLibs.x64.14.00.Desktop.appx  # 注意版本号Add-AppxPackage Microsoft.VCLibs.x64.14.00.Desktop.appx\n\n1.2 安装 Microsoft.UI.Xaml 依赖\n下载页面： https://www.nuget.org/packages/Microsoft.UI.Xaml/\n\n下载、解压、安装 appx：\n\n\ncd ~aria2c -c -s 5 -x 5 https://www.nuget.org/api/v2/package/Microsoft.UI.Xaml/2.7.1  # 注意版本号# 下载的文件： microsoft.ui.xaml.2.7.1.nupkg，解压7z x microsoft.ui.xaml.2.7.1.nupkg -o*cd microsoft.ui.xaml.2.7.1\\tools\\AppX\\x64\\ReleaseAdd-AppxPackage microsoft.ui.xaml.2.7.appx\n\n1.3 安装 winget\n下载页面：https://github.com/microsoft/winget-cli/releases\n下载、安装 msixbundle\n\ncd ~aria2c -c -s 5 -x 5 https://github.com/microsoft/winget-cli/releases/download/v1.2.10271/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle  # 注意版本号# aria2c -c -s 5 -x 5 https://ghproxy.net/https://github.com/microsoft/winget-cli/releases/download/v1.2.10271/Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle Add-AppPackage .\\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle.\\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe.msixbundle\n\n\n\n\n2. 安装常用软件# 安装 windows store appswinget search &quot;Mail and Calendar&quot;winget install 9WZDNCRFHVQMwinget search &quot;Microsoft Photos&quot;winget install 9WZDNCRFJBH4# 安装常用软件winget install Microsoft.Edgewinget install Microsoft.Teamswinget install Tencent.QQwinget install Tencent.WeChatwinget install Tencent.TencentMeetingwinget install NetEase.MailMasterwinget install TortoiseGit","categories":["apps"],"tags":["winget"]},{"title":"powershell配置(6)-ohmyposh3-v2","url":"/2022/06/08/powershell/powershell%E9%85%8D%E7%BD%AE6-ohmyposh3-v2/","content":"1.安装以scoop安装oh-my-posh。\n#scoop install psreadlinescoop install posh-git#scoop install oh-my-posh\n\n2. 配置文件新建、修改配置文件，运行:\nif (!(Test-Path -Path $PROFILE )) &#123; New-Item -Type File -Path $PROFILE -Force &#125;code $PROFILE\n\n加入以下内容：\nchcp 65001Set-PSReadLineOption -PredictionSource Historyoh-my-posh init pwsh --config ~\\scoop\\persist\\oh-my-posh\\themes\\yo.omp.yaml | Invoke-Expression\n\n\nref: https://ohmyposh.dev/docs/\n\n\n\n3. 自定义ys主题\n打开主题文件，路径： ~\\scoop\\persist\\oh-my-posh\\themes\\yo.omp.yaml\n\n# https://shenbo.github.io/tags/powershell/# yaml-language-server: $schema=https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.jsonconsole_title_template: &quot;&#123;&#123;.User&#125;&#125; :: &#123;&#123;.Folder&#125;&#125; :: &#123;&#123;.Shell&#125;&#125;&quot;blocks:- type: prompt  alignment: left  segments:  - style: plain    template: &quot;&#123;&#123; if .Root &#125;&#125;% &#123;&#123; else &#125;&#125;&lt;blue&gt;# &lt;/&gt;&#123;&#123;end&#125;&#125;&quot;    foreground: red    type: text  - style: plain    template: &quot;&#123;&#123; .UserName &#125;&#125;&lt;white&gt; @ &lt;/&gt;&lt;green&gt;&#123;&#123; .HostName &#125;&#125;&lt;/&gt;&quot;    foreground: cyan    type: session  - style: plain    template: &quot;&#123;&#123; if .Error &#125;&#125;&#123;&#123; .Error &#125;&#125;&#123;&#123; else &#125;&#125; (&#123;&#123; if .Venv &#125;&#125;&#123;&#123; .Venv &#125;&#125; &#123;&#123; end &#125;&#125;\\ue235&#123;&#123; .Full &#125;&#125;&#123;&#123; end &#125;&#125;)&quot;    foreground: magenta    type: python  - properties:      style: short    style: plain    template: &quot;&lt;white&gt; in &lt;/&gt;&#123;&#123; .Path &#125;&#125; &quot;    foreground: lightYellow    type: path  - properties:      fetch_status: true    style: plain    template: &quot; &#123;&#123; .HEAD &#125;&#125; &#123;&#123; .BranchStatus &#125;&#125;&#123;&#123; if .Working.Changed &#125;&#125; \\uf044 &#123;&#123; .Working.String &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; if and (.Staging.Changed) (.Working.Changed) &#125;&#125; |&#123;&#123; end &#125;&#125;&#123;&#123; if .Staging.Changed &#125;&#125; \\uf046 &#123;&#123; .Staging.String &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; if gt .StashCount 0&#125;&#125; \\uf692 &#123;&#123; .StashCount &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; if gt .WorktreeCount 0&#125;&#125; \\uf1bb &#123;&#123; .WorktreeCount &#125;&#125;&#123;&#123; end &#125;&#125; &quot;    foreground: cyan    type: git  - properties:      time_format: &quot;15:04:05&quot;    style: plain    template: &quot;[&#123;&#123; .CurrentDate | date .Format &#125;&#125;]&quot;    foreground: white    type: time  - style: plain    template: &quot; C: &#123;&#123; .Code &#125;&#125;&quot;    foreground: red    type: exit- type: prompt  alignment: left  segments:  - style: plain    template: $    foreground: red    type: text  newline: truefinal_space: trueversion: 3\n\n4. 自定义ys主题 （oh-my-zsh）modified ys.zsh-theme for oh-my-zsh \n# Clean, simple, compatible and meaningful.# Tested on Linux, Unix and Windows under ANSI colors.# It is recommended to use with a dark background.# Colors: black, red, green, yellow, *blue, magenta, cyan, and white.## Mar 2013 Yad Smood# VCSYS_VCS_PROMPT_PREFIX1=&quot; %&#123;$reset_color%&#125;on%&#123;$fg[blue]%&#125; &quot;YS_VCS_PROMPT_PREFIX2=&quot;:%&#123;$fg[cyan]%&#125;&quot;YS_VCS_PROMPT_SUFFIX=&quot;%&#123;$reset_color%&#125;&quot;YS_VCS_PROMPT_DIRTY=&quot; %&#123;$fg[red]%&#125;x&quot;YS_VCS_PROMPT_CLEAN=&quot; %&#123;$fg[green]%&#125;o&quot;# Git infolocal git_info=&#x27;$(git_prompt_info)&#x27;ZSH_THEME_GIT_PROMPT_PREFIX=&quot;$&#123;YS_VCS_PROMPT_PREFIX1&#125;\\ue0a0&quot;ZSH_THEME_GIT_PROMPT_SUFFIX=&quot;$YS_VCS_PROMPT_SUFFIX&quot;ZSH_THEME_GIT_PROMPT_DIRTY=&quot;$YS_VCS_PROMPT_DIRTY&quot;ZSH_THEME_GIT_PROMPT_CLEAN=&quot;$YS_VCS_PROMPT_CLEAN&quot;# SVN infolocal svn_info=&#x27;$(svn_prompt_info)&#x27;ZSH_THEME_SVN_PROMPT_PREFIX=&quot;$&#123;YS_VCS_PROMPT_PREFIX1&#125;svn$&#123;YS_VCS_PROMPT_PREFIX2&#125;&quot;ZSH_THEME_SVN_PROMPT_SUFFIX=&quot;$YS_VCS_PROMPT_SUFFIX&quot;ZSH_THEME_SVN_PROMPT_DIRTY=&quot;$YS_VCS_PROMPT_DIRTY&quot;ZSH_THEME_SVN_PROMPT_CLEAN=&quot;$YS_VCS_PROMPT_CLEAN&quot;# HG infolocal hg_info=&#x27;$(ys_hg_prompt_info)&#x27;ys_hg_prompt_info() &#123;\t# make sure this is a hg dir\tif [ -d &#x27;.hg&#x27; ]; then\t\techo -n &quot;$&#123;YS_VCS_PROMPT_PREFIX1&#125;hg$&#123;YS_VCS_PROMPT_PREFIX2&#125;&quot;\t\techo -n $(hg branch 2&gt;/dev/null)\t\tif [[ &quot;$(hg config oh-my-zsh.hide-dirty 2&gt;/dev/null)&quot; != &quot;1&quot; ]]; then\t\t\tif [ -n &quot;$(hg status 2&gt;/dev/null)&quot; ]; then\t\t\t\techo -n &quot;$YS_VCS_PROMPT_DIRTY&quot;\t\t\telse\t\t\t\techo -n &quot;$YS_VCS_PROMPT_CLEAN&quot;\t\t\tfi\t\tfi\t\techo -n &quot;$YS_VCS_PROMPT_SUFFIX&quot;\tfi&#125;# VirtualenvVIRTUAL_ENV_DISABLE_PROMPT=1local py_versionif  [[ -n &quot;$VIRTUAL_ENV&quot; ]] ; then    py_version=$&#123;(@)$(python -V 2&gt;&amp;1)[2]&#125;filocal venv_info=&#x27;$(virtualenv_prompt_info)&#x27;virtualenv_prompt_info()&#123;    [[ -n $&#123;VIRTUAL_ENV&#125; ]] || return    echo &quot;($&#123;VIRTUAL_ENV:t:gs/%/%%&#125; \\ue235 $&#123;py_version&#125;)&quot;&#125;local exit_code=&quot;%(?,,C:%&#123;$fg[red]%&#125;%?%&#123;$reset_color%&#125;)&quot;# Prompt format:## PRIVILEGES USER @ MACHINE in DIRECTORY on git:BRANCH STATE [TIME] C:LAST_EXIT_CODE# $ COMMAND## For example:## % ys @ ys-mbp in ~/.oh-my-zsh on git:master x [21:47:42] C:0# $PROMPT=&quot;%&#123;$terminfo[bold]$fg[blue]%&#125;#%&#123;$reset_color%&#125; \\%(#,%&#123;$bg[yellow]%&#125;%&#123;$fg[black]%&#125;%n%&#123;$reset_color%&#125;,%&#123;$fg[cyan]%&#125;%n) \\%&#123;$reset_color%&#125;@ \\%&#123;$fg[green]%&#125;%m \\%&#123;$terminfo[bold]$fg[magenta]%&#125;$&#123;venv_info&#125; \\%&#123;$reset_color%&#125;in \\%&#123;$terminfo[bold]$fg[yellow]%&#125;%~%&#123;$reset_color%&#125;\\$&#123;hg_info&#125;\\$&#123;git_info&#125;\\$&#123;svn_info&#125;\\ \\[%*] $exit_code%&#123;$terminfo[bold]$fg[red]%&#125;$ %&#123;$reset_color%&#125;&quot;\n\n\n# 查看 unicode 字符[char] 0xf044[char] 0xf046[char] 0xf692[char] 0xf1bb\n","categories":["powershell"],"tags":["powershell"]},{"title":"Git Bash 安装 zsh 和 on-my-zsh","url":"/2022/05/23/apps/git-bash%E5%AE%89%E8%A3%85zsh%E5%92%8Cohmyzsh/","content":"\nref: (https://dominikrys.com/posts/zsh-in-git-bash-on-windows/)\n\n1. 安装 zsh\nhttps://packages.msys2.org/package/zsh?repo=msys&amp;variant=x86_64\n\n\n1.1 从 MSYS2 下载 zsh package\n\naria2c -c -s 8 -x 8 https://mirror.msys2.org/msys/x86_64/zsh-5.8-5-x86_64.pkg.tar.zst\n\n1.2 解压压缩文件的格式是ZST, 需要安装一个支持的解压软件\n\nscoop install zstdzstd -d zsh-5.8-5-x86_64.pkg.tar.zst\n将 \\etc、\\usr 文件夹解压到本机 git 的安装目录：\n\n1.3 运行\n\nzshautoload -U zsh-newuser-installzsh-newuser-install -f\n\n设置 zsh 自启动, 在~/.bashrc加入：\n\nif [ -t 1 ]; then  exec zshfi\n\n\n\n2. 安装 oh-my-zsh\n下载安装\n\n$ sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;# gitee 镜像$ sh -c &quot;$(wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh -O -)&quot;\n\n\n简单配置一下，打开配置文件 nano ~/.zshrc\n\n# 主题ZSH_THEME=&quot;ys&quot;# 插件plugins=(git zsh-syntax-highlighting zsh-autosuggestions)\n\n下载插件\n\ngit clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-syntax-highlighting $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting\n\n加载配置文件， source ~/.zshrc\n\n","categories":["apps"],"tags":["git"]},{"title":"XPS9370 更换屏幕","url":"/2022/04/30/xps/XPS9370-%E6%9B%B4%E6%8D%A2%E5%B1%8F%E5%B9%95/","content":"书包没拿好掉地上， XPS13 9370 屏幕左上角磕到了，开机花屏。\n想罢工是不可能的。\n换新屏，连壳一起换了。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":["xps"],"tags":["xps"]},{"title":"Win 11 右键菜单设置","url":"/2022/03/14/apps/Win11-config/","content":"右键菜单# 管理员运行运行后重启：reg.exe add &quot;HKCU\\Software\\Classes\\CLSID\\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\\InprocServer32&quot; /f /ve # 恢复默认：# reg.exe delete &quot;HKCU\\Software\\Classes\\CLSID\\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;&quot; /f ","categories":["apps"],"tags":["win11"]},{"title":"PDF文档合并-报销单批量粘贴电子发票","url":"/2022/02/22/office/PDF%E6%96%87%E6%A1%A3%E5%90%88%E5%B9%B6-%E6%8A%A5%E9%94%80%E5%8D%95%E6%89%B9%E9%87%8F%E7%B2%98%E8%B4%B4%E7%94%B5%E5%AD%90%E5%8F%91%E7%A5%A8/","content":"\npymupdf \npip install pymupdf\nhttps://pymupdf.readthedocs.io/en/latest/index.html\n\n\n\n用 pymupdf 将电子发票转成图片，再插入报销单中# %%import osimport fitzfrom pprint import pprintfapiao_dir = &#x27;src/&#x27;zhantiedan = &#x27;zhantiedan_blank.pdf&#x27;ztd_pdf = fitz.open(zhantiedan)new_name = &#x27;fapiao_dayin.pdf&#x27;new_pdf = fitz.open()def fapiao_zhantie(fapiao=&#x27;&#x27;):        print(f&#x27;\\n=== fapiao pdf file:\\n    &#123;fapiao&#125;&#x27;)    src_pdf = fitz.open(fapiao)    for p, page in enumerate(src_pdf):        pixmap = page.get_pixmap(dpi=300)        pixmap.save(f&#x27;&#123;fapiao&#125;_&#123;str(p)&#125;.png&#x27;)                new_pdf.insert_pdf(ztd_pdf)        end_page = new_pdf[-1]        end_page.insert_image((100, 100, 700, 500), pixmap=pixmap)    src_pdf.close()    new_pdf.save(new_name)    print(f&#x27;    &#123;fapiao&#125; :\\n*** Done! ***\\n&#x27;)for dir, folders, files in os.walk(fapiao_dir):    for file in files:        path = os.path.join(dir, file)        print(path)        if path[-4:] == &#x27;.pdf&#x27;:            fapiao_zhantie(path)ztd_pdf.close()new_pdf.close()\n\n","categories":["office"],"tags":["pdf"]},{"title":"python调用ffmpeg处理音频-转换格式","url":"/2022/02/02/python/python-%E8%B0%83%E7%94%A8ffmpeg%E5%A4%84%E7%90%86%E9%9F%B3%E9%A2%91-%E8%BD%AC%E6%8D%A2%E6%A0%BC%E5%BC%8F/","content":"ffmpeg 使用说明查看使用说明：ffmpeg -h。\n# usage: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...# options:-ab:                比特率-vn:                video no-map_metadata 0:    保留 meta data-y:    overwrite output files\n\n\n\n遍历文件夹中的所有 flac 文件, 转成 mp3 或 aac# %%def convert(path=&#x27;/&#x27;, ext=&#x27;&#x27;):    for parent, dirnames, filenames in os.walk(path):        for filename in filenames:            extension = os.path.splitext(filename)[1]            if extension == ext:                old_dir = os.path.join(parent, filename)                                # 转 mp3                # new_dir = old_dir.replace(&#x27;.flac&#x27;, &#x27;.mp3&#x27;)                # ffmpeg_command = f&#x27;ffmpeg -i &quot;&#123;old_dir&#125;&quot; -ab 320k -map_metadata 0 &quot;&#123;new_dir&#125;&quot; -y&#x27;                                # 转 aac                new_dir = old_dir.replace(&#x27;.flac&#x27;, &#x27;.m4a&#x27;)                # ffmpeg_command = f&#x27;ffmpeg -i &quot;&#123;old_dir&#125;&quot; -ab 320k -vn &quot;&#123;new_dir&#125;&quot; -y&#x27;                ffmpeg_command = f&#x27;ffmpeg -i &quot;&#123;old_dir&#125;&quot; &quot;&#123;new_dir&#125;&quot; -y&#x27;                                p = subprocess.Popen(ffmpeg_command, shell=True, stdout=subprocess.PIPE)                for line in iter(p.stdout.readline, b&#x27;&#x27;):                    msg = line.strip().decode(&#x27;gbk&#x27;)                    print(msg)convert(os.getcwd(), ext=&#x27;.flac&#x27;)# %%import osimport subprocessdef remove(path=&#x27;/&#x27;, ext=&#x27;&#x27;):    for parent, dirnames, filenames in os.walk(path):        for filename in filenames:            extension = os.path.splitext(filename)[1]            if extension == ext:                dir = os.path.join(parent, filename)                print(dir)                os.remove(dir)# remove(os.getcwd(), ext=&#x27;.flac&#x27;)\n","categories":["python"],"tags":["python","ffmpeg"]},{"title":"群晖升级ffmpeg","url":"/2022/01/06/synology/%E7%BE%A4%E6%99%96%E5%8D%87%E7%BA%A7ffmpeg/","content":"群晖自带的 ffmpeg 版本较低、支持编码库也比较少， 似乎不支持h265。从 SynoCommunity 升级 ffmpeg。 \nSynoCommunity 上给出了 DSM7版本 各套件的适配情况：\n\n issue #4524: https://github.com/SynoCommunity/spksrc/issues/4524\n\n1. 先从 SynoCommunity 安装 ffmpeg 套件略\n2. 设置 Video Station 调用 SynoCommunity 版本的 ffmpeg\n https://github.com/SynoCommunity/spksrc/wiki/FAQ-FFmpeg\n\n命令如下：\nsudo mv /var/packages/VideoStation/target/bin/ffmpeg /var/packages/VideoStation/target/bin/ffmpeg.oldsudo ln -sf /var/packages/ffmpeg/target/bin/ffmpeg /var/packages/VideoStation/target/bin/ffmpegsudo cp -p /var/packages/VideoStation/target/lib/libsynovte.so /var/packages/VideoStation/target/lib/libsynovte.so.oldsudo sed -i &#x27;s/eac3/ZXXZ/&#x27; /var/packages/VideoStation/target/lib/libsynovte.sosudo sed -i &#x27;s/dts/ZXZ/&#x27; /var/packages/VideoStation/target/lib/libsynovte.sosudo sed -i &#x27;s/truehd/ZXZZXZ/&#x27; /var/packages/VideoStation/target/lib/libsynovte.so\n\n恢复原来的设置\n# Reverse the above changes:sudo mv -f /var/packages/VideoStation/target/bin/ffmpeg.old /var/packages/VideoStation/target/bin/ffmpegsudo mv -f /var/packages/VideoStation/target/lib/libsynovte.so.old /var/packages/VideoStation/target/lib/libsynovte.so\n\n\n\n\n3. 设置 命令行 默认调用 SynoCommunity 版本的 ffmpeg\n打开配置文件 nano ~/.zshrc\n\n# 加到最后一行export PATH=&quot;/var/packages/ffmpeg/target/bin:$PATH&quot;\n\n\n加载配置文件， source ~/.zshrc\n\n\nN_m3u8DL-RE --save-dir /volume2/video --del-after-done --ffmpeg-binary-path /var/packages/ffmpeg6/target/bin/ffmpeg6 https://xxx.xxx/index.m3u8\n","categories":["synology"],"tags":["synology"]},{"title":"PDF文档翻译","url":"/2021/12/24/office/PDF%E6%96%87%E6%A1%A3%E7%BF%BB%E8%AF%91/","content":"PDF文档全文翻译，保留原有的PDF格式\n\npymupdf \npip install pymupdf\nhttps://pymupdf.readthedocs.io/en/latest/index.html\n\n\nyoudao api\n\n1. 采用 pymupdf 识别 pdf 的图片和文字import fitzimport refrom pprint import pprintpdf_name = &#x27;xxx-en.pdf&#x27;print(f&#x27;Source pdf file: &#123;pdf_name&#125; \\n&#x27;)src_pdf = fitz.open(pdf_name)new_pdf = fitz.open()for p, page in enumerate(src_pdf):    print(f&#x27;\\n- translating PAGE -&#123;p&#125;- ...&#x27;)    # 1.1 创建大小相同的新页面    new_page = new_pdf.new_page(width=page.rect.width, height=page.rect.height)    blocks = page.get_text(&#x27;dict&#x27;)[&#x27;blocks&#x27;]    # 1.2 图片    img_blks = [b for b in blocks if b[&#x27;type&#x27;] == 1]    for img in img_blks:        # pprint(img)        new_page.insert_image(img[&#x27;bbox&#x27;], stream=img[&#x27;image&#x27;])    # 1.3 文字    txt_blks = [b for b in blocks if b[&#x27;type&#x27;] != 1]    for txt in txt_blks:        text_tmp = &#x27;&#x27;.join([s[&#x27;text&#x27;] for l in txt[&#x27;lines&#x27;] for s in l[&#x27;spans&#x27;]])        text_tmp = re.sub(&#x27;[@#$%^&amp;*\\&#x27;\\&quot;\\n\\r\\t]&#x27;, &#x27; &#x27;, text_tmp).strip()        if text_tmp:            # print(txt[&#x27;bbox&#x27;], text_tmp)            text_translate = &#x27;中国 &#x27; + text_tmp            # text_translate = youdao(text_tmp)            new_page.insert_textbox(txt[&#x27;bbox&#x27;], text_translate,                                    fontsize=6,                                    fontname=&#x27;simhei&#x27;,                                    fontfile=r&#x27;C:\\Windows\\Fonts\\simhei.ttf&#x27;)    # if p == 1:    #     breaknew_name = pdf_name.replace(&#x27;.pdf&#x27;, &#x27;-zh.pdf&#x27;)new_pdf.save(new_name)print(&#x27;\\n------Done!-------&#x27;)\n\n\n2. 有道翻译# %%# %%import requestsimport jsonimport timedef youdao(en_txt=&#x27;&#x27;):    api_url = &#x27;http://fanyi.youdao.com/translate?&amp;i=&#123;&#125;&amp;doctype=json&#x27;    res = requests.get(api_url.format(en_txt)).json()    time.sleep(3.0)    # print(res)    zh_txt = &#x27;&#x27;.join([seq[&#x27;tgt&#x27;] for seq in res[&#x27;translateResult&#x27;][0]])    print(f&#x27;*** &#123;en_txt&#125; \\n--&gt; &#123;zh_txt&#125;&#x27;)    return zh_txten_txt = &#x27;so we beat on, boats against the current, borne back ceaselessly into the past.&#x27;youdao(en_txt)\n\n3. 百度翻译# %%import requestsimport randomimport jsonfrom hashlib import md5import time# ref: https://api.fanyi.baidu.com/doc/appid = &#x27;2222222222222222&#x27;appkey = &#x27;ooooooooooooooooooo&#x27;# Generate salt and signdef make_md5(s, encoding=&#x27;utf-8&#x27;):    return md5(s.encode(encoding)).hexdigest()def baidu(en_txt=&#x27;&#x27;):    salt = random.randint(32768, 65536)    sign = make_md5(appid + en_txt + str(salt) + appkey)    api_url = &#x27;http://api.fanyi.baidu.com/api/trans/vip/translate&#x27;    headers = &#123;&#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;&#125;    payload = &#123;&#x27;appid&#x27;: appid, &#x27;q&#x27;: en_txt, &#x27;from&#x27;: &#x27;en&#x27;, &#x27;to&#x27;: &#x27;zh&#x27;, &#x27;salt&#x27;: salt, &#x27;sign&#x27;: sign&#125;    res = requests.get(api_url, params=payload, headers=headers, timeout=3.0).json()    time.sleep(3.0)    if &#x27;trans_result&#x27; in res.keys():        zh_txt = &#x27;&#x27;.join([seq[&#x27;dst&#x27;] for seq in res[&#x27;trans_result&#x27;]])        print(f&#x27;*** &#123;en_txt&#125; \\n--&gt; &#123;zh_txt&#125;&#x27;)        return zh_txt    if &#x27;error_code&#x27; in res.keys():        print(f&#x27;*** &#123;en_txt&#125; \\n??? &#123;res&#125;&#x27;)en_txt = &#x27;so we beat on, boats against the current, borne back ceaselessly into the past.&#x27;baidu(en_txt)\n\n","categories":["office"],"tags":["pdf"]},{"title":"群晖218+增加内存","url":"/2021/09/25/synology/%E7%BE%A4%E6%99%96218+%E5%A2%9E%E5%8A%A0%E5%86%85%E5%AD%98/","content":"\n这里可查CPU、内存型号https://kb.synology.com/en-us/DSM/tutorial/What_kind_of_CPU_does_my_NAS_have\n\n\n群晖型号：DS218+\nCPU ：Intel Celeron J3355\tDual Core\n架构： Apollolake(x64)：\n内存：DDR3L SODIMM 2GB\n\n\n群晖 DS218+ 原装内存只有 2GB，机器内预留了一个内存插槽，准备再加一个。\n看了网上说群晖的机子认内存，而且最大识别到8G，也有说16G的，可以命令查询。\n查看群晖内存 sudo dmidecode -t memory：\n$ sudo dmidecode -t memory# dmidecode 3.2Getting SMBIOS data from sysfs.SMBIOS 3.0.0 present.Handle 0x0023, DMI type 16, 23 bytesPhysical Memory Array        Location: System Board Or Motherboard        Use: System Memory        Error Correction Type: None        Maximum Capacity: 16 GB        Error Information Handle: No Error        Number Of Devices: 1Handle 0x0025, DMI type 17, 40 bytesMemory Device        Array Handle: 0x0023        Error Information Handle: No Error        Total Width: 8 bits        Data Width: 8 bits        Size: 2048 MB        Form Factor: SODIMM        Set: None        Locator: ChannelB-DIMM0        Bank Locator: BANK 1        Type: DDR3        Type Detail: Synchronous        Speed: 1600 MT/s        Manufacturer: 0824        Serial Number: 25073816        Asset Tag: 9876543210        Part Number: D3SS56161XL10AA        Rank: Unknown        Configured Memory Speed: 1600 MT/s        Minimum Voltage: Unknown        Maximum Voltage: Unknown        Configured Voltage: Unknown\n\n可以看到 Maximum Capacity: 16 GB\n\n\n我这里只考虑加个 4G 的就行了，总共 6G，目前需求不大。。。\n京东随便买了一个：\n\n协德 (xiede)1.35V低电压版DDR3L 1866 1867 4G笔记本内存条\n\n我去，安上去直接翻车了。。。群晖不开机。\n\n家里有个老的 Dell 笔记本是 8G 内存（2 x 4G），有个金士顿的\n把金士顿的调换过来，群晖可以开机了，笔记本也没问题。\n$ sudo dmidecode -t memory# dmidecode 3.2Getting SMBIOS data from sysfs.SMBIOS 3.0.0 present.Handle 0x0023, DMI type 16, 23 bytesPhysical Memory Array        Location: System Board Or Motherboard        Use: System Memory        Error Correction Type: None        Maximum Capacity: 16 GB        Error Information Handle: No Error        Number Of Devices: 2Handle 0x0024, DMI type 17, 40 bytesMemory Device        Array Handle: 0x0023        Error Information Handle: No Error        Total Width: 8 bits        Data Width: 8 bits        Size: 4096 MB        Form Factor: SODIMM        Set: None        Locator: ChannelA-DIMM0        Bank Locator: BANK 0        Type: DDR3        Type Detail: Synchronous        Speed: 1600 MT/s        Manufacturer: Kingston        Serial Number: 19041716        Asset Tag: 9876543210        Part Number: HP16D3LS1KBG/4G        Rank: Unknown        Configured Memory Speed: 1600 MT/s        Minimum Voltage: Unknown        Maximum Voltage: Unknown        Configured Voltage: UnknownHandle 0x0025, DMI type 17, 40 bytesMemory Device        Array Handle: 0x0023        Error Information Handle: No Error        Total Width: 8 bits        Data Width: 8 bits        Size: 2048 MB        Form Factor: SODIMM        Set: None        Locator: ChannelB-DIMM0        Bank Locator: BANK 1        Type: DDR3        Type Detail: Synchronous        Speed: 1600 MT/s        Manufacturer: 0824        Serial Number: 25073816        Asset Tag: 9876543210        Part Number: D3SS56161XL10AA        Rank: Unknown        Configured Memory Speed: 1600 MT/s        Minimum Voltage: Unknown        Maximum Voltage: Unknown        Configured Voltage: Unknown\n\n","categories":["synology"],"tags":["synology"]},{"title":"OrangeRobot","url":"/2021/09/07/yoyo/20210907-OrangeRobot/","content":"\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"自行车","url":"/2021/09/07/yoyo/20210907-%E8%87%AA%E8%A1%8C%E8%BD%A6/","content":"暑假马上结束了，悠悠约了琪琪姐姐要好好玩，连续几天晚上吃过饭都骑自行车去秦淮河边公园，一直玩到9点多。\n我准备给她自行车加一个小灯，这样方便我能一眼找到她。\n灯就用仙女棒上的，棒子已经丢了，一串小灯还留着，挺长的有1米多，但纽扣电池没电了，换成两节5号电池，刚好有个电池盒。\n我正在安，悠悠说，爸爸你要做成能拆下来的。\n我问为啥？\n我下次要换大自行车，还把这灯安上去。\n我说不用，到时候灯也换新的。\n过一会，我把灯缠好了，线头准备焊到电池盒上。\n悠悠说，你这可以换电池吗？没电了咋办。\n可以换的，电池盒子可以打开。\n有开关吗？灯是一直亮着的吗？\n有。呶，关了。\n\n\n\n我继续固定电池盒，用热熔胶固定座椅下面，再用透明胶带缠了几圈。\n小家伙又跑来，爸爸，你开关要放在外面，我能看到的地方，不然我就够不到了。\n我说我已经安好了，你来看看能不能够到。\n嗯，可以。\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"企业微信推送 x Github Action [python]","url":"/2021/08/22/python-app/wechat-push-github-action/","content":"配置 Github Action, 推送企业微信消息\n1. 将企业微信的 secret 添加到 Action Secret打开 hexo-source 仓库设置，在 Secrets 选项中，分别新建 3个 repo secret:\n\n名称设为CORP_ID, 内容为corpid的内容\n名称设为CORP_SECRET, 内容为secret的内容\n名称设为AGENT_ID, 内容为agentid的内容\n\n2. 修改 wechat-push 代码以发送 commit log 信息为列, 代码如下：\n\n\nimport osimport jsonimport requests# https://work.weixin.qq.com/wework_admin/frame#profilecorp_id = os.environ[&#x27;CORP_ID&#x27;]corp_secret = os.environ[&#x27;CORP_SECRET&#x27;]agent_id = os.environ[&#x27;AGENT_ID&#x27;]def get_access_token(corp_id, corp_secret):    resp = requests.get(f&#x27;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=&#123;corp_id&#125;&amp;corpsecret=&#123;corp_secret&#125;&#x27;)    js = json.loads(resp.text)    print(js)    if js[&quot;errcode&quot;] == 0:        access_token = js[&quot;access_token&quot;]        expires_in = js[&quot;expires_in&quot;]        return access_token, expires_indef wechat_push_text(agent_id, access_token, message):    data = &#123;        &quot;touser&quot;: &quot;@all&quot;,        &quot;msgtype&quot;: &#x27;text&#x27;,        &quot;agentid&quot;: agent_id,        &quot;text&quot;: &#123;            &quot;content&quot;: message        &#125;,        &quot;safe&quot;: 0,        &quot;enable_id_trans&quot;: 0,        &quot;enable_duplicate_check&quot;: 0,        &quot;duplicate_check_interval&quot;: 1800    &#125;    resp = requests.post(f&#x27;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=&#123;access_token&#125;&#x27;, json=data)    js = json.loads(resp.text)    print(js)    if js[&quot;errcode&quot;] == 0:        return jswith open(&#x27;commit_log.md&#x27;, &#x27;r&#x27;) as f:    log = f.read()    access_token, expires_in = get_access_token(corp_id, corp_secret)    wechat_push_text(agent_id=agent_id, access_token=access_token, message=log)\n\n3. 编写 Github Actions 配置文件name: Wework MSG Auto Pushon: [push]jobs:  build:    name: Wework MSG Auto Push by GitHub Actions    runs-on: ubuntu-latest    steps:    - name: 1. setup python...      uses: actions/setup-python@v1    - name: 2. send commit log to wework ...      env:        CORP_ID: $&#123;&#123; secrets.CORP_ID &#125;&#125;        CORP_SECRET: $&#123;&#123; secrets.CORP_SECRET &#125;&#125;        AGENT_ID: $&#123;&#123; secrets.AGENT_ID &#125;&#125;      run: |        echo -e &quot;commit log:\\n&quot; &gt; commit_log.md        echo -e &quot;$(git log -1 --stat)&quot; &gt;&gt; commit_log.md                log=$(cat commit_log.md)        python -m pip install requests        python wechat_push.py\n\n\n以上。\n","categories":["python"],"tags":["python","github_actions","wechat"]},{"title":"企业微信推送[python]","url":"/2021/08/03/python-app/wechat-push-%E4%BC%81%E4%B8%9A%E5%BE%AE%E4%BF%A1%E6%8E%A8%E9%80%81/","content":"qiye-wechat-push企业微信推送 python版：\n\n不需要安装企业微信客户端\n可在微信中直接收到文本消息，内容显全文\n\n1. 企业微信注册\n1.1 注册企业\n\n用电脑打开企业微信官网，https://work.weixin.qq.com/， 注册一个企业\n\n1.2 获取企业ID\n\n我的企业 –&gt; 最下边可以看到企业ID: corpid\n\n1.3 获取应用ID\n\n管理企业 –&gt; 应用管理 –&gt; 创建应用 \n创建完成后可得到应用ID agentid \n\n1.4 获取Secret\n\n还在应用页面， 获取 Secret， 需要在企业微信客户端里接收。\n这样就得到了 secret \n2. 发送文本消息 python\n\n\n2.1 官方API：\n\n用到了两个API\n\n\n获取 access_token ： https://work.weixin.qq.com/api/doc/90000/90135/91039\n发送应用消息 ： https://work.weixin.qq.com/api/doc/90000/90135/90236\n\n\n\n2.2 python 代码：\n\nimport jsonimport requests# https://work.weixin.qq.com/wework_admin/frame#profilecorp_id = &#x27;wwxxxxxxxxxxxxxxxxx&#x27;corp_secret = &#x27;Ghxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&#x27;agent_id = &#x27;10xxxxxx&#x27;def get_access_token(corp_id, corp_secret):    resp = requests.get(f&#x27;https://qyapi.weixin.qq.com/cgi-bin/gettoken?corpid=&#123;corp_id&#125;&amp;corpsecret=&#123;corp_secret&#125;&#x27;)    js = json.loads(resp.text)    print(js)    if js[&quot;errcode&quot;] == 0:        access_token = js[&quot;access_token&quot;]        expires_in = js[&quot;expires_in&quot;]        return access_token, expires_indef wechat_push_text(agent_id, access_token, message):    data = &#123;        &quot;touser&quot;: &quot;@all&quot;,        &quot;msgtype&quot;: &#x27;text&#x27;,        &quot;agentid&quot;: agent_id,        &quot;text&quot;: &#123;            &quot;content&quot;: message        &#125;,        &quot;safe&quot;: 0,        &quot;enable_id_trans&quot;: 0,        &quot;enable_duplicate_check&quot;: 0,        &quot;duplicate_check_interval&quot;: 1800    &#125;    resp = requests.post(f&#x27;https://qyapi.weixin.qq.com/cgi-bin/message/send?access_token=&#123;access_token&#125;&#x27;, json=data)    js = json.loads(resp.text)    print(js)    if js[&quot;errcode&quot;] == 0:        return jsaccess_token, expires_in = get_access_token(corp_id, corp_secret)wechat_push_text(agent_id=agent_id, access_token=access_token, message=&#x27;wechat notify\\ntest&#x27;)\n\n\n\n代码：\nhttps://github.com/shenbo/qiye-wechat-push\n\n","categories":["python"],"tags":["python","wechat"]},{"title":"群晖自编译套件SPK","url":"/2021/07/06/synology/%E7%BE%A4%E6%99%96%E8%87%AA%E7%BC%96%E8%AF%91%E5%A5%97%E4%BB%B6SPK/","content":"DSM 升级至 7.0 之后，很多第三方套件不兼容了。\nSynoCommunity 上给出了各套件的适配情况：\n\n issue #4524: https://github.com/SynoCommunity/spksrc/issues/4524\n\nzsh 也在其中，已经可以 build 了，但是还没正式发布。\n我试着自己编译一下。\nCPU 架构我的群晖是DS218+，CPU 是Intel Celeron J3355，架构是 apollolake(x64).\n\n这里可以查： \n\n\nhttps://github.com/SynoCommunity/spksrc/wiki/Architecture-per-Synology-model\n\n\nhttps://kb.synology.com/en-us/DSM/tutorial/What_kind_of_CPU_does_my_NAS_have\n\n\n\n开发环境\nDS218+ 是支持 Docker 的，首先在套件中心中启用 Docker 套件。\n\nSSH 进入群晖。\n\n下载 spksrc 仓库: git clone https://github.com/SynoCommunity/spksrc.git ~/spksrc\n\n拉取 docker： docker pull synocommunity/spksrc\n\n运行 docker： docker run -it -v ~/spksrc:/spksrc synocommunity/spksrc /bin/bash\n\n切换到dsm7分支:  git checkout dsm7-packages\n\n\n编译cd spksrc/make setup dsm-7.0cd spk/zshmake arch-apollolake-7.0# 在这一步会下载对应CPU架构的工具链，# 群晖官方发布在 sourceforge.net 上，# 速度超慢，需耐心等待。。。\n\n\n成功之后在 spksrc&#x2F;packages&#x2F; 目录下可以看到已经生成的spk文件。\n\n安装套件\n打开套件中心，手动安装 spk 。\n\n\ndone！\n","categories":["synology"],"tags":["synology"]},{"title":"Win10-WSL-Ubuntu20.04-Docker 安装与配置","url":"/2021/07/04/wsl/wsl-ubuntu-docker/","content":"一、WSL 安装 Ubuntu20.04\nWin10 启用 WSL\n\n管理员身份运行：\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n\n重启电脑。\n开启虚拟器特性\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n\n下载安装包:\n\nWSL2 Linux kernel update package for x64 machines\nhttps://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\n\n设置默认版本：\nwsl --set-default-version 2\n\n\nref: https://docs.microsoft.com/en-us/windows/wsl/install-win10\n\n\n打开 Microsoft Store，安装 Ubuntu20.04\n\n启动 Ubuntu20.04，创建账号、密码\n\n安装 Windows Terminal（可选）\n\n\n用 scoop 安装。\nscoop install windows-terminal\n\nwindows-terminal 简单设置：\n\n启动目录： //wsl$/Ubuntu-20.04//home/bo\n字体： Jetbrains Mono\n\n\n设置源，更新（可选）\n\n\n\n打开配置文件： sudo nano /etc/apt/sources.list, 替换成以下内容：\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse# 预发布软件源，不建议启用# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse\nref： https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/\n更新：sudo apt update\n升级：sudo apt upgrade\n\n安装 ZSH、oh-my-zsh（可选）\n\n参考 zsh &amp; oh-my-zsh 安装配置 \n二、安装 Docker\nref： https://docs.docker.com/engine/install/ubuntu/\n\n\n首先更新索引，安装必要的依赖软件，添加新的 HTTPS 软件源\n\nsudo apt updatesudo apt install apt-transport-https \\                 ca-certificates \\                 curl \\                 gnupg \\                 lsb-release\n\n\n使用下面的 curl 导入源仓库的 GPG key\n\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n\n\n添加 Docker APT 软件源\n\necho \\  &quot;deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \\  $(lsb_release -cs) stable&quot; | sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\n\n现在，Docker 软件源被启用了，你可以安装软件源中任何可用的 Docker 版本。\n\n安装 Docker 最新版本\n\nsudo apt-get updatesudo apt-get install docker-ce docker-ce-cli containerd.io\n\n\n运行一下是否安装成功\n\nsudo docker run hello-world\n\n可能或报错：\nCannot connect to the Docker daemon at unix:///var/run/docker.sock. &gt; Is the docker daemon running?\n再试一下：\nsudo systemctl status dockersudo systemctl status docker\n\n\n还是报错：\nSystem has not been booted with systemd as init system (PID 1). Can&#x27;t operate.Failed to connect to bus: Host is down\n原因是 WSL 没有完全实现 Linux 下的 systemctl 的命令， 可以检查一下：\n# check if your system is using `systemd` or `sysvinit`ps -p 1 -o comm=# If the command doesn&#x27;t return systemd, and in my case, Ubuntu-20.04 on WSL, the command returned init, then use the command pattern# start services using sysvinitservice docker start\n\nref: https://stackoverflow.com/questions/52604068/using-wsl-ubuntu-app-system-has-not-been-booted-with-system-as-init-system-pi\n\n因此，在WSL下 要用以下命令启动 docker。\nservice docker start\n\n\ndone!\n","categories":["WSL"],"tags":["Docker","Ubuntu","WSL"]},{"title":"python调用ffmpeg批量转换音频flac、mp3、m4a","url":"/2021/06/30/python/python%E8%B0%83%E7%94%A8ffmpeg%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2%E9%9F%B3%E9%A2%91flac%E3%80%81mp3%E3%80%81m4a/","content":"ffmpeg 使用说明查看使用说明：ffmpeg -h。\n# usage: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...# options:-ab:   -ab bitrate         audio bitrate (please use -b:a)-y:    overwrite output files\n\n转换命令如下：\nffmpeg -i xxx.flac -ab 320k xxx.mp3 -y&#x27;\n\n这次我们用到的主要是 -ab 命令，用来指定音频转换的比特率，常见的有: 192K， 320K 等。\n\n\n遍历文件夹中的所有音频文件, 将 flac 转为 mp3 或 m4aimport osimport subprocesspath = &#x27;~/music/FLAC/&#x27;str = &#x27;ffmpeg -i &quot;&#123;&#125;&quot; -ab 320k &quot;&#123;&#125;&quot; -y&#x27;for parent, dirnames, filenames in os.walk(path):    for filename in filenames:        old_dir = os.path.join(parent, filename)        if old_dir[-4:] == &#x27;flac&#x27;:            new_dir = old_dir.replace(&#x27;.flac&#x27;, &#x27;.mp3&#x27;)            new_dir = old_dir.replace(&#x27;.flac&#x27;, &#x27;.m4a&#x27;)            str_cmd = str.format(old_dir, new_dir)            print(str_cmd)            p = subprocess.Popen(str_cmd, shell=True, stdout=subprocess.PIPE)            for line in iter(p.stdout.readline, b&#x27;&#x27;):                print(line.strip().decode(&#x27;gbk&#x27;))\n\n删除原有的 flac 文件import osimport subprocesspath = &#x27;~/music/FLAC/&#x27;for parent, dirnames, filenames in os.walk(path):    for filename in filenames:        old_dir = os.path.join(parent, filename)        if old_dir[-4:] == &#x27;flac&#x27;:            print(old_dir)            os.remove(old_dir)\n","categories":["python"],"tags":["python","ffmpeg"]},{"title":"视频字幕提取-基于opencv和tesseract","url":"/2021/06/11/sci-opencv/%E8%A7%86%E9%A2%91%E5%AD%97%E5%B9%95%E6%8F%90%E5%8F%96-opencv-tesseract/","content":"视频内字幕提取\n这里是针对内封了硬字幕的视频，字幕已经成为了画面的一部分。\n思路：简单用 opencv 提取视频内的所有帧，然后用 tesseract 对图片进行 ocr 识别。\n目前的效率较低、准确度也一般，凑合用。\n0. 首先需要配置一下0.1 安装 python 库\npython-opencv\npytesseract\nscikit-image\n\n0.2 安装 tesseract 软件，下载训练好的语言包\ntesseract 软件可以用 scoop 安装：\n\nscoop install tesseract\n\ntesseract 训练好的语言包\n\n帮助文档： https://tesseract-ocr.github.io/tessdoc/\n官方体提供了三种训练好的模型： \n\ntessdata\ntessdata_best\ntessdata_fast\n\n我们这里选择 tessdata_fast ：\n\n中文： https://raw.githubusercontent.com/tesseract-ocr/tessdata-fast/master/{}.traineddata\n英文： https://raw.githubusercontent.com/tesseract-ocr/tessdata-dast/master/{}.traineddata\n中括号里是语言的名字：如 chi_sim、eng 等。\n\n\n\n可以用python下载：\nimport osfrom urllib.request import urlretrievedef download_tessdata(url, savepath=&#x27;./&#x27;):    # 显示下载进度    def reporthook(a, b, c):        print(&quot;\\rdownloading: %5.1f%%&quot; % (a * b * 100.0 / c), end=&quot;&quot;)    filename = os.path.basename(url)    if not os.path.isfile(os.path.join(savepath, filename)):        print(&#x27;Downloading data from %s&#x27; % url)        urlretrieve(url, os.path.join(savepath, filename), reporthook=reporthook)        print(&#x27;\\nDownload finished!&#x27;)    else:        print(&#x27;File already exsits!&#x27;)    filesize = os.path.getsize(os.path.join(savepath, filename))  # 获取文件大小    print(&#x27;File size = %.2f Mb&#x27; % (filesize / 1024 / 1024))  # Bytes转换为Mbtessdata_dir = &#x27;./tessdata/&#x27;tessdata_url = &#x27;https://ghproxy.net/https://raw.githubusercontent.com/tesseract-ocr/tessdata/master/&#123;&#125;.traineddata&#x27;# 语言： 中+英lang = &#x27;chi_sim+eng&#x27;for lang_name in lang.split(&#x27;+&#x27;):    download_tessdata(tessdata_url.format(lang_name), tessdata_dir)\n\n1. 读取视频使用 opencv 读取视频\nimport cv2video_path = &#x27;d7.mp4&#x27;v = cv2.VideoCapture(video_path)num_frames = int(v.get(cv2.CAP_PROP_FRAME_COUNT))fps = v.get(cv2.CAP_PROP_FPS)height = int(v.get(cv2.CAP_PROP_FRAME_HEIGHT))width = int(v.get(cv2.CAP_PROP_FRAME_WIDTH))print(f&#x27;video      :  &#123;video_path&#125;\\n&#x27;      f&#x27;num_frames :  &#123;num_frames&#125;\\n&#x27;      f&#x27;fps        :  &#123;fps&#125;\\n&#x27;      f&#x27;resolution :  &#123;width&#125; x &#123;height&#125;&#x27;)\n\n2. 提取所有帧import datetimedef get_frame_index(time_str: str, fps: float):    t = time_str.split(&#x27;:&#x27;)    t = list(map(float, t))    if len(t) == 3:        td = datetime.timedelta(hours=t[0], minutes=t[1], seconds=t[2])    elif len(t) == 2:        td = datetime.timedelta(minutes=t[0], seconds=t[1])    else:        raise ValueError(            &#x27;Time data &quot;&#123;&#125;&quot; does not match format &quot;%H:%M:%S&quot;&#x27;.format(time_str))    index = int(td.total_seconds() * fps)    return index# 起始时间、结束时间time_start = &#x27;0:00&#x27;time_end = &#x27;0:10&#x27;ocr_start = get_frame_index(time_start, fps) if time_start else 0ocr_end = get_frame_index(time_end, fps) if time_end else num_framesnum_ocr_frames = ocr_end - ocr_startprint(f&#x27;ocr_start       :  &#123;ocr_start&#125;\\n&#x27;      f&#x27;ocr_end         :  &#123;ocr_end&#125;\\n&#x27;      f&#x27;num_ocr_frames  :  &#123;num_ocr_frames&#125;&#x27;)\n\n3. 只保留画面中有字幕的区域# *** 调整字幕区域的高度，按比例 ***h1, h2 = 0.86, 0.94h1, h2 = int(height * h1), int(height * h2)v.set(cv2.CAP_PROP_POS_FRAMES, ocr_start)frames = [v.read()[1] for _ in range(num_ocr_frames)]z_frames = [frame[h1:h2, :] for frame in frames]# 预览一下title = &#x27;preview&#x27;cv2.startWindowThread()cv2.namedWindow(title)for idx, img in enumerate(z_frames):    tmp_img = img.copy()    cv2.putText(tmp_img, f&#x27;idx:&#123;idx&#125;&#x27;, (5, 25),                 cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)    cv2.imshow(title, tmp_img)    cv2.imshow(title, img)    cv2.waitKey(50)cv2.destroyWindow(title)cv2.destroyAllWindows()\n\n4. 去除相似度较高的帧，保留关键帧为了减少识别量，先去除一部分相似度较高的图片。\n\n计算两个图片的均方差（即 MSE）， 采用 skimage.metrics.mean_squared_error 函数\n\n# 设置阈值mse_threshold = 100from skimage.metrics import mean_squared_errork_frames = [&#123;&#x27;start&#x27;: 0,             &#x27;end&#x27;: 0,             &#x27;frame&#x27;: z_frames[0],             &#x27;text&#x27;: &#x27;&#x27;&#125;]for idx in range(1, num_ocr_frames):    img1 = z_frames[idx - 1]    img2 = z_frames[idx]    mse = mean_squared_error(img1, img2)    # print(idx, mse)    if mse &lt; mse_threshold:        k_frames[-1][&#x27;end&#x27;] = idx    else:        k_frames.append(&#123;&#x27;start&#x27;: idx,                         &#x27;end&#x27;: idx,                         &#x27;frame&#x27;: z_frames[idx],                         &#x27;text&#x27;: &#x27;&#x27;&#125;)for kf in k_frames:    print(f&quot;&#123;kf[&#x27;start&#x27;]&#125; --&gt; &#123;kf[&#x27;end&#x27;]&#125; : &#123;kf[&#x27;text&#x27;]&#125;&quot;)\n\n5. 识别字幕import pytesseractconfig = f&#x27;--tessdata-dir &quot;&#123;tessdata_dir&#125;&quot; --psm 7&#x27;for idx, kf in enumerate(k_frames):    # 识别为字符串    ocr_str = pytesseract.image_to_string(kf[&#x27;frame&#x27;], lang=lang, config=config)    ocr_str = ocr_str.strip().replace(&#x27; &#x27;, &#x27;&#x27;)    if ocr_str:        k_frames[idx][&#x27;text&#x27;] = ocr_str        print(f&quot;&#123;kf[&#x27;start&#x27;]&#125; --&gt; &#123;kf[&#x27;end&#x27;]&#125; : &#123;kf[&#x27;text&#x27;]&#125;&quot;)print([k_frames.remove(kf) for kf in k_frames if not kf[&#x27;text&#x27;]])\n\n6. 格式化字幕for kf in k_frames:    print(f&quot;&#123;kf[&#x27;start&#x27;]&#125; --&gt; &#123;kf[&#x27;end&#x27;]&#125; : &#123;kf[&#x27;text&#x27;]&#125;&quot;)def get_srt_timestamp(frame_index: int, fps: float):    td = datetime.timedelta(seconds=frame_index / fps)    ms = td.microseconds // 1000    m, s = divmod(td.seconds, 60)    h, m = divmod(m, 60)    return &#x27;&#123;:02d&#125;:&#123;:02d&#125;:&#123;:02d&#125;,&#123;:03d&#125;&#x27;.format(h, m, s, ms)for kf in k_frames:    time1 = get_srt_timestamp(kf[&#x27;start&#x27;], fps)    time2 = get_srt_timestamp(kf[&#x27;end&#x27;], fps)    print(f&quot;&#123;time1&#125; --&gt; &#123;time2&#125;\\n&#123;kf[&#x27;text&#x27;]&#125;\\n&quot;)\n\n\n完整代码：ref: https://github.com/shenbo/video-subtitles-ocr\n# %%# 0. 下载语言import osfrom urllib.request import urlretrievedef download_tessdata(url, savepath=&#x27;./&#x27;):    # 显示下载进度    def reporthook(a, b, c):        print(&quot;\\rdownloading: %5.1f%%&quot; % (a * b * 100.0 / c), end=&quot;&quot;)    filename = os.path.basename(url)    if not os.path.isfile(os.path.join(savepath, filename)):        print(&#x27;Downloading data from %s&#x27; % url)        urlretrieve(url, os.path.join(savepath, filename), reporthook=reporthook)        print(&#x27;\\nDownload finished!&#x27;)    else:        print(&#x27;File already exsits!&#x27;)    filesize = os.path.getsize(os.path.join(savepath, filename))  # 获取文件大小    print(&#x27;File size = %.2f Mb&#x27; % (filesize / 1024 / 1024))  # Bytes转换为Mbtessdata_dir = &#x27;./tessdata/&#x27;tessdata_url = &#x27;https://ghproxy.net/https://raw.githubusercontent.com/tesseract-ocr/tessdata/master/&#123;&#125;.traineddata&#x27;# 语言： 中+英lang = &#x27;chi_sim+eng&#x27;for lang_name in lang.split(&#x27;+&#x27;):    download_tessdata(tessdata_url.format(lang_name), tessdata_dir)# %%# 1. 读取视频import cv2video_path = &#x27;d7.mp4&#x27;v = cv2.VideoCapture(video_path)num_frames = int(v.get(cv2.CAP_PROP_FRAME_COUNT))fps = v.get(cv2.CAP_PROP_FPS)height = int(v.get(cv2.CAP_PROP_FRAME_HEIGHT))width = int(v.get(cv2.CAP_PROP_FRAME_WIDTH))print(f&#x27;video      :  &#123;video_path&#125;\\n&#x27;      f&#x27;num_frames :  &#123;num_frames&#125;\\n&#x27;      f&#x27;fps        :  &#123;fps&#125;\\n&#x27;      f&#x27;resolution :  &#123;width&#125; x &#123;height&#125;&#x27;)# %%# 2. 提取帧import datetimedef get_frame_index(time_str: str, fps: float):    t = time_str.split(&#x27;:&#x27;)    t = list(map(float, t))    if len(t) == 3:        td = datetime.timedelta(hours=t[0], minutes=t[1], seconds=t[2])    elif len(t) == 2:        td = datetime.timedelta(minutes=t[0], seconds=t[1])    else:        raise ValueError(            &#x27;Time data &quot;&#123;&#125;&quot; does not match format &quot;%H:%M:%S&quot;&#x27;.format(time_str))    index = int(td.total_seconds() * fps)    return index# 起始时间、结束时间time_start = &#x27;0:00&#x27;time_end = &#x27;0:10&#x27;ocr_start = get_frame_index(time_start, fps) if time_start else 0ocr_end = get_frame_index(time_end, fps) if time_end else num_framesnum_ocr_frames = ocr_end - ocr_startprint(f&#x27;ocr_start       :  &#123;ocr_start&#125;\\n&#x27;      f&#x27;ocr_end         :  &#123;ocr_end&#125;\\n&#x27;      f&#x27;num_ocr_frames  :  &#123;num_ocr_frames&#125;&#x27;)# %%# 3. 只保留画面中的字幕区域# *** 调整字幕区域的高度，按比例 ***h1, h2 = 0.86, 0.94h1, h2 = int(height * h1), int(height * h2)v.set(cv2.CAP_PROP_POS_FRAMES, ocr_start)frames = [v.read()[1] for _ in range(num_ocr_frames)]z_frames = [frame[h1:h2, :] for frame in frames]# 预览一下title = &#x27;preview&#x27;cv2.startWindowThread()cv2.namedWindow(title)for idx, img in enumerate(z_frames):    tmp_img = img.copy()    cv2.putText(tmp_img, f&#x27;idx:&#123;idx&#125;&#x27;, (5, 25),                 cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 255), 2)    cv2.imshow(title, tmp_img)    cv2.imshow(title, img)    cv2.waitKey(50)cv2.destroyWindow(title)cv2.destroyAllWindows()# %%# 4. 去除相似度较高的帧，保留关键帧# 设置阈值mse_threshold = 100from skimage.metrics import mean_squared_errork_frames = [&#123;&#x27;start&#x27;: 0,             &#x27;end&#x27;: 0,             &#x27;frame&#x27;: z_frames[0],             &#x27;text&#x27;: &#x27;&#x27;&#125;]for idx in range(1, num_ocr_frames):    img1 = z_frames[idx - 1]    img2 = z_frames[idx]    mse = mean_squared_error(img1, img2)    # print(idx, mse)    if mse &lt; mse_threshold:        k_frames[-1][&#x27;end&#x27;] = idx    else:        k_frames.append(&#123;&#x27;start&#x27;: idx,                         &#x27;end&#x27;: idx,                         &#x27;frame&#x27;: z_frames[idx],                         &#x27;text&#x27;: &#x27;&#x27;&#125;)for kf in k_frames:    print(f&quot;&#123;kf[&#x27;start&#x27;]&#125; --&gt; &#123;kf[&#x27;end&#x27;]&#125; : &#123;kf[&#x27;text&#x27;]&#125;&quot;)# %%# 5. 识别字幕import pytesseractconfig = f&#x27;--tessdata-dir &quot;&#123;tessdata_dir&#125;&quot; --psm 7&#x27;for idx, kf in enumerate(k_frames):    # 识别为字符串    ocr_str = pytesseract.image_to_string(kf[&#x27;frame&#x27;], lang=lang, config=config)    ocr_str = ocr_str.strip().replace(&#x27; &#x27;, &#x27;&#x27;)    if ocr_str:        k_frames[idx][&#x27;text&#x27;] = ocr_str        print(f&quot;&#123;kf[&#x27;start&#x27;]&#125; --&gt; &#123;kf[&#x27;end&#x27;]&#125; : &#123;kf[&#x27;text&#x27;]&#125;&quot;)print([k_frames.remove(kf) for kf in k_frames if not kf[&#x27;text&#x27;]])# %%# 6. 格式化字幕for kf in k_frames:    print(f&quot;&#123;kf[&#x27;start&#x27;]&#125; --&gt; &#123;kf[&#x27;end&#x27;]&#125; : &#123;kf[&#x27;text&#x27;]&#125;&quot;)def get_srt_timestamp(frame_index: int, fps: float):    td = datetime.timedelta(seconds=frame_index / fps)    ms = td.microseconds // 1000    m, s = divmod(td.seconds, 60)    h, m = divmod(m, 60)    return &#x27;&#123;:02d&#125;:&#123;:02d&#125;:&#123;:02d&#125;,&#123;:03d&#125;&#x27;.format(h, m, s, ms)for kf in k_frames:    time1 = get_srt_timestamp(kf[&#x27;start&#x27;], fps)    time2 = get_srt_timestamp(kf[&#x27;end&#x27;], fps)    print(f&quot;&#123;time1&#125; --&gt; &#123;time2&#125;\\n&#123;kf[&#x27;text&#x27;]&#125;\\n&quot;)","categories":["opencv"],"tags":["opencv","tesseract"]},{"title":"GMiner-ETH-HuobiPool","url":"/2021/04/23/tensorflow/GMiner-ETH-HuobiPool/","content":"1. GMiner 说明ref： https://github.com/develsoftware/GMinerRelease\n\n1.1 下载 gminer_2_XX_windows64.zip, 解压后目录如下：\n\n├───miner.exe            # 主程序├───mine_aeternity.bat   # 快捷脚本├───...├───readme.txt           # 说明文档├───sample_config.txt    # 配置文件\n\n\n1.2 参数设置说明\n\n以在 火币矿池 挖 以太币 为例，\nhttps://pool.huobi.pe/pow/help/3/all\n主要参数如下： \n--algo:     算法,可省略； 对于以太币，默认 ethash--server:   矿池地址； 这里填写的是火币矿池--user:     火币矿池的子账户名；注意不是钱包地址，也不是邮箱号...\n\n\n1.3 使用方法（ 直接命令行运行 ）\n\n./miner --algo ethash --server stratum+tcp://es.huobipool.com:1800 --user shenyoyo0706\n\n\n也可以用配置文件运行, 或用快捷脚本运行， 参数设置方法是一样的。\n\n# Sample configuration file to mine BitcoinGold# options has same names as command line arguments# you can access to environment variables by %variable_name%# run &quot;miner --config sample_config.txt&quot;[common]algo=ethashtemplimit=80color=1api=10555logfile=miner.loglog_date=1log_newjob=0# Main pool[server]host=es.huobipool.comport=1800user=shenyoyo0706pass=x\n\n\n\n2. Huobi 网站\n2.1 注册火币网&#x2F;火币矿池账户 （统一的）火币网： https://www.huobi.pe/zh-cn/火币矿池： https://pool.huobi.pe/pow/火币矿池ETH连接规则: https://pool.huobi.pe/pow/help/3/all\n\n2.2 创建子账户\n\n子账户需要设置币种，这里选 ETH，即收益会按 以太币 结算。\n\n子账户名就是火币矿池的收款地址！\n\n这也意味着不用关注以太币的钱包地址有利有弊吧，优点： 可在火币平台上用火币账户直接交易，提现；不用记钱包地址。缺点： 收益默认都托管在平台上。\n\n\n\n\n2.3 开始挖矿\n\n\n开始挖矿后，一般等待15-30分钟后就能看到收益。\n\n2.4 监测矿机、收益\n\nweb版\n\n矿机监控： https://pool.huobi.pe/pow/miners\n收益监控： https://pool.huobi.pe/pow/earnings\n\napp版\n\n火币矿池 pro： http://eoshuobipool.com/zj.html\n\n名词解释：\n\n\n\n名称\n单位\n说明\n备注\n\n\n\n币价\nUSDT&#x2F;ETH\n3091\n美元&#x2F;以太币\n\n\n币价\nCNY&#x2F;ETH\n20311\n人民币&#x2F;以太币\n\n\n全网算力\nTH&#x2F;s\n541.07\n\n\n\n矿池算力\nTH&#x2F;s\n30.51\n\n\n\n预计日收益\nCNY&#x2F;M\n0.63\n人民币&#x2F;兆算力\n\n\n预计日收益\nETH&#x2F;M\n0.00003117\n\n\n\n我的算力\nMH&#x2F;s\n36.08\n\n\n\nETH收益\nETH&#x2F;d\n0.00128769\n\n\n\n\n2.5 交易、提现\n\napp版\n\n火币 pro： http://m.huobi.pe/zh-cn/download/\n\n提现流程：\n\n资产页面 –&gt; 币币 –(划转)–&gt; 法币 –(我要卖)–&gt; 散户收购（支持 微信&#x2F;支付宝&#x2F;银行卡）\n\n","categories":["tensorflow"],"tags":["GMiner","Huobi","ETH","RTX2070"]},{"title":"使用 scoop 安装管理 windows 软件（2）：github 加速","url":"/2021/03/23/scoop/%E4%BD%BF%E7%94%A8scoop%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86windows%E8%BD%AF%E4%BB%B6(2)-github%E5%8A%A0%E9%80%9F/","content":"\nref: (https://github.com/ScoopInstaller/Scoop)\n\n1. 安装 scoop1.1 安装 PowerShell 5.0 以上版本\nwin10： 已自带；\nwin7 x64： 下载 Win7AndW2K8R2-KB3191566-x64.zip，安装；\nref: https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-windows-powershell?view=powershell-6\n\n\n\n1.2 以当前Win账户运行PowerShellSet-ExecutionPolicy RemoteSigned -Scope CurrentUser\n1.3 安装 scoopgithubghproxyirm get.scoop.sh | iexcd ~curl -o scoop_install.ps1 https://ghproxy.net/https://raw.githubusercontent.com/ScoopInstaller/install/master/install.ps1# 修改 `scoop_install.ps1` 内容：(Get-Content scoop_install.ps1).replace(&#x27;https://github.com/ScoopInstaller/&#x27;, &#x27;https://ghproxy.net/https://github.com/ScoopInstaller/&#x27;) | Set-Content scoop_install.ps1# 安装.\\scoop_install.ps1\n\n使用默认安装时经常卡住，是因为 https://get.scoop.sh 其实指向了 https://raw.githubusercontent.com/，因而导致安装失败。\n对应的安装文件在这里： https://github.com/ScoopInstaller/Install/blob/master/install.ps1\n1.4 可用的镜像源\n镜像1:  https://hub.fastgit.xyz/\n镜像2:  https://github.com.cnpmjs.org/\n镜像3:  https://ghproxy.net/\n镜像4:  https://pd.zwc365.com/\n\n\n\n2. 使用 github (mirror) 更新 Scoop、 bucket 库githubghproxyscoop config SCOOP_REPO &#x27;https://github.com/ScoopInstaller/Scoop&#x27;scoop bucket add mainscoop bucket add extrasscoop bucket add versionsscoop bucket add portablesoft &#x27;https://github.com/shenbo/portablesoft&#x27;scoop bucket listscoop config SCOOP_REPO &#x27;https://ghproxy.net/https://github.com/ScoopInstaller/Scoop&#x27;scoop bucket add main &#x27;https://ghproxy.net/https://github.com/ScoopInstaller/Main&#x27;scoop bucket add extras &#x27;https://ghproxy.net/https://github.com/ScoopInstaller/Extras&#x27;scoop bucket add versions &#x27;https://ghproxy.net/https://github.com/ScoopInstaller/Versions&#x27;scoop bucket add portablesoft &#x27;https://ghproxy.net/https://github.com/shenbo/portablesoft&#x27;\n\n3 安装常用软件# main bucketsscoop install 7zipscoop install gitscoop install aria2scoop install concfgscoop install psreadlinescoop install posh-gitscoop install oh-my-poshscoop install ffmpeg# extra bucketsscoop install everythingscoop install trafficmonitorscoop install vscodescoop install windows-terminalscoop install forkscoop install snipastescoop install handbrakescoop install qbittorrentscoop intsall speccyscoop install vcredist2022# portablesoftscoop install goodsync_xscoop install mas_x# pythonscoop install python39    # versions# pip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simplescoop install pycharm     # extrascoop install cuda11.2# ref:  https://developer.nvidia.com/rdp/cudnn-archive# nodejsscoop install nodejs      # main# latexscoop install miktex      # mainscoop install texstudio   # extrascoop install mupdf\n\n3. 修改 scoop 安装文件源码， 加速软件源文件从 github 上的下载手动修改命令修改恢复默认cd ~\\scoop\\apps\\scoop\\current\\ | notepad lib\\install.ps1# line 245 左右，添加以下内容：# $urlstxt_content += &quot;$(handle_special_urls $url)`n&quot;$urlstxt_content += &quot;$(handle_special_urls $url)`n&quot;.Replace(&quot;https://github.com&quot;, &quot;https://hub.fastgit.xyz&quot;).Replace(&quot;https://raw.githubusercontent.com&quot;, &quot;https://raw.fastgit.org&quot;)$urlstxt_content += &quot;$(handle_special_urls $url)`n&quot;.Replace(&quot;https://github.com&quot;, &quot;https://ghproxy.net/https://github.com&quot;).Replace(&quot;https://raw.githubusercontent.com&quot;, &quot;https://ghproxy.net/https://raw.githubusercontent.com&quot;)$scoop_install_file = &#x27;~\\scoop\\apps\\scoop\\current\\lib\\install.ps1&#x27;$old_install_cmd = &#x27;$urlstxt_content += &quot;$(handle_special_urls $url)`n&quot;&#x27;$web_github = &quot;https://github.com&quot;$web_mirror = &quot;https://ghproxy.net/https://github.com&quot;$raw_github = &quot;https://raw.githubusercontent.com&quot; $raw_mirror = &quot;https://ghproxy.net/https://raw.githubusercontent.com&quot;$new_install_cmd = &#x27;&#123;0&#125;.Replace(&quot;&#123;1&#125;&quot;, &quot;&#123;2&#125;&quot;).Replace(&quot;&#123;3&#125;&quot;, &quot;&#123;4&#125;&quot;)&#x27; -f $old_install_cmd, $web_github, $web_mirror, $raw_github, $raw_mirror(Get-Content $scoop_install_file).replace($old_install_cmd, $new_install_cmd) | Set-Content $scoop_install_filecd ~\\scoop\\apps\\scoop\\currentgit checkout . \n\n\nPS. 快捷命令\n打开 powershell 配置文件：\n\ncode $PROFILE\n\nPSS. 自定义一个命令# https://shenbo.github.io/tags/powershell/# https://shenbo.github.io/tags/scoop/# https://gitee.com/scoop-bucket/# Set-Location ~chcp 65001Set-PSReadLineOption -PredictionSource Historyoh-my-posh init pwsh --config ~\\scoop\\persist\\oh-my-posh\\themes\\yo.omp.yaml | Invoke-Expressionfunction scoop-source &#123;    param (        [Parameter(Mandatory = $True, Position = 0)]        [String] $Name    )    $info = &quot;USEAGE:`n  scoop-source [github | mirror]`n&quot;    Write-Output $info    if ($Name -eq &#x27;github&#x27;) &#123;        scoop config SCOOP_REPO &#x27;https://github.com/ScoopInstaller/Scoop&#x27;        cd ~\\scoop\\buckets\\main         | git remote set-url origin &#x27;https://github.com/ScoopInstaller/Main&#x27;        cd ~\\scoop\\buckets\\extras       | git remote set-url origin &#x27;https://github.com/ScoopInstaller/Extras&#x27;        cd ~\\scoop\\buckets\\versions     | git remote set-url origin &#x27;https://github.com/ScoopInstaller/Versions&#x27;        cd ~\\scoop\\buckets\\portablesoft | git remote set-url origin &#x27;https://github.com/shenbo/portablesoft&#x27;        scoop bucket list        cd ~\\scoop\\apps\\scoop\\current   | git checkout .        git diff    &#125;    if ($Name -eq &#x27;mirror&#x27;) &#123;        scoop config SCOOP_REPO &#x27;https://gitee.com/scoop-bucket/Scoop&#x27;        cd ~\\scoop\\apps\\scoop\\current   | git checkout .   | git pull                $scoop_install_file = &#x27;~\\scoop\\apps\\scoop\\current\\lib\\install.ps1&#x27;        $old_install_cmd = &#x27;$urlstxt_content += &quot;$(handle_special_urls $url)`n&quot;&#x27;        $web_github = &quot;https://github.com&quot;        $web_mirror = &quot;https://ghproxy.net/https://github.com&quot;        $raw_github = &quot;https://raw.githubusercontent.com&quot;         $raw_mirror = &quot;https://ghproxy.net/https://raw.githubusercontent.com&quot;        $new_install_cmd = &#x27;&#123;0&#125;.Replace(&quot;&#123;1&#125;&quot;, &quot;&#123;2&#125;&quot;).Replace(&quot;&#123;3&#125;&quot;, &quot;&#123;4&#125;&quot;)&#x27; -f $old_install_cmd, $web_github, $web_mirror, $raw_github, $raw_mirror        (Get-Content $scoop_install_file).replace($old_install_cmd, $new_install_cmd) | Set-Content $scoop_install_file        git diff --pretty=oneline                        cd ~\\scoop\\buckets\\main         | git remote set-url origin &#x27;https://ghproxy.net/https://github.com/ScoopInstaller/Main&#x27;        cd ~\\scoop\\buckets\\extras       | git remote set-url origin &#x27;https://ghproxy.net/https://github.com/ScoopInstaller/Extras&#x27;        cd ~\\scoop\\buckets\\versions     | git remote set-url origin &#x27;https://ghproxy.net/https://github.com/ScoopInstaller/Versions&#x27;        cd ~\\scoop\\buckets\\portablesoft | git remote set-url origin &#x27;https://ghproxy.net/https://github.com/shenbo/portablesoft&#x27;        cd ~        scoop bucket list    &#125;&#125;\n\n","categories":["apps"],"tags":["scoop"]},{"title":"powershell配置(5)-ohmyposh3","url":"/2021/02/28/powershell/powershell%E9%85%8D%E7%BD%AE5-ohmyposh3/","content":"1.安装以scoop安装oh-my-posh3。\nscoop install oh-my-posh\n\n2. 配置文件新建、修改配置文件，运行:\nif (!(Test-Path -Path $PROFILE )) &#123; New-Item -Type File -Path $PROFILE -Force &#125;code $PROFILE\n\n加入以下内容：\nchcp 65001Set-PSReadLineOption -PredictionSource Historyoh-my-posh init pwsh --config ~\\scoop\\persist\\oh-my-posh\\themes\\yo.omp.json | Invoke-Expression\n\n\nref: https://ohmyposh.dev/docs/installation\n\n\n\n3. 自定义ys主题\n打开主题文件，路径： ~\\scoop\\persist\\oh-my-posh\\themes\\yo.omp.json\n\n&#123;  &quot;$schema&quot;: &quot;https://raw.githubusercontent.com/JanDeDobbeleer/oh-my-posh/main/themes/schema.json&quot;,  &quot;blocks&quot;: [    &#123;      &quot;alignment&quot;: &quot;left&quot;,      &quot;segments&quot;: [        &#123;          &quot;foreground&quot;: &quot;red&quot;,          &quot;style&quot;: &quot;plain&quot;,          &quot;template&quot;: &quot;&#123;&#123; if .Root &#125;&#125;% &#123;&#123; else &#125;&#125;&lt;blue&gt;# &lt;/&gt;&#123;&#123;end&#125;&#125;&quot;,          &quot;type&quot;: &quot;text&quot;        &#125;,        &#123;          &quot;foreground&quot;: &quot;cyan&quot;,          &quot;style&quot;: &quot;plain&quot;,          &quot;template&quot;: &quot;&#123;&#123; .UserName &#125;&#125;&lt;white&gt; @ &lt;/&gt;&lt;green&gt;&#123;&#123; .HostName &#125;&#125;&lt;/&gt;&quot;,          &quot;type&quot;: &quot;session&quot;        &#125;,        &#123;          &quot;foreground&quot;: &quot;lightYellow&quot;,          &quot;properties&quot;: &#123;            &quot;style&quot;: &quot;short&quot;          &#125;,          &quot;style&quot;: &quot;plain&quot;,          &quot;template&quot;: &quot;&lt;white&gt; in &lt;/&gt;&#123;&#123; .Path &#125;&#125; &quot;,          &quot;type&quot;: &quot;path&quot;        &#125;,        &#123;          &quot;foreground&quot;: &quot;cyan&quot;,          &quot;properties&quot;: &#123;            &quot;fetch_status&quot;: true          &#125;,          &quot;style&quot;: &quot;plain&quot;,          &quot;template&quot;: &quot; &#123;&#123; .HEAD &#125;&#125; &#123;&#123; .BranchStatus &#125;&#125;&#123;&#123; if .Working.Changed &#125;&#125; \\uf044 &#123;&#123; .Working.String &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; if and (.Staging.Changed) (.Working.Changed) &#125;&#125; |&#123;&#123; end &#125;&#125;&#123;&#123; if .Staging.Changed &#125;&#125; \\uf046 &#123;&#123; .Staging.String &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; if gt .StashCount 0&#125;&#125; \\uf692 &#123;&#123; .StashCount &#125;&#125;&#123;&#123; end &#125;&#125;&#123;&#123; if gt .WorktreeCount 0&#125;&#125; \\uf1bb &#123;&#123; .WorktreeCount &#125;&#125;&#123;&#123; end &#125;&#125; &quot;,          &quot;type&quot;: &quot;git&quot;        &#125;,        &#123;          &quot;foreground&quot;: &quot;white&quot;,          &quot;properties&quot;: &#123;            &quot;time_format&quot;: &quot;15:04:05&quot;          &#125;,          &quot;style&quot;: &quot;plain&quot;,          &quot;template&quot;: &quot;[&#123;&#123; .CurrentDate | date .Format &#125;&#125;]&quot;,          &quot;type&quot;: &quot;time&quot;        &#125;,        &#123;          &quot;foreground&quot;: &quot;red&quot;,          &quot;style&quot;: &quot;plain&quot;,          &quot;template&quot;: &quot; C: &#123;&#123; .Code &#125;&#125;&quot;,          &quot;type&quot;: &quot;exit&quot;        &#125;      ],      &quot;type&quot;: &quot;prompt&quot;    &#125;,    &#123;      &quot;type&quot;: &quot;newline&quot;    &#125;,    &#123;      &quot;alignment&quot;: &quot;left&quot;,      &quot;segments&quot;: [        &#123;          &quot;foreground&quot;: &quot;red&quot;,          &quot;style&quot;: &quot;plain&quot;,          &quot;template&quot;: &quot;$&quot;,          &quot;type&quot;: &quot;text&quot;        &#125;      ],      &quot;type&quot;: &quot;prompt&quot;    &#125;  ],  &quot;console_title_template&quot;: &quot;&#123;&#123;.User&#125;&#125; :: &#123;&#123;.Folder&#125;&#125; :: &#123;&#123;.Shell&#125;&#125;&quot;,  &quot;final_space&quot;: true,  &quot;version&quot;: 2&#125;\n\n\ndone!\n\n# 查看 unicode 字符[char] 0xf044[char] 0xf046[char] 0xf692[char] 0xf1bb\n","categories":["powershell"],"tags":["powershell"]},{"title":"caj2pdf：将知网caj文件转换为pdf","url":"/2021/02/04/office/caj2pdf%EF%BC%9A%E5%B0%86%E7%9F%A5%E7%BD%91caj%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BApdf/","content":"caj2pdf：将知网caj文件转换为pdfhttps://github.com/caj2pdf/caj2pdf/\n使用1. 环境和依赖（win10）\nPython 3.3+\nPyPDF2, https://github.com/mstamy2/PyPDF2\npypi安装： https://pypi.org/project/PyPDF2/\n\npip install PyPDF2\nmutool, https://mupdf.com/index.html\n实际上不用安装，只要把一个 mutool.exe 文件放进 caj2pdf/ 目录就行了。\n\n\n\n2. 官方用法\n\n\n克隆仓库： git clone https://github.com/caj2pdf/caj2pdf.git\n\n在caj2pdf/ 目录下运行。\n\n\n# 打印文件基本信息（文件类型、页面数、大纲项目数）python caj2pdf show [input_file]# 转换文件# - 输出文件名可省略python caj2pdf convert [input_file] -o/--output [output_file]# 从 CAJ 文件中提取大纲信息并添加至 PDF 文件# 遇到不支持的文件类型或 Bug 时，可用 CAJViewer 打印 PDF 文件，并用这条命令为其添加大纲python caj2pdf outlines [input_file] -o/--output [pdf_file]\n\n\n3. 拖拽caj文件自动转换（个人自用版）上述官方命令行的方法实际使用起来比较烦，\n我这里写个 bat 脚本支持拖拽文件实现格式转换。\n\n方法：\n\n在caj2pdf目录下，新建一个文件：caj2pdf_convert_by_drag.bat，内容如下：\n:: 切换目录cd /d %~dp0:: 转换文件python caj2pdf convert %*:: 暂停方便看error logpause\n\n使用：\n\n直接把 caj 论文文件拖到 bat 脚本文件上就可以了，\n生成的 pdf 文件与原 caj 文件的目录保持一致。\n\nPS个人修改后的全部代码见：https://github.com/shenbo/caj2pdf可直接下载使用。\n\nPS: 有坑 !!!\n官方的帮助文档并不友好\n只支持部分文件的转换，全凭运气\n\n","categories":["office"],"tags":["caj2pdf"]},{"title":"Win10-WSL-Ubuntu18.04-ROS-melodic 安装与配置","url":"/2020/12/22/wsl/wsl-ubuntu-ros/","content":"一、WSL 安装 Ubuntu18.04\nWin10 启用 WSL\n\n管理员身份运行：\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n\n重启电脑。\n\n打开 Microsoft Store，安装 Ubuntu18.04\n\n启动 Ubuntu18.04，创建账号、密码\n\n安装 Windows Terminal（可选）\n\n\n用 scoop 安装。\nscoop install windows-terminal\n\nwindows-terminal 简单设置：字体、启动目录。\n&#123;    &quot;guid&quot;: &quot;&#123;c6eaf9f4-32a7-5fdc-b5cf-066e8a4b1e40&#125;&quot;,    &quot;hidden&quot;: false,    &quot;fontFace&quot;: &quot;Jetbrains Mono&quot;,    &quot;fontSize&quot;: 11,    &quot;name&quot;: &quot;Ubuntu-18.04&quot;,    &quot;source&quot;: &quot;Windows.Terminal.Wsl&quot;,    &quot;startingDirectory&quot;: &quot;//wsl$/Ubuntu-18.04//home/bo&quot;,&#125;\n\n\n设置源，更新（可选）\n\n\n\n打开配置文件： sudo nano /etc/apt/sources.list, 替换成以下内容：\n# 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-updates main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-backports main restricted universe multiversedeb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-security main restricted universe multiverse# 预发布软件源，不建议启用# deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse# deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic-proposed main restricted universe multiverse\nref： https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/\n更新：sudo apt update\n升级：sudo apt upgrade\n\n安装 ZSH、oh-my-zsh（可选）\n\n参考 zsh &amp; oh-my-zsh 安装配置 \n二、安装 ROS-melodicref： http://wiki.ros.org/melodic/Installation/Ubuntu\n\n设置源，URL: http://mirrors.tuna.tsinghua.edu.cn/ros/\n\nsudo sh -c &#x27;. /etc/lsb-release &amp;&amp; echo &quot;deb http://mirrors.tuna.tsinghua.edu.cn/ros/ubuntu/ `lsb_release -cs` main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#x27;\n\n\n设置 keys\n\nsudo apt-key adv --keyserver &#x27;hkp://keyserver.ubuntu.com:80&#x27; --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654\n\n\n安装\n\nsudo apt update# 建议完全安装 (Recommended) # 含：ROS, rqt, rviz, robot-generic libraries, #    2D/3D simulators and 2D/3D perceptionsudo apt install ros-melodic-desktop-full\n\n\n设置环境变量\n\n# zshecho &quot;source /opt/ros/melodic/setup.zsh&quot; &gt;&gt; ~/.zshrcsource ~/.zshrc\n\n\n安装必要的依赖\n\nsudo apt install python-rosdepsudo rosdep initrosdep update\n\nsudo rosdep init 需要从 raw.githubusercontent.com 下载文件。\n如果报错，可以试下修改 hosts：\n# 打开hosts文件sudo nano /etc/hosts# 在文件末尾添加151.101.84.133  raw.githubusercontent.com\n\n\n\n测试一下\n\nroscore# 会出现几行 log：# started roslaunch server http://DESKTOP-FL776UK:56357/# ros_comm version 1.14.10### SUMMARY# ========## PARAMETERS#  * /rosdistro: melodic#  * /rosversion: 1.14.10# ...# started core service [/rosout]# \n\n\n测试一下小乌龟\n\n\n先在 win10 下安装 X Server：scoop install vcxsrv.\n\n然后依次在 Ubuntu18.04下打开三个 terminal：\n\n\n# terminal - 1roscore# terminal - 2rosrun turtlesim turtlesim_node# terminal - 3rosrun turtlesim turtle_teleop_key\n\n\nwindows terminal 分屏快捷键：\n\n\n\n快捷键\n功能\n\n\n\nctrl + shift + w\nclosePane\n\n\nalt + shift + -\nsplitPane: horizontal\n\n\nalt + shift + +\nsplitPane: vertical\n\n\n\n\n\n","categories":["WSL"],"tags":["Ubuntu","WSL","ROS"]},{"title":"树莓派与LCD屏1602a","url":"/2020/12/15/raspi/raspberry-pi-lcd-1602a/","content":"1. 1602a LCD屏\n接线端子表：\n\n\n\n\n序号\nLCD屏 16PIN\n树莓派 40PIN 物理序号\n备注\n\n\n\n1\nVSS\n06\nGND\n\n\n2\nVDD\n02\n5V\n\n\n3\nV0\n电位器\n对比度，0-5V\n\n\n4\nRS\n08\nGPIO-14\n\n\n5\nRW\n06\n写模式：接地\n\n\n6\nEN\n10\nGPIO-15\n\n\n7\nD0\n-\n\n\n\n8\nD1\n-\n\n\n\n9\nD2\n-\n\n\n\n10\nD3\n-\n\n\n\n11\nD4\n11\nGPIO-17\n\n\n12\nD5\n12\nGPIO-18\n\n\n13\nD6\n13\nGPIO-27\n\n\n14\nD7\n15\nGPIO-22\n\n\n15\nA\n串约500Ω电阻后接02\n背光正\n\n\n16\nK\n06\n背光负\n\n\n\n\n\n接线图\n\n\n\n2. 代码\n目录如下，就两个文件：\n\n.├───LCD1602a│   ├───1602.py     # 主程序，可显示时间、CPU、RAM的使用情况│   └───lcd1602.py  # 配置程序│...\n\nlcd1602.py# based on code from lrvick and LiquidCrystal# lrvic - https://github.com/lrvick/raspi-hd44780/blob/master/hd44780.py# LiquidCrystal - https://github.com/arduino/Arduino/blob/master/libraries/LiquidCrystal/LiquidCrystal.cppimport timeclass lcd1602:    # commands    LCD_CLEARDISPLAY \t\t= 0x01    LCD_RETURNHOME \t\t    = 0x02    LCD_ENTRYMODESET \t\t= 0x04    LCD_DISPLAYCONTROL \t\t= 0x08    LCD_CURSORSHIFT \t\t= 0x10    LCD_FUNCTIONSET \t\t= 0x20    LCD_SETCGRAMADDR \t\t= 0x40    LCD_SETDDRAMADDR \t\t= 0x80    # flags for display entry mode    LCD_ENTRYRIGHT \t\t        = 0x00    LCD_ENTRYLEFT \t\t        = 0x02    LCD_ENTRYSHIFTINCREMENT \t= 0x01    LCD_ENTRYSHIFTDECREMENT \t= 0x00    # flags for display on/off control    LCD_DISPLAYON \t\t= 0x04    LCD_DISPLAYOFF \t\t= 0x00    LCD_CURSORON \t\t= 0x02    LCD_CURSOROFF \t\t= 0x00    LCD_BLINKON \t\t= 0x01    LCD_BLINKOFF \t\t= 0x00    # flags for display/cursor shift    LCD_DISPLAYMOVE \t= 0x08    LCD_CURSORMOVE \t    = 0x00    # flags for display/cursor shift    LCD_DISPLAYMOVE \t= 0x08    LCD_CURSORMOVE \t\t= 0x00    LCD_MOVERIGHT \t\t= 0x04    LCD_MOVELEFT \t\t= 0x00    # flags for function set    LCD_8BITMODE \t\t= 0x10    LCD_4BITMODE \t\t= 0x00    LCD_2LINE \t\t\t= 0x08    LCD_1LINE \t\t\t= 0x00    LCD_5x10DOTS \t\t= 0x04    LCD_5x8DOTS \t\t= 0x00    def __init__(self, pin_rs=14, pin_e=15, pins_db=[17, 18, 27, 22], GPIO = None):        if not GPIO:            import RPi.GPIO as GPIO        self.GPIO = GPIO        self.pin_rs = pin_rs        self.pin_e = pin_e        self.pins_db = pins_db        self.GPIO.setmode(GPIO.BCM)        self.GPIO.setup(self.pin_e, GPIO.OUT)        self.GPIO.setup(self.pin_rs, GPIO.OUT)        for pin in self.pins_db:            self.GPIO.setup(pin, GPIO.OUT)        self.write4bits(0x33) # initialization        self.write4bits(0x32) # initialization        self.write4bits(0x28) # 2 line 5x7 matrix        self.write4bits(0x0C) # turn cursor off 0x0E to enable cursor        self.write4bits(0x06) # shift cursor right        self.displaycontrol = self.LCD_DISPLAYON | self.LCD_CURSOROFF | self.LCD_BLINKOFF        self.displayfunction = self.LCD_4BITMODE | self.LCD_1LINE | self.LCD_5x8DOTS        self.displayfunction |= self.LCD_2LINE        &quot;&quot;&quot; Initialize to default text direction (for romance languages) &quot;&quot;&quot;        self.displaymode =  self.LCD_ENTRYLEFT | self.LCD_ENTRYSHIFTDECREMENT        self.write4bits(self.LCD_ENTRYMODESET | self.displaymode)   #  set the entry mode        self.clear()    def begin(self, cols, lines):        if (lines &gt; 1):            self.numlines = lines            self.displayfunction |= self.LCD_2LINE            self.currline = 0    def home(self):        self.write4bits(self.LCD_RETURNHOME)    # set cursor position to zero        self.delayMicroseconds(3000)            # this command takes a long time!            def clear(self):        self.write4bits(self.LCD_CLEARDISPLAY)  # command to clear display        self.delayMicroseconds(3000)            # 3000 microsecond sleep, clearing the display takes a long time    def setCursor(self, col, row):        self.row_offsets = [ 0x00, 0x40, 0x14, 0x54 ]        if ( row &gt; self.numlines ):                 row = self.numlines - 1         # we count rows starting w/0        self.write4bits(self.LCD_SETDDRAMADDR | (col + self.row_offsets[row]))    def noDisplay(self):         &quot;&quot;&quot; Turn the display off (quickly) &quot;&quot;&quot;        self.displaycontrol &amp;= ~self.LCD_DISPLAYON        self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)    def display(self):        &quot;&quot;&quot; Turn the display on (quickly) &quot;&quot;&quot;        self.displaycontrol |= self.LCD_DISPLAYON        self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)    def noCursor(self):        &quot;&quot;&quot; Turns the underline cursor on/off &quot;&quot;&quot;        self.displaycontrol &amp;= ~self.LCD_CURSORON        self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)    def cursor(self):        &quot;&quot;&quot; Cursor On &quot;&quot;&quot;        self.displaycontrol |= self.LCD_CURSORON        self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)    def noBlink(self):        &quot;&quot;&quot; Turn on and off the blinking cursor &quot;&quot;&quot;        self.displaycontrol &amp;= ~self.LCD_BLINKON        self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)    def noBlink(self):        &quot;&quot;&quot; Turn on and off the blinking cursor &quot;&quot;&quot;        self.displaycontrol &amp;= ~self.LCD_BLINKON        self.write4bits(self.LCD_DISPLAYCONTROL | self.displaycontrol)    def DisplayLeft(self):        &quot;&quot;&quot; These commands scroll the display without changing the RAM &quot;&quot;&quot;        self.write4bits(self.LCD_CURSORSHIFT | self.LCD_DISPLAYMOVE | self.LCD_MOVELEFT)    def scrollDisplayRight(self):        &quot;&quot;&quot; These commands scroll the display without changing the RAM &quot;&quot;&quot;        self.write4bits(self.LCD_CURSORSHIFT | self.LCD_DISPLAYMOVE | self.LCD_MOVERIGHT);    def leftToRight(self):        &quot;&quot;&quot; This is for text that flows Left to Right &quot;&quot;&quot;        self.displaymode |= self.LCD_ENTRYLEFT        self.write4bits(self.LCD_ENTRYMODESET | self.displaymode);    def rightToLeft(self):        &quot;&quot;&quot; This is for text that flows Right to Left &quot;&quot;&quot;        self.displaymode &amp;= ~self.LCD_ENTRYLEFT        self.write4bits(self.LCD_ENTRYMODESET | self.displaymode)    def autoscroll(self):        &quot;&quot;&quot; This will &#x27;right justify&#x27; text from the cursor &quot;&quot;&quot;        self.displaymode |= self.LCD_ENTRYSHIFTINCREMENT        self.write4bits(self.LCD_ENTRYMODESET | self.displaymode)    def noAutoscroll(self):         &quot;&quot;&quot; This will &#x27;left justify&#x27; text from the cursor &quot;&quot;&quot;        self.displaymode &amp;= ~self.LCD_ENTRYSHIFTINCREMENT        self.write4bits(self.LCD_ENTRYMODESET | self.displaymode)    def write4bits(self, bits, char_mode=False):        &quot;&quot;&quot; Send command to LCD &quot;&quot;&quot;        self.delayMicroseconds(1000) # 1000 microsecond sleep        bits=bin(bits)[2:].zfill(8)        self.GPIO.output(self.pin_rs, char_mode)        for pin in self.pins_db:            self.GPIO.output(pin, False)        for i in range(4):            if bits[i] == &quot;1&quot;:                self.GPIO.output(self.pins_db[::-1][i], True)        self.pulseEnable()        for pin in self.pins_db:            self.GPIO.output(pin, False)        for i in range(4,8):            if bits[i] == &quot;1&quot;:                self.GPIO.output(self.pins_db[::-1][i-4], True)        self.pulseEnable()    def delayMicroseconds(self, microseconds):        seconds = microseconds / float(1000000)        # divide microseconds by 1 million for seconds        time.sleep(seconds)    def pulseEnable(self):        self.GPIO.output(self.pin_e, False)        self.delayMicroseconds(1)                # 1 microsecond pause - enable pulse must be &gt; 450ns         self.GPIO.output(self.pin_e, True)        self.delayMicroseconds(1)                # 1 microsecond pause - enable pulse must be &gt; 450ns         self.GPIO.output(self.pin_e, False)        self.delayMicroseconds(1)                # commands need &gt; 37us to settle    def message(self, text):        &quot;&quot;&quot; Send string to LCD. Newline wraps to second line&quot;&quot;&quot;        for char in text:            if char == &#x27;\\n&#x27;:                self.write4bits(0xC0) # next line            else:                self.write4bits(ord(char),True)if __name__ == &#x27;__main__&#x27;:    lcd = lcd1602()    lcd.clear()    lcd.message(&quot; LCD 1602 Test \\n123456789ABCDEF&quot;)\n\n1602.pyimport osimport timefrom lcd1602 import *from datetime import datetime# run commanddef run_cmd(cmd):    p = os.popen(cmd).readline().strip().split()    return pdef now():    return datetime.now().strftime(&#x27;%Y-%m-%d %a \\n%H:%M:%S&#x27;)def cpu():    cpu_temp = run_cmd(&#x27;vcgencmd measure_temp&#x27;)    cpu_info = run_cmd(&quot;top -bn1 | awk &#x27;/Cpu\\(s\\)/&#x27;&quot;)    cpu_usage = 1 - float(cpu_info[7])/100.0    status = &#x27;CPU Temp: &#123;&#125;\\n&#x27;.format(cpu_temp[0].replace(&quot;temp=&quot;, &quot;&quot;))    status += &#x27;    Used: &#123;:.2%&#125;&#x27;.format(cpu_usage)    return statusdef ram():    ram_info = run_cmd(&quot;free -m | awk &#x27;/Mem/&#x27;&quot;)    ram_usage = (int(ram_info[1]) - int(ram_info[6])) / float(ram_info[1])    status = &#x27;RAM Totl: &#123;&#125;M\\n&#x27;.format(ram_info[1])    status += &#x27;    Used: &#123;:.2%&#125;&#x27;.format(ram_usage)    return statusdef ip():    ip = run_cmd(&quot;sudo ifconfig wlan0 | awk &#x27;/inet/&#x27;&quot;)    return &#x27;IP Addr: \\n  &#123;&#125;&#x27;.format(ip[1])print(now(), cpu(), ram(), ip(), sep=&#x27;\\n&#x27;)lcd = lcd1602()lcd.clear()while(1):    lcd.clear()    lcd.message(now())    time.sleep(10)    lcd.clear()    lcd.message(cpu())    time.sleep(10)    lcd.clear()    lcd.message(ram())    time.sleep(10)\n","categories":["raspi"],"tags":["raspberry-pi"]},{"title":"用树莓派和墨水屏做一个 mnist-clock","url":"/2020/12/03/raspi/raspberry-pi-epaper-mnist-clock/","content":"1. 墨水屏\n型号：微雪 2.9inch e-Paper Module， 带驱动板，8PIN\n\n工作电压：3.3V&#x2F;5V\n\n通信接口：SPI\n\n分辨率：296 x 128\n\n显示颜色：黑、白\n\n局部刷新：0.3s\n\n全局刷新 ：2s\n\n接线表：\n\n\n\n\n\n墨水屏 8PIN\n树莓派 40PIN 物理序号\n备注\n\n\n\nVCC\n1\n3.3V\n\n\nGND\n6\nGND\n\n\nDIN\n19\n\n\n\nCLK\n23\n\n\n\nCS\n24\n\n\n\nDC\n22\n\n\n\nRST\n11\n\n\n\nBUSY\n18\n\n\n\n\n\n2. 树莓派基本配置\n详细步骤见帮助文档: https://www.waveshare.net/wiki/2.9inch_e-Paper_Module\n程序源码在 github 也有: https://github.com/waveshare/e-Paper\n1.下载git clone https://github.com/waveshare/e-Paper.git --depth 1目录如下，有用的文件就几个：\n\n├───Arduino├───RaspberryPi&amp;JetsonNano│   ├───c│   │   └─── ...│   └───python│       │   readme_rpi_CN.txt│       │   setup.py│       │   ...│       ││       ├───examples│       │       epd_2in9bc_test.py  # 测试程序│       │       ...│       ││       ├───lib│       │   └───waveshare_epd│       │           epd2in9.py      # 主逻辑│       │           epdconfig.py    # 配置文件│       │           __init__.py│       │           ...│       ││       └───pic                │               2in9.bmp            # 图片│               Font.ttc            # 字体文件，文泉驿，含中文字体│               ...└─── ...\n\n\n2.打开 SPI\n\nsudo raspi-config# 选择Interfacing Options -&gt; SPI -&gt; Yes 开启SPI接口\n\n\n3.安装依赖(python3)\n\n# sudo apt-get update# sudo apt-get install python3-pipsudo apt-get install python3-numpysudo apt-get install python3-pilsudo pip3 install RPi.GPIOsudo pip3 install spidev\n\n\n4.运行测试程序\n\ncd e-Paper/&#x27;RaspberryPi&amp;JetsonNano&#x27;/cd python/examplessudo python3 epd_2in9bc_test.py\n\n3. 处理 mnist 数据集，提取 index\n下载 mnist.npzhttps://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n\n我们使用x_train的60000个数字，把0-9对应的序号(index)，提取出来，保存到 mnist_index.json\n\n\nimport numpy as npimport jsonimg_rows, img_cols = 28, 28# the data, split between train and test setspath = &#x27;mnist.npz&#x27;with np.load(path) as f:    x_train, y_train = f[&#x27;x_train&#x27;], f[&#x27;y_train&#x27;]    x_test, y_test = f[&#x27;x_test&#x27;], f[&#x27;y_test&#x27;]print(&#x27;x_train.shape: &#123;&#125;, y_train.shape: &#123;&#125;&#x27;.format(x_train.shape, y_train.shape))print(&#x27;x_test.shape: &#123;&#125;, y_test.shape: &#123;&#125;&#x27;.format(x_test.shape, y_test.shape))print(x_train[0], y_train[0])print(x_test[0], y_test[0])# 创建一个字典，keys 是0-9，values为空的list，后面将序号存进去idx_dict = &#123;&#125;for i in range(10):    idx_dict[i] = []print(idx_dict)# 将序号存进去for idx in range(60000):    num = y_train[idx]    idx_dict[num].append(idx)    # if idx == 60: break# print(idx_dict)# 转为 json 格式， 保存idx_json = json.dumps(idx_dict)# print(idx_json)with open(&#x27;mnist_index.json&#x27;, &#x27;w&#x27;) as f:    json.dump(idx_dict, f)# 读取 json 文件# with open(&#x27;mnist_index.json&#x27;, &#x27;r&#x27;) as f:#     data = json.load(f)# print(data)\n\n4. 先测试下用 opencv 显示时间import numpy as npimport jsonimport randomimport cv2import time# load mnist datasetpath = &#x27;mnist.npz&#x27;with np.load(path) as f:    x_train, y_train = f[&#x27;x_train&#x27;], f[&#x27;y_train&#x27;]    x_test, y_test = f[&#x27;x_test&#x27;], f[&#x27;y_test&#x27;]with open(&#x27;mnist_index.json&#x27;, &#x27;r&#x27;) as f:    idx_dict = json.load(f)for i in range(10):    print(i, len(idx_dict[str(i)]))def get_mnist_num(num):    idxs = idx_dict[str(num)]    idx = random.choice(idxs)    return x_train[idx]gap = np.zeros((28, 10))for i in [8, 9, 18, 19]:    for j in [4,5,6,]:        gap[i][j] = 255last_time = [-1, -1, -1, -1, -1, -1]last_imgs = np.zeros((6, 28, 28))while True:    now = time.localtime(time.time())    sec, mnt, hour = now.tm_sec, now.tm_min, now.tm_hour    s1, s2 = sec//10, sec%10    m1, m2 = mnt//10, mnt%10    h1, h2 = hour//10, hour%10    now_time = [h1, h2, m1, m2, s1, s2]    print(last_time, now_time)    for i in range(6):        if last_time[i] != now_time[i]:            last_imgs[i] = get_mnist_num(now_time[i])            last_time[i] = now_time[i]    img = np.hstack((last_imgs[0], last_imgs[1], gap,                     last_imgs[2], last_imgs[3], gap,                     last_imgs[4], last_imgs[5]))    cv2.imshow(&#x27;num&#x27;, img)    # cv2.imwrite(&#x27;mnist-clock.png&#x27;, img)    cv2.waitKey(100)\n\n\n\n5. 在墨水屏显示时间详见 epd29_mnist_clock.py\n# epd29_mnist_clock.py import sysimport osimport loggingimport jsonimport numpy as npimport randomimport timeimport tracebackfrom PIL import Image, ImageDraw, ImageFontfrom lib import epd2in9logging.basicConfig(level=logging.DEBUG)font = ImageFont.truetype(&#x27;lib/Font.ttc&#x27;, 18)# load mnist datasetwith np.load(&#x27;mnist.npz&#x27;) as f:    x_train, y_train = f[&#x27;x_train&#x27;], f[&#x27;y_train&#x27;]    x_test, y_test = f[&#x27;x_test&#x27;], f[&#x27;y_test&#x27;]with open(&#x27;mnist_index.json&#x27;, &#x27;r&#x27;) as f:    idx_dict = json.load(f)gap = np.ones((28, 10)) * 255for i in [8, 9, 18, 19]:    for j in [4,5,6,]:        gap[i][j] = 0def get_mnist_num(num):    idxs = idx_dict[str(num)]    idx = random.choice(idxs)    return 255 - x_train[idx]# === 0. init logging.info(&#x27;epd2in9 Demo&#x27;)epd = epd2in9.EPD()logging.info(&#x27;init and Clear&#x27;)epd.init(epd.lut_full_update)epd.Clear(0xFF)# === 1. show date &amp; timelogging.info(&#x27;show date &amp; time&#x27;)def YMD(draw, x1=10, y1=5, x2=160, y2=30):    draw.rectangle((x1, y1, x2, y2), fill=255)    draw.text((x1, y1), time.strftime(&#x27;%Y-%m-%d  %a&#x27;), font = font, fill=0)def HMS(draw, x1=180, y1=5, x2=280, y2=30):    draw.rectangle((x1, y1, x2, y2), fill = 255)    draw.text((x1, y1), time.strftime(&#x27;%H:%M&#x27;), font = font, fill=0)    def MNIST(img, draw, mnist_img, x1=8, y1=30, x2=280, y2=120):    draw.rectangle((x1, y1, x2, y2), fill = 255)    mnist_img = Image.fromarray(mnist_img)    mnist_img = mnist_img.resize((38*2*3, 28*3))    img.paste(mnist_img, (x1, y1))# partial updatetime_image = Image.new(&#x27;1&#x27;, (epd.height, epd.width), 255)time_draw = ImageDraw.Draw(time_image)last_time = [-1, -1, -1, -1]last_imgs = np.ones((4, 28, 28)) * 255while (True):    now = time.localtime(time.time())    sec, mnt, hour = now.tm_sec, now.tm_min, now.tm_hour    m1, m2 = mnt//10, mnt%10    h1, h2 = hour//10, hour%10    now_time = [h1, h2, m1, m2]    print(f&#x27;&#123;hour&#125;:&#123;mnt&#125;:&#123;sec&#125;&#x27;, last_time, now_time)    if -1 in last_time or (mnt == 0 and sec &lt; 5) :        logging.info(&#x27;partial update&#x27;)        epd.init(epd.lut_full_update)        epd.Clear(0xFF)        time.sleep(1)        logging.info(&#x27;partial update&#x27;)        epd.init(epd.lut_partial_update)        epd.Clear(0xFF)        YMD(time_draw)        time.sleep(1)    for i in range(4):        if last_time[i] != now_time[i]:            last_imgs[i] = get_mnist_num(now_time[i])            last_time[i] = now_time[i]            mnist_image = np.hstack((last_imgs[0], last_imgs[1], gap,                                     last_imgs[2], last_imgs[3]))            HMS(time_draw)              MNIST(time_image, time_draw, mnist_image)                        epd.display(epd.getbuffer(time_image))            time.sleep(1)        time.sleep(3)# Clear        logging.info(&#x27;Clear...&#x27;)epd.init(epd.lut_full_update)epd.Clear(0xFF)# Sleeplogging.info(&#x27;Goto Sleep...&#x27;)epd.sleep()epd.Dev_exit()\n\n\n所有的文件把有用的几个文件拉出来放在一个文件夹里。\n.├── cv2_mnist_clock.py     # 测试用 opencv 显示时间├── epd29_mnist_clock.py   # 在墨水屏显示时间├── epd_2in9_test.py├── lib│ ├── epd2in9.py│ ├── epdconfig.py│ ├── Font.ttc│ └── __init__.py├── mnist_index_gen.py     # 提取序号(index)├── mnist_index.json       # 保存序号(index)，以 json 格式└── mnist.npz              # mnist 原始数据集 \n\n完整代码:https://github.com/shenbo/mnist-clock\n效果\n\n\n灵感: https://github.com/dheera/mnist-clock\n","categories":["raspi"],"tags":["raspberry-pi","mnist-clock"]},{"title":"家庭内网升级","url":"/2020/11/16/network/Home-Network%E5%AE%B6%E5%BA%AD%E5%86%85%E7%BD%91%E5%8D%87%E7%BA%A7/","content":"之前用的小米路由3，小两房勉强够用。\n搬到新家之后就明显不给力了。\n户型图新家的户型：\n\n\n交付时的布线：\n\n\n\n房间\n网口\n\n\n\n弱电箱-客厅前墙（电视）\n网线 + 有线电视同轴线\n\n\n弱电箱-客厅后墙\n网线 + 电话线\n\n\n弱电箱-主卧\n网线 + 电话线\n\n\n弱电箱-次卧\n网线 + 电话线\n\n\n弱电箱-书房\n网线 + 电话线\n\n\n弱电箱-卫生间\n电话线\n\n\n\n网线和有线电视&#x2F;电话线都是两根线同走一个穿线管\n电话线其实也是8芯网线，只不过接口是电话接口\n\n\n\n1. 网络方案 V11.1 网络拓扑\n小米路由器3放在电视墙那里，WAN口接弱电箱的光猫，LAN口接电视。\n书房的网线接光猫。\n\n\n\n\n缺点:\n\n书房电脑和电视、无线设备不在一个网段，\n光猫比较拉跨，时不时会死机。\n\n\n于是，就考虑把电视墙那里的有线电视同轴线换成网线，这样就可以从小米路由器的LAN口接回弱电箱了。\n2. 网络方案 V22.1 换线起初比较担心不好穿线，犹豫了好久。\n后来试了一下把网线固定死，只拔有线电视同轴线。\n嗯，可以拽得动，还算比较轻松。那就开使换线。\n网线哪里找？直接把去主卧的那根电话线抽了出来：）\n用电工胶带把有线和网线搭一起大约30cm，缠好。\n顺利拽出来了。\n2.2 压头借了一套压线钳、信号检测器，顺利整好。\n终于解决了电视墙回弱电箱的问题。\n2.3 弱电箱中转弱电箱里随便用了一个网线延长器把回去的那个网线和书房的网线对接即可。\n\n绿联: 网线转接头对接头 RJ45网线延长器\n\n2.4 群晖 NAS买了群晖 218+ 之后，有线网口也不够了。\n一开始把 NAS 放到电视下面，但是没几天进风口就全是灰尘。\n群晖噪音也很大，晚上很明显。\n因此，又在弱电箱里加了一个 TP-LINK 的交换机（5口千兆）。\n把群晖搬到了弱电箱旁边的柜子里。\n啊呦，，，柜子底板是悬空的，共振起来噪音更大，简直不能忍。\n在群晖底下垫了个鼠标垫，好了一点。\n2.5 换路由器无线信号其实也成问题，路由器放在电视墙那边，信号都被墙挡住了。\n\nWIFI 5G 信号只有客厅有。\nWIFI 2G 主卧室信号只有一半，卫生间和书房的信号关上门就经常中断了。\n\n后来换了个小米 AX3600，块头超大，形状也忒怪异，太占地方。\n好的是WIFI 信号的确比原来好多了，不再出现网络中断的现象。\n但书房角落还是不是满格。。。\n2.6 网络拓扑\n\n\n3. 网络方案 V3后来研究了一段 MESH 组网，还是放弃了。\n贵且不说，无线信号再好也抵不上一根破5类网线。\n最后觉得再折腾一次，玩个大的，这次把全屋的网线全换两根的。\n\n路由器放到客厅后墙沙发那一侧，直接正对过道，这样信号就不会受墙体阻挡了。\nNAS 搬到书房，解决噪音的问题。\n有线网口都改为双网口：弱电箱-电视墙、弱电箱-客厅后墙、弱电箱-书房\n\n3.1 材料、工具准备\n山泽(SAMZHE)压线钳\n信号测试器\n水晶头，六类， 50个\n网线， 六类， 50m×2卷\n双网口面板， 86型，千兆双口\n\n网线六类足够了，基本能满足播放 NAS 影音的需求。\n3.2 换线换线都是体力活，略。\n3.3 最终网络拓扑\n\n\n\ndone！\n全屋5G美滋滋。\n","categories":["synology"],"tags":["network"]},{"title":"树莓派 tensorflow-lite 目标检测","url":"/2020/10/24/raspi/raspberry-pi-tensorflow-lite-object-detect/","content":"0. 安装 tflite-runtimeref: https://tensorflow.google.cn/lite/guide/python\npip3 install https://dl.google.com/coral/python/tflite_runtime-2.1.0.post1-cp37-cp37m-linux_armv7l.whl\n\n1. tensorflow官方示例tensorflow 提供了一个示例, 基于picamera的。\nref: https://github.com/tensorflow/examples/blob/master/lite/examples/object_detection/raspberry_pi/\n# 1. Clonegit clone https://github.com/tensorflow/examples --depth 1# 2. 进入文件夹cd examples/lite/examples/object_detection/raspberry_pi# 文件夹里总共5个文件# README.md              #  # annotation.py          # 用于绘制方框、标签  # detect_picamera.py     # 主程序# download.sh            # 下载 python 依赖包、已训练的模型 # requirements.txt       ## 3. 下载已训练好的模型bash download.sh /tmp# - 下载 python 依赖包： numpy  picamera  Pillow# - 下载 coco_ssd_mobilenet_v1_1.0_quant_2018_06_29.zip, 里面有两个文件：detect.tflite, labelmap.txt，这个label文件有乱码# - 下载正确的label文件： https://dl.google.com/coral/canned_models/coco_labels.txt# 4. 运行程序python3 detect_picamera.py  --model /tmp/detect.tflite --labels /tmp/coco_labels.txt\n\n2. 使用 opencv 调用 usb camera\n\n我这里没有 picamera，只有一个老的 usb 接口的摄像头。 但 picamera 的 API 不支持 USB 摄像头。\n下面改一下代码 使用 opencv 来调用 usb camera.\n&quot;&quot;&quot;Example using TF Lite to detect objects with the Raspberry USB camera.Hardware:- Pi 3b+- usb cameraSoftware- python 3.7.3- tflite runtime 2.1- opencvDataset- coco_ssd_mobilenet_v1_1.0_quant_2018_06_29.zip&quot;&quot;&quot;import reimport timeimport numpy as npimport cv2from tflite_runtime.interpreter import Interpreterargs_camera_width = 640args_camera_height = 480args_model = &#x27;detect.tflite&#x27;args_labels = &#x27;coco_labels.txt&#x27;args_threshold = 0.4def load_labels(path):    &quot;&quot;&quot;Loads the labels file. Supports files with or without index numbers.&quot;&quot;&quot;    with open(path, &#x27;r&#x27;, encoding=&#x27;utf-8&#x27;) as f:        lines = f.readlines()        labels = &#123;&#125;        for row_number, content in enumerate(lines):            pair = re.split(r&#x27;[:\\s]+&#x27;, content.strip(), maxsplit=1)            if len(pair) == 2 and pair[0].strip().isdigit():                labels[int(pair[0])] = pair[1].strip()            else:                labels[row_number] = pair[0].strip()    return labelsdef detect_objects(interpreter, image, threshold):    # 识别：张量填充，运行推理    interpreter.set_tensor(input_details[0][&#x27;index&#x27;], input_image)    interpreter.invoke()    # 结果输出    boxes = interpreter.get_tensor(output_details[0][&#x27;index&#x27;])    classes = interpreter.get_tensor(output_details[1][&#x27;index&#x27;])    scores = interpreter.get_tensor(output_details[2][&#x27;index&#x27;])    boxes = np.squeeze(boxes)    classes = np.squeeze(classes).astype(np.int32)    scores = np.squeeze(scores)    # print(&#x27;boxes:&#x27;, boxes)    # print(&#x27;classes:&#x27;, classes)    # print(&#x27;scores:&#x27;, classes)    # 设置识别阈值，剔除不好的结果    results = []    for i, score in enumerate(scores):        if score &gt;= threshold:            result = &#123;                &#x27;box&#x27;: boxes[i],                &#x27;class_id&#x27;: classes[i],                &#x27;score&#x27;: scores[i]            &#125;            results.append(result)    return results def annotate_objects(image, results):  for rst in results:    ymin, xmin, ymax, xmax = rst[&#x27;box&#x27;]    class_id = rst[&#x27;class_id&#x27;]    name = labels_dict[class_id]    score = rst[&#x27;score&#x27;]    xmin = int(xmin * args_camera_width)    xmax = int(xmax * args_camera_width)    ymin = int(ymin * args_camera_height)    ymax = int(ymax * args_camera_height)    cv2.rectangle(image, (xmin, ymin), (xmax, ymax), (0, 255, 0))    txt = f&#x27;&#123;name&#125; &#123;score:.2%&#125;&#x27;    cv2.putText(image, txt, (xmin, ymin), 0, 1, (255, 255, 255), 2)# 1. 读取 labelslabels_dict = load_labels(args_labels)print(&#x27;labels_dict: \\n &#x27;, labels_dict)# 2. 加载模型文件interpreter = Interpreter(args_model)interpreter.allocate_tensors()input_details = interpreter.get_input_details()output_details = interpreter.get_output_details()# print(&#x27;input_details：\\n &#x27;, input_details)# print(&#x27;output_details：\\n &#x27;, output_details)# 3. 打开摄像头camera = cv2.VideoCapture(0)camera.set(3, args_camera_height)camera.set(4, args_camera_width)frame_rate_calc = 1.0freq = cv2.getTickFrequency()# 4. 目标识别while (True):    # 4.1 计算FPS, 开始计时    t1 = cv2.getTickCount()    # 4.2 从摄像头读取图片， 缩放为 300x300    ret, frame = camera.read()    input_image = cv2.resize(frame, (300, 300))    input_image = np.expand_dims(input_image, axis=0)    input_image = np.uint8(np.float32(input_image))    # 4.3 识别：张量填充，运行推理       results = detect_objects(interpreter, input_image, args_threshold)        print(f&#x27;--- &#123;time.strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)&#125; ---&#x27;)    for rst in results:        box = rst[&#x27;box&#x27;]        class_id = rst[&#x27;class_id&#x27;]        name = labels_dict[class_id]        score = rst[&#x27;score&#x27;]                print(f&#x27;* &#123;name&#125; : &#123;score:.2%&#125;  @ &#123;box&#125;&#x27;)        # 4.4 将识别结果绘制在原图上    annotate_objects(frame, results)    # 4.5 将 FPS 绘制在原图上    txt = f&#x27;FPS: &#123;frame_rate_calc:.2f&#125;&#x27;    cv2.putText(frame, txt, (20, 30), 0, 1, (0, 255, 255), 2)    # 4.6 显示图片    cv2.imshow(&#x27;Object detect&#x27;, frame)    # 4.7 更新计算 FPS     t2 = cv2.getTickCount()    frame_rate_calc = freq / (t2 - t1)    cv2.waitKey(1)camera.release()cv2.destroyAllWindows()\n","categories":["raspi"],"tags":["raspberry-pi","tensorflow","tflite","object_detection"]},{"title":"vscode设置python运行时的相对路径","url":"/2020/10/13/apps/vscode-python%E8%BF%90%E8%A1%8C%E6%97%B6%E7%9A%84%E7%9B%B8%E5%AF%B9%E8%B7%AF%E5%BE%84/","content":"问题在vscode中运行python时，相对路径有点迷惑，总是配置不好，导致在pycharm中可以顺利运行，到vscode里就找不到文件了。\n这里修改vscode的设置：将’python的运行目录’ 设置成 ‘python文件当前的目录’。\nVSCode 设置打开 setting.json, 加入：\n&#123;    &quot;python.terminal.executeInFileDir&quot;: true,&#125;\n\n\n或在设置里找到python插件中的相应选项，勾选即可。\n\n","categories":["apps"],"tags":["vscode","python"]},{"title":"树莓派小车L298N驱动","url":"/2020/10/07/raspi/raspberry-pi-%E5%B0%8F%E8%BD%A6L298N%E9%A9%B1%E5%8A%A8/","content":"0.1 树莓派GPIO定义ref: https://www.raspberrypi.org/documentation/usage/gpio/\n0.2 L298N端口定义\n\n\n名称\n符号\n备注\n\n\n\n电源\nVCC\n驱动电源，接+5V~+35V\n\n\n\nGND\n接地\n\n\n\n5V\n逻辑控制电源，5V 注1\n\n\n控制端\nENA、ENB\n两路  注2\n\n\n\nIN1IN2、IN3IN4\n高电平有效，接树莓派\n\n\n输出端\nOUT1~OUT4\n接电机\n\n\n\n注1：当驱动电压过高时（&gt;12V），逻辑控制电源单独接5V电源。 一般悬空即可。注2：使能端直接跳线与5V连接。这个5V是驱动电源经过78M05模块输出的。\n\n\n\n1. 接线\n\n\n\n\nIN1 -&gt; PIN 11    # 左前进 \nIN2 -&gt; PIN 12    # 左后退 \nIN3 -&gt; PIN 16    # 右前进 \nIN4 -&gt; PIN 15    # 右后退\n\n2. 程序import RPi.GPIO as GPIOimport timeIN1 = 11  # IN1, 左前进 IN2 = 12  # IN2, 左后退 IN3 = 16  # IN3, 右前进 IN4 = 15  # IN4, 右后退 # GPIO.setwarnings(False)def init():        GPIO.setmode(GPIO.BOARD)    GPIO.setup(IN1,GPIO.OUT)    GPIO.setup(IN2,GPIO.OUT)    GPIO.setup(IN3,GPIO.OUT)    GPIO.setup(IN4,GPIO.OUT)def forward(sleep_time):    init()    GPIO.output(IN1,GPIO.HIGH)    GPIO.output(IN2,GPIO.LOW)    GPIO.output(IN3,GPIO.HIGH)    GPIO.output(IN4,GPIO.LOW)    time.sleep(sleep_time)    GPIO.cleanup() def back(sleep_time):    init()    GPIO.output(IN1,GPIO.LOW)    GPIO.output(IN2,GPIO.HIGH)    GPIO.output(IN3,GPIO.LOW)    GPIO.output(IN4,GPIO.HIGH)    time.sleep(sleep_time)    GPIO.cleanup() def left(sleep_time):    init()    GPIO.output(IN1,False)    GPIO.output(IN2,False)    GPIO.output(IN3,GPIO.HIGH)    GPIO.output(IN4,GPIO.LOW)    time.sleep(sleep_time)    GPIO.cleanup() def right(sleep_time):    init()    GPIO.output(IN1,GPIO.HIGH)    GPIO.output(IN2,GPIO.LOW)    GPIO.output(IN3,False)    GPIO.output(IN4,False)    time.sleep(sleep_time)    GPIO.cleanup()forward(1)\n","categories":["raspi"],"tags":["raspberry-pi","l298n"]},{"title":"台达PLC处理模拟量信号","url":"/2020/09/13/mechatronic/PLC-DVP-%E5%8F%B0%E8%BE%BEPLC%E5%A4%84%E7%90%86%E6%A8%A1%E6%8B%9F%E9%87%8F%E4%BF%A1%E5%8F%B7/","content":"1. 硬件\n1.1 台达PLC\n\n型号： DVP-40EH00T2\n\n\n1.2 信号模块\n\n型号： DVP-04AD-H2\n\n\n1.3 参考文献 \n\n台达PLC手册： DELTA_IA-PLC_DVP-EH3_I_TSE_20201022.pdf\n台达特殊模块手册： DVP-PLC应用技术手册（特殊模块篇）(326P).pdf\n\n\n\n\n\n2. 接线以两线制 4-20mA 信号为例，\n\n仪表正极接PLC的24V+，仪表负极接I+输入端子；\n模块的24V端接PLC的24V+，模块的com端接PLC的24V-\n\n这样可以形成回路。 \n\n\n\n\n\n\n\n\n\n注：DVP-04AD模块测量电流信号时， V+ 及 I+ 端子需要短接\n\n3. 程序LD M1002TO K0 K1 H3 K1       # H3 代表电流信号LD M1002TO K0 K2 K10 K1      # K10 代表平均次数 LD M1000FROM K0 K6 D40 K1    # 平均信号 -&gt; D40LD M1000FROM K0 K12 D50 K1   # 实时信号 -&gt; D50LD M1000DIV D50 K200 D0      # 电流范围0-20mA, D50的数值范围为K0-K4000； 缩小200倍后存入 D0LD M1000CMP D50 K1600 M0     # 比较命令，将比较结果存入 M0...\n详见技术手册。\n\n另：\n\n输入输出点数不多的情况，可直接选用 EX 系列的PLC，PLC上自带模拟量的输入。\n如：DVP-20EX200R\n\n","categories":["mechatronics"],"tags":["PLC"]},{"title":"台达PLC控制步进电机","url":"/2020/09/13/mechatronic/PLC-Stepper%E5%8F%B0%E8%BE%BEPLC%E6%8E%A7%E5%88%B6%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/","content":"1. 硬件\n1.1 台达PLC\n\n型号： DVP-40EH00T2\n\n1.2 驱动器\n\n型号： 雷赛 M542\n端子名称及说明如下（仅参考，以说明书为准）：\n\n\n\n名称\n符号\n备注\n\n\n\n24V电源\nDC+、DC-\n接DC24V电源\n\n\n电机接口\nA+、A-、B+、B-\n接电机\n\n\n使能端子\nPUL+、PUL-\n5v\n\n\n脉冲端子\nDIR+、DIR-\n5V\n\n\n转向端子\nEN+、EN-\n5V\n\n\n注：\n\n使能端这里用不到，可以悬空\n\n脉冲和转向电压要求是5V，接24V需要串一个2K电阻。\n\n1.3 电机型号： 57BYG250C\n\n\n\n\n2. 梯形图IO清单：\n\n\n\n名称\n说明\n备注\n\n\n\nX0\n正转\n\n\n\nX1\n反转\n\n\n\nY0\n脉冲输出\n\n\n\nY2\n换向输出\n\n\n\n\n\n\n3. 接线图\n","categories":["mechatronics"],"tags":["PLC","stepper-motor"]},{"title":"dlib库安装-win10-python37","url":"/2020/09/11/sci-opencv/dlib%E5%BA%93%E5%AE%89%E8%A3%85-win10-python37/","content":"dlib安装目前dlib在pypi中只支持到python36. \npython37下的安装网上搜了一下满地都是坑。\n终于在github中找到了一个编译好的安装包，记录一下。\n\n仓库： https://github.com/ljflinux/dlib\n\n文件： dlib-19.17.0-cp37-cp37m-win_amd64.whl (~ 3M)\n\n\n下载后直接pip安装即可：\npip install dlib-19.17.0-cp37-cp37m-win_amd64.whl\n\n在win10、python3.7.9上使用没有问题。\n","categories":["opencv"],"tags":["dlib","opencv"]},{"title":"Hexo 升级至 5.0 版","url":"/2020/07/30/hexo/hexo-%E5%8D%87%E7%BA%A7%E8%87%B3-HEXO-5.0/","content":"1. 升级 HEXO\n打开package.json, 修改 dependencies 项：\n\n&quot;hexo&quot;: &quot;^5.0.0&quot;,\n\n\n更新\n\nnpm update\n\n2. 改变一：通过npm安装主题\n\n\n安装next主题: npm install hexo-theme-next\n设置hexo主配置文件：\n\n# _config.ymltheme: next\n\n在根目录新建next主题的配置文件_config.next.yml：\n\n# _config.next.ymlscheme: Geminifooter:  since: 2015  icon:    animated: true# balabala ... \n\n然后可以删除原来的主题目录：themes/next\n\n3. 改变二：代码高亮：PrismJS新增了 PrismJS 代码高亮支持:\n# _config.ymlhighlight:  enable: true  auto_detect: false  line_number: true  tab_replace: &#x27;&#x27;  wrap: true  hljs: falseprismjs:  enable: false  preprocess: true  line_number: true  tab_replace: &#x27;&#x27;\n\n试了一下prismjs, 部分代码格式不对, 似乎有bug, 放弃。\n\n","categories":["hexo"],"tags":["hexo"]},{"title":"IKBC DC87 加LED灯","url":"/2020/07/24/device/IKBC-DC87%E5%8A%A0LED%E7%81%AF/","content":"准备\nLED灯，3mm无边LED灯 暖白色\n背光固件：DC87出厂默认没有背光，需要刷固件，关键词搜”信必成m20双模”\n\n焊灯DC87的灯位最上面一排没有预留焊锡，其他的预留了焊锡。\n可以先加热后直接把led戳进去；或者用吸锡器先把预留的焊锡全部吸掉。\n我这里直接加热后戳进去的，个别的需要补一点焊锡防止虚焊。\n\n刷固件\n运行界面\n\n\n\n\n背光快捷键\n\n\n\n\n快捷键\n功能\n备注\n\n\n\nFN + HOME\n打开&#x2F;切换灯光效果\n\n\n\nFN + END\n关闭灯光效果\n\n\n\nFN + ↑\n增加亮度\n\n\n\nFN + ↓\n减少亮度\n\n\n\nFN + INS\n增加亮度\n\n\n\nFN + DEL\n减少亮度\n\n\n\nFN + ←\n灯光方向向左\n灯光向左速度\n\n\nFN + →\n灯光方向向右\n灯光向右速度\n\n\nFN + PGUP\n进入&#x2F;退出自定义灯光\nFN键灯亮\n\n\n\nPS：默认的蓝牙快捷键\n\n\n\n\n快捷键\n功能\n备注\n\n\n\nFN + F1~F4\n切换蓝牙设备1~4\nScrLk灯闪烁\n\n\nFN + F5\n开启蓝牙\n空格左灯闪烁\n\n\nFN + PrtSc\n强制切换到蓝牙模式\nScrLk灯闪烁\n\n\nFN + ScrLk\n强制切换到有线模式\n\n\n\nFN + Pause\n恢复出厂设置\n长按5s，空格灯闪烁\n\n\n","categories":["mechatronics"],"tags":["ikbc"]},{"title":"雷蛇鼠标地狱狂蛇 Razer Abyssus1800 修复微动开关","url":"/2020/07/21/device/RazerAbyssus1800%E4%BF%AE%E5%A4%8D%E5%BE%AE%E5%8A%A8%E5%BC%80%E5%85%B3/","content":"鼠标一直用的地狱狂蛇 Abyssus。\n最早是2010款的磨砂版，当时还是蓝色的led灯，3500DPI，底部有两个调节开关。用了三年多，左键双击了。当时还觉得挺可惜的。\n后面买了两个2014款的，一个公司用，一个家用。这款led灯被改成了绿色，1800DPI，调节开关也被减配了。用了没多久，家里的鼠标中键就不是很灵了；最近公司的也出现了这个现象。\n\n\n\n\n\n琢磨着有空把两个鼠标一起换个微动。拆开鼠标，检查微动型号。\n\n只有一个螺丝，在底部脚贴里面，用美工刀拆开脚贴。\n\n\n\n\n拧出螺丝，掀开上盖，发现中键微动那里比较脏，好像是滚轮里的润滑油脂有一点点漏出来了。\n\n\n\n\n索性把微动开关拆开看一看。\n拆掉USB线的插排、LED的插排。\n\n\n\n\n左右键的微动是国产欧姆龙 D2FC-F-7N；中键的微动是TTC，型号不明。\n\n\n\n\n微动开关上盖是用两个卡扣扣在底座上的，用小螺丝刀从右侧小心拆掉。\n\n\n\n\n里面就一个塑料的白色触点、一个铜的弹簧片，小心把铜片取下来、擦干净、装回去。\n\n鼠标通电试一下，竟然好了。。。\n当然，最好的办法是换微动。\n关键词搜 D2FC-F-7N, 一般选10M的足够了，也可试试其他系列，都是通用的。\n\n\n索性把所有微动全换了。。。\n焊接比较简单，没有图片。\n\n满血复活\n\n\n\n","categories":["mechatronics"],"tags":["Razer"]},{"title":"ctex 配置 els-cas-templates","url":"/2020/07/09/sci/%E8%AE%BA%E6%96%87-ctex%E9%85%8D%E7%BD%AEels-cas-templates/","content":"投稿模板要用 els-cas-templates， ctex编译不过去，错误如下：\n\nerror: Environment graphicalabstract undefined\n\n原因不用想，肯定是ctex内置的latex(miktex)版本太老了。\n1. 试着更新一下miktex。miktex 官网： https://miktex.org/\n最新版是： MiKTeX 20.6 (6&#x2F;28&#x2F;2020)， 大概230M。\nhttps://miktex.org/download/ctan/systems/win32/miktex/setup/windows-x64/basic-miktex-20.6.29-x64.exe\n（最近miktex的版本号也改成了 年.月 的形式，之前是 2.9.x 的格式。）\n\n先把ctex安装目录内的 miktex 文件夹重命名成 miktex-old （保险起见，后面没问题再删）。\n安装MiKTeX 20.6到这个ctex默认的目录下。\n安装完，打开winedit，应该是能自动找到新的latex的；不行的话，检查一下路径。\n\n\n\n2. 打开cas-sc-template.tex，编译一下。\n因为新装的miktex是没有各种依赖包的，需要一个一个重新下载\n下载的包都是最新版，自动下载。\n网速比较慢，如果下载失败了，可以多试几次；也可以打开miktex console手动下载。\n\n3. 过程中又出错了\nSorry, but miktex-makepk did not succeed for the following reason\n\n\n试了原来的tex也打不开。。。\n\n4. 貌似是字体的原因，解决办法：\n找到 updmap.exe, 管理员权限运行一下；\n或者用命令：\n\ncd miktex\\bin\\x64updmap.exe  --force\n\n5. 在编译一次，貌似可以了。\ndone！\n","categories":["sci"],"tags":["latex"]},{"title":"pycharm对比工具加入右键菜单","url":"/2020/06/11/python/pycharm%E5%AF%B9%E6%AF%94%E5%B7%A5%E5%85%B7%E5%8A%A0%E5%85%A5%E5%8F%B3%E9%94%AE%E8%8F%9C%E5%8D%95/","content":"Pycharm的文本对比功能强大，比VS Code好用的多。\n\n在工程里的文件树上，选中两个文件，然后Ctrl+D（或者右键-&gt;Compare）即可。\n但是要比较工程以外的文件，或者没打开Pycharm的时候想对比文件时，比较麻烦。毕竟Pycharm又不能秒开。\n\n这里尝试下更方便的用法。\n预期功能： 选中两个文件，然后右键“diff with pycharm”。\n0. Pycharm CLI在官网查到Pycharm支持命令行了，支持打开、对比、合并等一些命令。https://www.jetbrains.com/help/pycharm/working-with-the-ide-features-from-command-line.html\n基本用法如下：\npycharm.bat &lt;file / folder&gt;       # 打开文件或目录pycharm.bat diff &lt;file&gt; &lt;file&gt;    # 对比两个文件......\n我们这里只用到 diff 命令。\n方法1. 改注册表添加到右键菜单（失败）先尝试修改注册表，把diff命令添加到右键菜单。\n但是注册表里好像不支持把两个或多个文件作为参数传入。\n下面的设置，只能分别打开两个pycharm程序，实现不了打开一个pycharm，传入两个文件名。\nWindows Registry Editor Version 5.00[HKEY_CURRENT_USER\\Software\\Classes\\*\\shell\\diff with pycharm\\command]@=&quot;C:\\\\Users\\\\xxxx\\\\scoop\\\\apps\\\\PyCharm-Professional\\\\current\\\\IDE\\\\bin\\\\pycharm.bat diff  \\&quot;%1\\&quot;&quot;\n\n试了把 %1 改成 %*, %V, 都不行。。。\n\n\n方法2. 添加到右键菜单的send to里\n2.1 找到pycharm安装目录的下的bin\\pycharm.bat，创建一个快捷方式。\n2.2 打开 send to 的目录，文件管理器地址里输入 shell:sendto（或者win+R运行shell:sendto）即可打开。\n2.3 把快捷方式拖进来，重命名diff with pycharm。\n2.4 右键打开属性，修改目标选项，前面的路径不要动，在后面加上 diff即可（diff前面有一个空格）。\n\n\n试下选中选中两个文件，然后右键-&gt;发送到-&gt;diff with pycharm，就能成功用pycharm对比了。\n注意必须是选中2个（或3个）文件，不然会出错的。\n简单测试了一下：\n\n选中一个文件是会出错的；\n选中三个试了也可以，分三栏；\n选中再多的话，就只对比其中两个。\n\n-Enjoy!-\n","categories":["python"],"tags":["python","pycharm"]},{"title":"powershell配置(4)-windows-terminal","url":"/2020/05/25/powershell/powershell%E9%85%8D%E7%BD%AE4-windows-terminal-%E9%85%8D%E7%BD%AE/","content":"1.安装可在应用商店安装，也可以scoop安装。\nscoop install windows-terminal\n\n2. 配置文件在设置里直接打开的是个人配置：setting.json\n按下alt再打开是默认配置文件：default.json\n直接默认文件的内容全部拷贝到个人配置里。\n简单的改一下powershell的设置，主题、字体、启动目录。\n&quot;profiles&quot;:    [        &#123;            &quot;guid&quot;: &quot;&#123;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx&#125;&quot;,            &quot;name&quot;: &quot;Windows PowerShell&quot;,            &quot;commandline&quot;: &quot;%SystemRoot%\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe&quot;,            &quot;icon&quot;: &quot;ms-appx:///ProfileIcons/&#123;xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx&#125;.png&quot;,            &quot;colorScheme&quot;: &quot;Campbell&quot;,            &quot;antialiasingMode&quot;: &quot;grayscale&quot;,            &quot;closeOnExit&quot;: &quot;graceful&quot;,            &quot;cursorShape&quot;: &quot;bar&quot;,            &quot;fontFace&quot;: &quot;JetBrains Mono&quot;,            &quot;fontSize&quot;: 11,            &quot;hidden&quot;: false,            &quot;historySize&quot;: 9001,            &quot;padding&quot;: &quot;8, 8, 8, 8&quot;,            &quot;snapOnInput&quot;: true,            &quot;altGrAliasing&quot;: true,            &quot;startingDirectory&quot;: &quot;%USERPROFILE%&quot;,            &quot;useAcrylic&quot;: false        &#125;,     ]\n\n\n\n3. 加入右键菜单\n新建注册表文件 windows terminal here.reg, 内容如下（路径按需修改）\n\nWindows Registry Editor Version 5.00[HKEY_CURRENT_USER\\Software\\Classes\\Directory\\Background\\shell\\Open with &amp;terminal]@=&quot;Open with &amp;terminal&quot;&quot;Icon&quot;=&quot;\\&quot;C:\\\\Users\\\\xxxx\\\\scoop\\\\apps\\\\windows-terminal\\\\current\\\\windowsterminal.exe\\&quot;&quot;[HKEY_CURRENT_USER\\Software\\Classes\\Directory\\Background\\shell\\Open with &amp;terminal\\command]@=&quot;\\&quot;C:\\\\Users\\\\xxxx\\\\scoop\\\\apps\\\\windows-terminal\\\\current\\\\windowsterminal.exe\\&quot;&quot;\n","categories":["powershell"],"tags":["powershell"]},{"title":"Jetbrain-Mono 字体","url":"/2020/05/23/apps/jetbrain-mono%E5%AD%97%E4%BD%93/","content":"1. Jetbrains Mono 字体Jetbrains 推出了一款新字体： Jetbrains Mono，还不错。\n\n支持连字\n不含中文字符\n含 powerline 字符\n\n\n\n官网： https://www.jetbrains.com/lp/mono/\nGithub： https://github.com/JetBrains/JetBrainsMono/\n\n官网的更新比Github慢。\n\n2. VSCode 设置编辑器和终端都可以设置，打开 setting.json, 加入：\n&#123;    &quot;editor.fontFamily&quot;: &quot;&#x27;JetBrains Mono&#x27;, &#x27;Courier New&#x27;, monospace&quot;,    &quot;editor.fontLigatures&quot;: true,    &quot;terminal.integrated.fontFamily&quot;: &quot;JetBrains Mono&quot;,&#125;\n\n默认的0是中间带点的0，要改为带斜杆的0，改成下面的：\n&#123;    &quot;editor.fontLigatures&quot;: &quot;&#x27;calt&#x27; off, &#x27;zero&#x27; on&quot;, // 关闭连字    &quot;editor.fontLigatures&quot;: &quot;&#x27;calt&#x27; on, &#x27;zero&#x27; on&quot;,  // 开启连字&#125;\n\n3. Jetbrains Mono Nerd-Fonts 版\nhttps://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/JetBrainsMono/\n\ngithubghproxyaria2c https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/patched-fonts/JetBrainsMono/Ligatures/Regular/complete/JetBrains%20Mono%20Nerd%20Font%20Complete%20Mono%20Windows%20Compatible%20Regular.ttfaria2c https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/patched-fonts/JetBrainsMono/Ligatures/Italic/complete/JetBrains%20Mono%20Nerd%20Font%20Complete%20Mono%20Windows%20Compatible%20Italic.ttfaria2c https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/patched-fonts/JetBrainsMono/Ligatures/Bold/complete/JetBrains%20Mono%20Nerd%20Font%20Complete%20Mono%20Windows%20Compatible%20Bold.ttfaria2c https://ghproxy.net/https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/patched-fonts/JetBrainsMono/Ligatures/Regular/complete/JetBrains%20Mono%20Nerd%20Font%20Complete%20Mono%20Windows%20Compatible%20Regular.ttfaria2c https://ghproxy.net/https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/patched-fonts/JetBrainsMono/Ligatures/Italic/complete/JetBrains%20Mono%20Nerd%20Font%20Complete%20Mono%20Windows%20Compatible%20Italic.ttfaria2c https://ghproxy.net/https://raw.githubusercontent.com/ryanoasis/nerd-fonts/master/patched-fonts/JetBrainsMono/Ligatures/Bold/complete/JetBrains%20Mono%20Nerd%20Font%20Complete%20Mono%20Windows%20Compatible%20Bold.ttf\n\nVS Code 编辑器和终端都可以设置，打开 setting.json, 加入：\n&#123;    &quot;editor.fontFamily&quot;: &quot;&#x27;JetBrainsMono Nerd Font Mono&#x27;, &#x27;Courier New&#x27;, monospace&quot;,&#125;\n","categories":["apps"],"tags":["Jetbrain-Mono"]},{"title":"步进电机","url":"/2020/05/22/mechatronic/Stepper-%E6%AD%A5%E8%BF%9B%E7%94%B5%E6%9C%BA/","content":"1. 硬件\n1.1 步进电机\n\n一般4线制：A+、A-、B+、B-\n\n1.2 驱动器\n\n驱动器一般有总线控制和脉冲控制两种方法，这里用的脉冲控制。\n端子名称及说明如下（仅参考，以说明书为准）：\n\n\n\n名称\n符号\n备注\n\n\n\n24V电源\nDC+、DC-\n接DC24V电源\n\n\n电机接口\nA+、A-、B+、B-\n接电机\n\n\n总线接口\nCANH、CANL\n\n\n\n脉冲接口\nDIR、PUL、GND、EN\n\n\n\n\n1.3 控制器这里用YF-19控制器，实验用。\n\n\n\n2. 接线示意\n","categories":["mechatronics"],"tags":["stepper-motor"]},{"title":"害怕","url":"/2020/05/17/yoyo/20200517-%E5%AE%B3%E6%80%95/","content":"（书房里）\n妈妈：我睡在这个床上的时候，老是害怕空调会掉下来。\n悠悠：你是不是还害怕天花板会掉下来。。。\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"群晖安装oh-my-zsh","url":"/2020/05/13/synology/%E7%BE%A4%E6%99%96%E5%AE%89%E8%A3%85oh-my-zsh/","content":"1. zsh 安装\nref: https://synocommunity.com/\n\n先从套件中心中安装zsh 。\n\n登录DSM，找到 套件中心 → 设置， 将 信任层级 设为 Synology Inc. 和信任的发行者.\n\n在 套件来源 选项卡中, 增加一项：\n\n名称： SynoCommunity \n位置： http://packages.synocommunity.com/\n\n\n返回 套件中心， 左侧可以看到 社群 选项卡， 打开后可以看到里面有 Z shell (with modules)， 安装套件.\n\n\n# 显示当前 shell 类型echo $SHELL# 显示可使用的 shellcat /etc/shells# 显示 zsh 安装路径which zsh\n\n2. oh-my-zsh 安装\nref: https://ohmyz.sh/ref: https://gitee.com/mirrors/oh-my-zsh.git\n\n\n需要先安装 git. (在套件中心里有)\n\n用 wget 安装。\n$ sh -c &quot;$(wget https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;# gitee 镜像$ sh -c &quot;$(wget https://gitee.com/mirrors/oh-my-zsh/raw/master/tools/install.sh -O -)&quot;\n简单配置一下，打开配置文件 nano ~/.zshrc\n# 主题ZSH_THEME=&quot;ys&quot;# 插件plugins=(git zsh-syntax-highlighting zsh-autosuggestions)\n下载插件\ngit clone https://github.com/zsh-users/zsh-autosuggestions $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-autosuggestionsgit clone https://github.com/zsh-users/zsh-syntax-highlighting $&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;/plugins/zsh-syntax-highlighting\n\n加载配置文件， source ~/.zshrc\n\n\n\n\n\n3. 将 zsh 设为默认一般用 chsh -s /bin/zsh 就可以更改了。\n但群晖没有 chsh 命令，新建配置文件 nano ~/.profile，加入以下内容：\nif [[ -x /usr/local/bin/zsh ]]; thenexport SHELL=/usr/local/bin/zshexec /usr/local/bin/zshfi\n\n\nref: https://migege.com/post/install-ohmyzsh-on-synology-dsmref: https://3os.org/guides/synology/\n\n","categories":["synology"],"tags":["synology","zsh"]},{"title":"BLDC无刷电机","url":"/2020/05/13/mechatronic/BLDC%E6%97%A0%E5%88%B7%E7%94%B5%E6%9C%BA/","content":"1. 硬件\n1.1 直流电机\n\n一般是8线制：\n\n\n\n名称\n符号\n备注\n\n\n\n电机电源\nU、V、W\n\n\n\n霍尔开关电源\nREF+、REF-\nDC5V， 接控制器或5V电源\n\n\n霍尔开关信号\nHU、HV、HW\n\n\n\n\n1.2 控制器\n\n控制器种类太多，部分端子名称及说明如下（仅参考，以说明书为准）：\n\n\n\n名称\n符号\n备注\n\n\n\n24V电源\nDC+、DC-\n接DC24V电源\n\n\n电机电源\nU、V、W\n\n\n\n霍尔开关电源\n5V+, GND\n\n\n\n霍尔开关信号\nHU、HV、HW\n\n\n\n使能\nRUN &#x2F; EN\n低电平启动，断开停止\n\n\n正、反转\nREV &#x2F; FR\n低电平反转，断开正转\n\n\n调速\nSPD &#x2F; SV\n0-5V电压调速\n\n\n刹车\nBK\n高电平刹车\n\n\n转速输出(脉冲)\nPLS\n5V脉冲信号\n\n\n转速输出(开漏)\nPG\n需在5V与PG间加2K-10K上拉电阻\n\n\n\n\n\n1.3 调速器（可调电阻&#x2F;电位器，10K）\n\n1.4 转速表\n\n\n\n\n\n名称\n符号\n备注\n\n\n\n信号输入\nIN、GND\n脉冲信号\n\n\n信号地\nV++，V–\n接DC5V电源\n\n\n2. 接线示意（一）\n\n\n3. 接线示意（二）\n\n\n","categories":["mechatronics"],"tags":["bldc-motor"]},{"title":"Hexo中的数学公式","url":"/2020/04/24/hexo/hexo-%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/","content":"0. 官方文档Next 介绍了两种方案： mathjax &#x2F; katex 。\n\nhttps://theme-next.js.org/docs/third-party-services/math-equations\n\n这里用的是 mathjax。\n1. mathjax配置1.1 正文 Front-matter---title: Hexo中的数学公式date: 2020-04-25 01:46:39mathjax: true---\n\n1.2 Next主题配置math:  # Default (true) will load mathjax / katex script on demand.  # That is it only render those page which has `mathjax: true` in Front-matter.  # If you set it to false, it will load mathjax / katex srcipt EVERY PAGE.  per_page: true  # hexo-renderer-pandoc (or hexo-renderer-kramed) required for full MathJax support.  mathjax:    enable: true    # See: https://mhchem.github.io/MathJax-mhchem/    mhchem: false\n\n1.3 安装插件（貌似可以不装，默认的也能用）先卸载 hexo-renderer-marked， 再安装 hexo-renderer-pandoc\nnpm un hexo-renderer-markednpm i hexo-renderer-pandoc\n\n\n\n2. 坑遇到了公式无法正常显示的问题。\n\n公式：$RMSE &#x3D; 1 - \\dfrac{\\sum_{i&#x3D;1}^n (y_i - \\hat{y}_i)^2} {\\sum_{i&#x3D;1}^n (y_i - \\bar{y})^2}$\n\nHexo显示如下：\n\n\n\n\n\n\n安装hexo-renderer-pandoc插件也无法解决；\n\n换 katex 方案也不行。\n\n\n\n最后发现是 $\\hat{y}_i$ 这里出了问题，原因不明。\n在 $\\hat{y}_i$ 下标符号 _ 前加了一个反斜杠 \\ ，搞定。\n$RMSE = 1 - \\dfrac&#123;\\sum_&#123;i=1&#125;^n (y_i - \\hat&#123;y&#125;_i)^2&#125; &#123;\\sum_&#123;i=1&#125;^n (y_i - \\bar&#123;y&#125;)^2&#125;$$RMSE = 1 - \\dfrac&#123;\\sum_&#123;i=1&#125;^n (y_i - \\hat&#123;y&#125;\\_i)^2&#125; &#123;\\sum_&#123;i=1&#125;^n (y_i - \\bar&#123;y&#125;)^2&#125;$\n\n\n\n","categories":["hexo"],"tags":["hexo"]},{"title":"深度学习-回归问题的评估指标：MAE, MAPE, MSE, RMSE, R2_Score","url":"/2020/04/24/tensorflow/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0-%E5%9B%9E%E5%BD%92%E9%97%AE%E9%A2%98%E7%9A%84%E8%AF%84%E4%BC%B0%E6%8C%87%E6%A0%87%EF%BC%9AMAE-MAPE-MSE-RMSE-R2_Score/","content":"回归问题常用的评估指标回归问题常用的评估指标包括：MAE, MAPE, MSE, RMSE, R2_Score等。\n这些评价指标基本都在 sklearn 包中都封装好了，可直接调用。\n安装 sklearn, 完整的名字是 scikit-learn。\npip install -U scikit-learn# 现在最新版是 V0.22.2.post1\n\n\n\n\nmetric\nformula\nmethod\n\n\n\nMAE\n$\\frac{1}{n} \\sum_{i&#x3D;1}^n \\vert y_i - \\hat{y}_i \\vert$\nsklearn.metrics.mean_absolute_error\n\n\nMAPE\n$\\frac{1}{n} \\sum_{i&#x3D;1}^n \\frac{\\vert y_i - \\hat{y}_i \\vert }{\\vert y_i \\vert}$\nsklearn.metrics.mean_absolute_percentage_error\n\n\nMSE\n$\\frac{1}{n} \\sum_{i&#x3D;1}^n (y_i - \\hat{y}_i)^2$\nsklearn.metrics.mean_squared_error\n\n\nRMSE\n$\\sqrt{\\frac{1}{n} \\sum_{i&#x3D;1}^n (y_i - \\hat{y}_i)^2}$\nsklearn.metrics.mean_squared_error\n\n\nR2 Score\n$1 - \\dfrac{\\sum_{i&#x3D;1}^n (y_i - \\hat{y}_i)^2} {\\sum_{i&#x3D;1}^n (y_i - \\bar{y})^2}$\nsklearn.metrics.r2_score\n\n\n注：\n\nMAPE 在V0.22.2中还不能直接调用，预计会在V0.23中发布；\n参见 github #15007\n\n\nRMSE 可以调用 mean_squared_error 方法实现, 设置 squared=False 即可;\nrmse_score = mean_squared_error(y_test, y_pred, squared=False)\n\n\n\n\n\n示例from sklearn.metrics import mean_absolute_errorfrom sklearn.metrics import mean_absolute_percentage_errorfrom sklearn.metrics import mean_squared_errorfrom sklearn.metrics import r2_scorex_true = xxxy_true = yyyy_pred = model.predict(x_true)# 评估标准： mae, mape, mse, rmse, r2_scoremae_score = mean_absolute_error(y_true, y_pred)mape_score = mean_absolute_percentage_error(y_true, y_pred)mse_score = mean_squared_error(y_true, y_pred)rmse_score = mean_squared_error(y_true, y_pred, squared=False)r_2_score = r2_score(y_true, y_pred)\n\n\nPS： 修改 sklearn(0.22.2) 源码， 直接调用 mean_absolute_percentage_error需要修改两个文件： sklearn/metrics/__init__.py, sklearn/metrics/_regression.py\n\nsklearn/metrics/__init__.py, 修改两处。\n\n## 第 63 行左右from ._regression import explained_variance_scorefrom ._regression import max_errorfrom ._regression import mean_absolute_errorfrom ._regression import mean_absolute_percentage_error  # +++ add MAPE +++from ._regression import mean_squared_errorfrom ._regression import mean_squared_log_errorfrom ._regression import median_absolute_error# 第 126 行左右    &#x27;matthews_corrcoef&#x27;,    &#x27;max_error&#x27;,    &#x27;mean_absolute_error&#x27;,    &#x27;mean_absolute_percentage_error&#x27;,  # +++ add MAPE +++    &#x27;mean_squared_error&#x27;,    &#x27;mean_squared_log_error&#x27;,    &#x27;mean_poisson_deviance&#x27;,\n\n\nsklearn/metrics/_regression.py, 修改两处\n\n# 第 36 行左右    &quot;max_error&quot;,    &quot;mean_absolute_error&quot;,    &quot;mean_absolute_percentage_error&quot;,  # +++ add MAPE +++    &quot;mean_squared_error&quot;,    &quot;mean_squared_log_error&quot;,    &quot;median_absolute_error&quot;,# 第 190 行左右    return np.average(output_errors, weights=multioutput)# +++ add MAPE +++def mean_absolute_percentage_error(y_true, y_pred,                                   sample_weight=None,                                   multioutput=&#x27;uniform_average&#x27;):    &quot;&quot;&quot;Mean absolute percentage error regression loss    Note here that we do not represent the output as a percentage in range    [0, 100]. Instead, we represent it in range [0, 1/eps]. Read more in the    :ref:`User Guide &lt;mean_absolute_percentage_error&gt;`.    Parameters    ----------    y_true : array-like of shape (n_samples,) or (n_samples, n_outputs)        Ground truth (correct) target values.    y_pred : array-like of shape (n_samples,) or (n_samples, n_outputs)        Estimated target values.    sample_weight : array-like of shape (n_samples,), default=None        Sample weights.    multioutput : &#123;&#x27;raw_values&#x27;, &#x27;uniform_average&#x27;&#125; or array-like        Defines aggregating of multiple output values.        Array-like value defines weights used to average errors.        If input is list then the shape must be (n_outputs,).        &#x27;raw_values&#x27; :            Returns a full set of errors in case of multioutput input.        &#x27;uniform_average&#x27; :            Errors of all outputs are averaged with uniform weight.    Returns    -------    loss : float or ndarray of floats in the range [0, 1/eps]        If multioutput is &#x27;raw_values&#x27;, then mean absolute percentage error        is returned for each output separately.        If multioutput is &#x27;uniform_average&#x27; or an ndarray of weights, then the        weighted average of all output errors is returned.        MAPE output is non-negative floating point. The best value is 0.0.        But note the fact that bad predictions can lead to arbitarily large        MAPE values, especially if some y_true values are very close to zero.    Examples    --------    &gt;&gt;&gt; from sklearn.metrics import mean_absolute_percentage_error    &gt;&gt;&gt; y_true = [3, -0.5, 2, 7]    &gt;&gt;&gt; y_pred = [2.5, 0.0, 2, 8]    &gt;&gt;&gt; mean_absolute_percentage_error(y_true, y_pred)    0.3273...    &gt;&gt;&gt; y_true = [[0.5, 1], [-1, 1], [7, -6]]    &gt;&gt;&gt; y_pred = [[0, 2], [-1, 2], [8, -5]]    &gt;&gt;&gt; mean_absolute_percentage_error(y_true, y_pred)    0.5515...    &gt;&gt;&gt; mean_absolute_percentage_error(y_true, y_pred, multioutput=[0.3, 0.7])    0.6198...    &quot;&quot;&quot;    y_type, y_true, y_pred, multioutput = _check_reg_targets(        y_true, y_pred, multioutput)    check_consistent_length(y_true, y_pred, sample_weight)    epsilon = np.finfo(np.float64).eps    mape = np.abs(y_pred - y_true) / np.maximum(np.abs(y_true), epsilon)    output_errors = np.average(mape,                               weights=sample_weight, axis=0)    if isinstance(multioutput, str):        if multioutput == &#x27;raw_values&#x27;:            return output_errors        elif multioutput == &#x27;uniform_average&#x27;:            # pass None as weights to np.average: uniform mean            multioutput = None    return np.average(output_errors, weights=multioutput)# +++ add MAPE +++def mean_squared_error(y_true, y_pred,                       sample_weight=None,\n\n\n参考 github：#15007\n\n\n\n","categories":["tensorflow"],"tags":["sklearn","deeplearning"]},{"title":"raspberry pi 使用 selenium firefox","url":"/2020/04/13/raspi/raspberry-pi-%E4%BD%BF%E7%94%A8-selenium-firefox/","content":"1. 安装虚拟屏幕我的树莓派系统是 buster lite 版，没有界面，所以先要安装 xvfb\nsudo apt install xvfb\n\n2. 安装 firefoxsudo apt install firefox-esrfirefox-esr -v # 安装完可以检测一下版本# Mozilla Firefox 68.7.0esr\n\n\n\n3. 安装 geckodriver下载安装 geckodriver-v0.23.0-arm7hf 版的。\n\nv0.24.0以后不发布arm7hf平台了，需要自己编译。\n好在v0.23.0也可以支持较新版本的 Firefox。\n\n# 下载aria2c -c https://github.com/mozilla/geckodriver/releases/download/v0.23.0/geckodriver-v0.23.0-arm7hf.tar.gz# 解压tar -xf geckodriver-v0.23.0-arm7hf.tar.gz# 修改权限sudo chmod a+x geckodriver# 移到 path下sudo mv geckodriver /usr/local/bin/  \nref: https://github.com/mozilla/geckodriver/releases\n4. 安装 selenium, pyvirtualdisplayref: https://www.selenium.dev/downloads/\npip3 install selenium==4.0.0a5pip3 install pyvirtualdisplay\n\n5. python代码import timefrom bs4 import BeautifulSoupfrom selenium import webdriverimport pyvirtualdisplay# 创建虚拟桌面display = pyvirtualdisplay.Display(backend=&#x27;xvfb&#x27;, visible=False, size=(1024, 768))display.start()print(&#x27;Initalized Display:&#x27;, display.size, display.backend)# 设置浏览器options = webdriver.FirefoxOptions()options.log.level = &quot;trace&quot; # 方便调试options.headless = True # 无头模式driver = webdriver.Firefox(options=options)# 测试一下url = &#x27;https://www.baidu.com&#x27;driver.get(url)print(driver.title)# 退出driver.close()driver.quit()display.stop()print(&#x27;Quit...&#x27;)\n\n6. 添加 selenium 定时任务可以用 crontab -e 命令添加 selenium 定时任务， 最后一行加入：\n# 格式# minute hour dayofmonth month dayofweek    command 0 8 * * * python3 task.py &amp;\n\n如果执行不成功，可能是找不到 selenium webdriver 的路径。\n\n检查 firefox-esr 和 geckodriver 的安装目录。\n\nwhich firefox-esr# /usr/binwhich geckodriver# /usr/local/bin\n\n然后，在命令前面加上路径配置， export PATH=/usr/local/bin:/usr/bin;\n\n0 8 * * * export PATH=/usr/local/bin:/usr/bin; python3 task.py &amp;\n\n","categories":["raspi"],"tags":["selenium","raspberry-pi","firefox"]},{"title":"pytorch调用inception-v3报错 'max() received an invalid combination of arguments'","url":"/2020/04/07/tensorflow/pytorch%E8%B0%83%E7%94%A8inception-v3%E6%8A%A5%E9%94%99/","content":"pytorch调用inception-v3报错：\nerror：  train_model(model, criterion, optimizer, scheduler, num_epochs)       37    outputs = model(inputs)  ---&gt; 38    _, preds = torch.max(outputs, 1)       39    loss = criterion(outputs, labels)  TypeError: max() received an invalid combination of arguments - got (InceptionOutputs, int), but expected one of: ...\n\n软件版本：\n\npython: 3.7.7\npytorch: 1.4.0\ntorchvision: 0.5.0\n\n解决办法：\n参考 https://stackoverflow.com/questions/51045839/pytorch-inceptionv3-transfer-learning-gives-error-max-received-an-invalid-co\nmodel_ft = models.inception_v3(pretrained=True)# 加入下面这一行model_ft.aux_logits=False \n\n","categories":["pytorch"],"tags":["pytorch"]},{"title":"tensorflow报错 'failed to create cublas handle', 'Failed to get convolution algorithm'","url":"/2020/04/03/tensorflow/tensoeflow%E6%8A%A5%E9%94%99/","content":"tensorflow gpu 报错：\n... tensorflow/stream_executor/cuda/cuda_blas.cc:238] failed to create cublas handle: CUBLAS_STATUS_ALLOC_FAILED...... tensorflow/stream_executor/cuda/cuda_dnn.cc:329] Could not create cudnn handle: CUDNN_STATUS_ALLOC_FAILED...... Unknown:  Failed to get convolution algorithm. This is probably because cuDNN failed to initialize, so try looking to see if a warning log message was printed above.\n\n软件版本：\n\npython: 3.7.7\nkeras: 2.3.1\ntensorboard: 2.1.0\ntensorflow: 2.1.0\n\n显卡版本：\n\ngpu: RTX 2070\ncuda: 10.1\ncudnn: 7.8\n\n解决办法：\n参考tensorflow的 pull #34888 : “Failed to get convolution algorithm. This is probably because cuDNN failed to initialize” \nhttps://github.com/tensorflow/tensorflow/issues/34888\n\n\nYou may try limiting your gpu memory usage with set_memory_growth option.See https://www.tensorflow.org/guide/gpu#limiting_gpu_memory_growthPut the following snippet on top of your code and execute again\n  import tensorflow as tfgpus= tf.config.experimental.list_physical_devices(&#x27;GPU&#x27;)tf.config.experimental.set_memory_growth(gpus[0], True)\n","categories":["tensorflow"],"tags":["tensorflow","keras"]},{"title":"梦想","url":"/2020/04/01/yoyo/20200401-%E6%A2%A6%E6%83%B3/","content":"妈妈：悠悠，你长大了有什么梦想？想当医生，老师，加油站工作人员，开挖掘机，还是科学家？\n悠悠：我想开挖掘机，妈妈，你小时候的梦想是什么？\n妈妈：是当一名教师。\n悠悠： 爸爸，你小时候的梦想是什么呢 ？\n爸爸： 我想当一名修理工，修摩托车，修汽车。。。 \n悠悠：那你修了吗 ？\n爸爸：没有，我没有实现，我现在也不会修车 。\n悠悠：我长大了可以帮你实现你的理想，你们也可以帮我实现我的理想 。\n爸爸：你的理想是什么？\n悠悠：我的理想是开挖掘机呀。。。妈妈只想当一个老师。\n爸爸：当老师也很好啊。\n悠悠：当老师可以教学生。\n爸爸：额… 那你想开挖掘机去挖什么呢？\n悠悠：就是把路哪里不平了，就把他挖一下。\n爸爸：哦，我知道了，就是把所有路上不平的地方都给他挖平，让别人可以走！\n悠悠：对呀~\n爸爸：哇，那你这个理想很伟大呀！\n悠悠：对呀~。。。你都不知道你要修什么车。\n爸爸：。。。\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"powershell配置(3)-折腾oh-my-posh和ys主题","url":"/2020/03/22/powershell/powershell%E9%85%8D%E7%BD%AE3-ohmyposh%E5%92%8Cys%E4%B8%BB%E9%A2%98/","content":"1. 安装 oh-my-posh， posh-git可以用scoop安装：\n# scoop bucket add extrasscoop install oh-my-posh\n\n新建、修改配置文件，运行:\nif (!(Test-Path -Path $PROFILE )) &#123; New-Item -Type File -Path $PROFILE -Force &#125;code $PROFILE\n加入以下内容：\nImport-Module posh-gitImport-Module oh-my-poshSet-Theme Paradox# 如果PowerShell设置里找不到字体，加上下面这一行# chcp 65001\n\n\nref: https://github.com/JanDeDobbeleer/oh-my-posh/\n\n2. 设置字体然后把字体设置为更纱黑体，就基本看起来比较舒服了。\n也可以用其他的字体，去这里找： https://github.com/ryanoasis/nerd-fonts\n但是我并不想用这些字体。\n\n\n3. 继续瞎折腾： 自定义一个oh-my-posh主题3.1 特殊字符代替使用YaHei Consolas Hybrid等非powerline字体，遇到了缺失字符的问题，那就干脆找出来 oh-my-posh 究竟用了那些特殊字符？\n# 显示当前主题设置$themesettings# 显示当前主题用到的字符$themesettings.promptsymbols$themesettings.gitsymbols# 显示当前主题用到的颜色Show-ThemeColors # 用到的颜色Show-Colors # 所有颜色\n\n还可以暴力搜索所有主题文件里的特殊字符（python代码在后面），\n最后发现里涉及到的特殊字符如下（后面3个字符是我自己加上的）：\n\n\n关于 unicode 字符的查询可以到这里：\n\nhttps://unicode-table.com/cn/https://apps.timwhitlock.info/unicode/inspect/\n\n那么我们可以把一些特殊字符改为一些常见的字符或者字体中已包含的字符：\n\n\n\n名称\ndefault\nys\njetbrains\n备注\n\n\n\n首字符\n#, &#x279c;\n#\n#\nStartSymbol\n\n\n普通用户指示符\n&#x25B6;, &#x276F;\n%\n&gt;\nPromptIndicator\n\n\n管理员指示符\n&#x26A1;\n$\n&#x27E9;\nPromptIndicator\n\n\n版本分支符号\n&#xE0A0;\n\n&#xE0A0;\nBranchSymbol\n\n\n版本状态：一致\n&#x2262;\no\n&#x2260;\nBranchIdenticalStatusToSymbol\n\n\n版本状态：未监视\n&#x2263;\nx\n&#x2261;\nBranchUntrackedSymbol\n\n\n上一命令执行错误\n&#x2A2F;, &#x2717;\n\n?\nFailedCommandSymbol\n\n\n\nys参考了on-my-zsh的ys主题的表示方法。\n\n\nhttps://blog.ysmood.org/my-ys-terminal-theme/\n\n\njetbrains是对应了Jetbrains Mono v1.0.5字体设置的。\n\n\n3.2 自定义posh主题（仿ys主题）本主题已被加入官方库，Set-Theme ys即可使用\n新建主题文件，code C:\\Users\\xxxx\\Documents\\WindowsPowerShell\\PoshThemes\\ys-like.psm1， 写入以下内容：\n#requires -Version 2 -Modules posh-gitfunction Write-Theme &#123;    param(        [bool]        $lastCommandFailed,        [string]        $with    )    # check the last command state and indicate if failed    If ($lastCommandFailed) &#123;        $prompt += Write-Prompt -Object &quot;$($sl.PromptSymbols.FailedCommandSymbol) &quot; -ForegroundColor $sl.Colors.CommandFailedIconForegroundColor    &#125;    # write # and space    $prompt = Write-Prompt -Object $sl.PromptSymbols.StartSymbol -ForegroundColor $sl.Colors.PromptSymbolColor    # write user and host    $user = $sl.CurrentUser    if (Test-NotDefaultUser($user)) &#123;        $prompt += Write-Prompt -Object &quot; $user&quot; -ForegroundColor $sl.Colors.PromptHighlightColor        # write at (devicename)        $computer = $sl.CurrentHostname        $prompt += Write-Prompt -Object &quot; at&quot; -ForegroundColor $foregroundColor        $prompt += Write-Prompt -Object &quot; $computer&quot; -ForegroundColor $sl.Colors.PromptForegroundColor        # write in for folder        $prompt += Write-Prompt -Object &quot; in&quot; -ForegroundColor $foregroundColor    &#125;    # write folder    $dir = Get-FullPath -dir $pwd    $prompt += Write-Prompt -Object &quot; $dir &quot; -ForegroundColor $sl.Colors.GitDefaultColor    # write on (git:branchname status)    $status = Get-VCSStatus    if ($status) &#123;        $themeInfo = Get-VcsInfo -status ($status)        $prompt += Write-Prompt -Object &#x27;on git:&#x27; -ForegroundColor $foregroundColor        $prompt += Write-Prompt -Object &quot;$($themeInfo.VcInfo) &quot; -ForegroundColor $sl.Colors.GitForegroundColor    &#125;    # write [time]    $timeStamp = Get-Date -Format T    $prompt += Write-Prompt &quot;[$timeStamp]&quot; -ForegroundColor $foregroundColor    # new line    $prompt += Set-Newline    if (Test-Administrator) &#123;        $prompt += Write-Prompt -Object ($sl.PromptSymbols.ElevatedSymbol + &quot; &quot;) -ForegroundColor $sl.Colors.AdminIconForegroundColor     &#125;    else&#123;        $prompt += Write-Prompt -Object ($sl.PromptSymbols.PromptIndicator + &quot; &quot;) -ForegroundColor $sl.Colors.PromptSymbolColor     &#125;&#125;$sl = $global:ThemeSettings # local settings$sl.PromptSymbols.StartSymbol                = &#x27;#&#x27;$sl.PromptSymbols.PromptIndicator            = &#x27;%&#x27;$sl.PromptSymbols.ElevatedSymbol             = &#x27;$&#x27;$sl.GitSymbols.BranchSymbol                  = &#x27;&#x27;$sl.GitSymbols.BranchUntrackedSymbol         = &#x27;x&#x27;$sl.GitSymbols.BranchIdenticalStatusToSymbol = &#x27;o&#x27;$sl.PromptSymbols.FailedCommandSymbol        = &#x27;?&#x27;# for dark theme$sl.Colors.AdminIconForegroundColor = [ConsoleColor]::Red$sl.Colors.PromptSymbolColor      = [ConsoleColor]::Blue$sl.Colors.PromptForegroundColor  = [ConsoleColor]::Green$sl.Colors.PromptHighlightColor   = [ConsoleColor]::Cyan$sl.Colors.GitDefaultColor        = [ConsoleColor]::Yellow$sl.Colors.GitForegroundColor     = [ConsoleColor]::Cyan# inspired by ys theme： not to use special characters (powerline fonts).# &gt; https://blog.ysmood.org/my-ys-terminal-theme/\n效果如下：\n\n\n\nPS. 找出 oh-my-posh 用到的特殊字符#%% 找出 `oh-my-posh` 用到的特殊字符import os, redef get_posh_symbols(root):    # 找到所有配置文件    files = []    # - 默认配置文件    default_file = os.path.join(root, &#x27;defaults.ps1&#x27;)     files.append(default_file)        # - 主题配置文件    themes_dir = os.path.join(root, &#x27;Themes&#x27;)    for parent, dirnames, filenames in os.walk(themes_dir):        for filename in filenames:            filedir = os.path.join(parent, filename)            files.append(filedir)    print(&#x27;All config files:\\n &#x27;, &#x27;\\n  &#x27;.join(files))    # 找到所有可能的 powerline 字符    symbols = []    for file in files:        with open(file, &#x27;r&#x27;, encoding=&#x27;utf8&#x27;) as f:            res = f.read(50000)            chars = re.findall(&quot;0x[0-9A-F]&#123;4&#125;&quot;, res)            symbols.extend(chars)    # - 去掉重复的，排序    symbols = sorted(list(set(symbols)))    # - 打印    for i in posh_symbols:        print(f&#x27;&#123;  i:8s&#125; &#123;chr(int(i, base=16)):4s&#125;&#x27;)        return symbolsposh_root = r&#x27;C:\\Users\\xxxx\\scoop\\apps\\oh-my-posh\\current&#x27;posh_symbols = get_posh_symbols(posh_root)#%% 显示 powerline 字符from PIL import  Image,ImageDraw,ImageFontttfont = ImageFont.truetype(&quot;JetBrainsMono-Regular.ttf&quot;, 16)dict = &#123;&#x27;0x00BB&#x27;: &#x27;Right-Pointing Double Angle Quotation Mark&#x27;,        &#x27;0x2191&#x27;: &#x27;Upwards Arrow&#x27;,        &#x27;0x2193&#x27;: &#x27;Downwards Arrow&#x27;,        &#x27;0x2262&#x27;: &#x27;Not Identical To&#x27;,        &#x27;0x2263&#x27;: &#x27;Strictly Equivalent To&#x27;,        &#x27;0x250C&#x27;: &#x27;Box Drawings Light Down And Right&#x27;,        &#x27;0x2514&#x27;: &#x27;Box Drawings Light Up And Right&#x27;,        &#x27;0x25B6&#x27;: &#x27;Black Right-Pointing Triangle&#x27;,        &#x27;0x25F7&#x27;: &#x27;White Circle With Upper Right Quadrant&#x27;,        &#x27;0x26A1&#x27;: &#x27;High Voltage Sign&#x27;,        &#x27;0x276F&#x27;: &#x27;Heavy Right-Pointing Angle Quotation Mark Ornament&#x27;,        &#x27;0x279C&#x27;: &#x27;Heavy Round-Tipped Rightwards Arrow&#x27;,        &#x27;0x2A2F&#x27;: &#x27;Vector Or Cross Product&#x27;,        &#x27;0xE0A0&#x27;: &#x27;Version Control Branch&#x27;,        &#x27;0xE0A1&#x27;: &#x27;LN (line) Symbol&#x27;,        &#x27;0xE0A2&#x27;: &#x27;Closed Padlock&#x27;,        &#x27;0xE0B0&#x27;: &#x27;Rightwards Black Arrowhead&#x27;,        &#x27;0xE0B1&#x27;: &#x27;Rightwards Arrowhead&#x27;,        &#x27;0xE0B2&#x27;: &#x27;Leftwards Black Arrowhead&#x27;,        &#x27;0xE0B3&#x27;: &#x27;Leftwards Arrowhead&#x27;,        &#x27;0xE606&#x27;: &#x27;Python Logo&#x27;,        &#x27;0xF09B&#x27;: &#x27;Github Logo&#x27;,        &#x27;0xF171&#x27;: &#x27;Bitbucket Logo&#x27;,        &#x27;0xF296&#x27;: &#x27;GitLab Logo&#x27;,        &#x27;0x0000&#x27;: &#x27;&#x27;,        &#x27;0x27E9&#x27;: &#x27;Mathematical Right Angle Bracket&#x27;,        &#x27;0x2260&#x27;: &#x27;Not Equal To&#x27;,        &#x27;0x2261&#x27;: &#x27;Identical To&#x27;,        &#x27;0x2717&#x27;: &#x27;BALLOT X&#x27;        &#125;def show_posh_fonts():        im = Image.new(&#x27;RGBA&#x27;, (600, 600), (255, 255, 255))    draw = ImageDraw.Draw(im)    txt = &#x27;\\n&#x27;.join([f&#x27;&#123;i&#125; &#123;chr(int(i, base=16))&#125; &#123;dict[i]&#125;&#x27; for i in dict])    print(txt)    draw.text((5,5), txt, fill=(0,0,0),font=ttfont)    im.show()show_posh_fonts()#%% 打印所有 unicode 字符from PIL import  Image, ImageDraw, ImageFontttfont = ImageFont.truetype(&quot;JetBrainsMono-Regular.ttf&quot;, 16)def show_all_fonts(list):    im = Image.new(&#x27;RGBA&#x27;, (1600, 800), (255, 255, 255))        for st, x, y in list:        txt = &#x27;&#x27;        for i in range(st, st + 0x0100):            if i % 16 == 0:                txt += f&#x27;\\n &#123;hex(i):6s&#125; &#x27;            txt += f&#x27;&#123;chr(i):2s&#125;&#x27;        print(txt)        draw = ImageDraw.Draw(im)        draw.text((x, y+20), txt, fill=(0,0,0),font=ttfont)    im.show()list = [[0x2100, 0, 0],        [0x2200, 400, 0],        [0x2300, 800, 0],        [0x2400, 1200, 0],        [0x2500, 0, 400],        [0x2600, 400, 400],        [0x2700, 800, 400],        [0xE000, 1200, 400],]show_all_fonts(list)# %%\n\n","categories":["powershell"],"tags":["powershell"]},{"title":"powershell配置(2)-psreadline历史记录和提示","url":"/2020/03/22/powershell/powershell%E9%85%8D%E7%BD%AE2-psreadline%E5%8E%86%E5%8F%B2%E8%AE%B0%E5%BD%95%E5%92%8C%E6%8F%90%E7%A4%BA/","content":"1. 安装 psreadline\nref: https://github.com/PowerShell/PSReadLine\n\n1.1 从 PowerShellGallery 中安装。依次安装PowerShellGet, PSReadLine。\nInstall-Module -Name PowerShellGet -ForceInstall-Module PSReadLine\n安装完就有历史纪录了，关闭后可以保存历史记录。\n1.2 查看已安装的模块Get-InstalledModule\n\n\n2. 智能提示2.1 将PSReadLine 升级至V2.1（测试版）安装完之后没有智能提示，按tab键跳出来的命令都很奇怪。（我安的是稳定版，V2.0.2）\n发现测试版就加入了类似 fish 的智能提示，版本是V2.1.0-beta2。\n\nref: https://github.com/PowerShell/PSReadLine/pull/1496\n\n更新一下PSReadLine，用命令行窗口升级：\n# cmdpowershell -noprofile -command &quot;Install-Module PSReadLine -Force -SkipPublisherCheck -AllowPrerelease&quot;\n或：\nUpdate-Module PSReadLine -Force\n\n然后将 PredictionSourceSource 设为 History：\n# powershellSet-PSReadLineOption -PredictionSource History  # 默认是 None\n\n2.2 查看 PSReadLine 的设置Get-PSReadLineOption\n\n2.3 修改配置文件但是似乎窗口关闭后，就失效了。\n需要把设置这一行加到配置文件里就好了，新建、修改配置文件，运行:\nif (!(Test-Path -Path $PROFILE )) &#123; New-Item -Type File -Path $PROFILE -Force &#125;code $PROFILE\n就能打开配置文件。\n在配置里加入这一句。\nSet-PSReadLineOption -PredictionSource History  # 默认是 None\n\n\nDone!\n","categories":["powershell"],"tags":["powershell"]},{"title":"powershell配置(1)-基本操作：主题和字体","url":"/2020/03/21/powershell/powershell%E9%85%8D%E7%BD%AE1-%E4%B8%BB%E9%A2%98%E3%80%81%E5%AD%97%E4%BD%93/","content":"1. 安装 PowerShell 5.0 以上版本\nwin10： 已自带 V5.1；\nwin7 x64： 下载 Win7AndW2K8R2-KB3191566-x64.zip，安装；\nref: https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-windows-powershell?view=powershell-6\n\n\n\n2. 用concfg配置主题\nref: https://github.com/lukesampson/concfg\n\nscoop install concfg# 设置主题# concfg import cmd-default  # 暗色调concfg import google-light  # 浅色调# 列出所有预设主题concfg presets# 恢复原始设置concfg clean\n\n3. 安装字体\n\n打开 PowerShell 窗口，右键标题栏 -&gt; 默认值 -&gt; 字体。\n\nYaHei Consolas Hybrid： 含中文；不支持 powerline 字符\n\nhttps://github.com/yakumioto/YaHei-Consolas-Hybrid-1.12\n\n\nJetbrains Mono： 不含中文；支持 powerline 字符\n\n\nhttps://www.jetbrains.com/lp/mono/\nhttps://github.com/JetBrains/JetBrainsMono/\n\n\n\nCascadia Mono： 不含中文；支持 powerline 字符\n\n\nhttps://github.com/microsoft/cascadia-code/releases\n\n\n\nSarasa Gothic， 更纱黑体：含中文；支持 powerline 字符\n\n\n可以用scoop安装更纱黑体：\nscoop bucket add nerd-fontsscoop install SarasaGothic\n\n\n如果要用Powershell作为终端的话, 更纱黑体几乎是唯一的方案…\n可以同时支持powerline、中文、等宽、Truetype…\nhttps://github.com/ryanoasis/nerd-fonts\n\n\n","categories":["powershell"],"tags":["powershell"]},{"title":"群晖-python运行状态提醒","url":"/2020/03/03/synology/%E7%BE%A4%E6%99%96-python%E8%8E%B7%E5%8F%96%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81/","content":"1.获取运行状态获取群晖运行状态用到的命令如下表：\n\n\n\n命令\n说明\n\n\n\ntop\n获取CPU使用率\n\n\ncat /sys/class/hwmon/hwmon0/temp1_input\n获取CPU温度\n\n\nfree\n获取RAM使用率\n\n\ndf\n获取DISK使用率\n\n\nifconfig\n获取IP地址\n\n\n\n1.1 获取CPU温度：\n\n$ cat /sys/class/hwmon/hwmon0/temp1_input    36000   # 实际温度需要除以1000\n\n\n\n\n1.2 获取CPU使用率\n\n$ top -bn1    top - 19:31:32 up 1 day, 15:30,  1 user,  load average: 0.19, 0.05, 0.01 [IO: 0.00, 0.00, 0.00 CPU: 0.19, 0.05, 0.01]    Tasks: 372 total,   1 running, 371 sleeping,   0 stopped,   0 zombie    %Cpu(s): 22.2 us, 36.1 sy,  0.0 ni, 41.7 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st    GiB Mem :    5.651 total,    0.201 free,    0.660 used,    4.789 buff/cache    GiB Swap:    5.391 total,    5.391 free,    0.000 used.    4.586 avail Mem    PID USER      PR  NI    VIRT    RES  %CPU  %MEM     TIME+ S COMMAND    16145 root      20   0  467.5m  82.6m 94.12 1.427  77:03.73 S /var/packages/DownloadStation/target/sbin/transmissiond +    ...    ...# -bn1 参数： n1指定只运行一次，b输出结果为batch-mode，避免出现乱码# 可以看到CPU的信息在第3行，只要输出CPU这一行$ top -bn1 | awk &#x27;/Cpu\\(s\\)/&#x27;    %Cpu(s):  5.4 us,  8.1 sy,  0.0 ni, 86.5 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st# 缩写分别是user, system, nice, idle, wait, ...# 计算CPU使用率等于 1 - idle%\n\n\n1.3 获取RAM使用率\n\n$ free -m                  total        used        free      shared  buff/cache   available    Mem:           5786         674         208         126        4904        4698    Swap:          5519           0        5519# -m 参数是指定输出结果以 MB 为单位# 修改一下命令，只要输出 Mem 这一行$ free -m | awk &#x27;/Mem/&#x27;    Mem:           5786         674         208         126        4904        4698# 计算RAM使用率等于 (total - available) / total； （仅供参考）\n\n\n1.4 获取DISK使用率\n\n$ df -h    Filesystem         Size  Used Avail Use% Mounted on    /dev/md0           2.3G  1.3G  909M  59% /    devtmpfs           2.9G     0  2.9G   0% /dev    tmpfs              2.9G  184K  2.9G   1% /dev/shm    tmpfs              2.9G   18M  2.9G   1% /run    tmpfs              2.9G     0  2.9G   0% /sys/fs/cgroup    tmpfs              2.9G  2.3M  2.9G   1% /tmp    /dev/vg1/volume_2  889G  389G  501G  44% /volume2    /dev/vg1000/lv     890G  680G  211G  77% /volume1# -h 参数是指定输出结果人性化，自动选择单位# 修改一下命令，只要输出 /dev/root 这一行$ df -h | awk &#x27;/vg1000/&#x27;    /dev/vg1000/lv     890G  680G  211G  77% /volume1\n\n\n1.5 获取 IP 地址\n\n$ ifconfig eth0    eth0      Link encap:Ethernet  HWaddr 00:11:32:B9:D1:64          inet addr:192.168.31.xxx  Bcast:192.168.31.xxx  Mask:255.255.255.0                ...# ifconfig 命令要用管理员运行# wlan0 参数是指wifi网络；如果是有线网络，改为： eth0# 修改一下命令，只要输出 inet 这一行$ ifconfig eth0 | awk &#x27;/inet/&#x27;    inet addr:192.168.31.xxx  Bcast:192.168.31.xxx  Mask:255.255.255.0\n\n2. 完整的代码import osimport timeimport requestsdef now():    return &#x27;[&#x27; + time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;) + &#x27;]&#x27;# run commanddef run_cmd(cmd):    p = os.popen(cmd).readline().strip().split()    return p# cpu_temp = run_cmd(&quot; vcgencmd measure_temp &quot;)temp1_in = run_cmd(&quot; cat /sys/class/hwmon/hwmon0/temp1_input &quot;)cpu_temp = float(temp1_in[0])/1000.0cpu_stat = run_cmd(&quot; top -bn1 | awk &#x27;/Cpu\\(s\\)/&#x27; &quot;)cpu_used = 1 - float(cpu_stat[7])/100.0ram_stat = run_cmd(&quot; free -m | awk &#x27;/Mem/&#x27; &quot;)ram_used = (int(ram_stat[1]) - int(ram_stat[6])) / float(ram_stat[1])disk_st0 = run_cmd(&quot; df -h | awk &#x27;/vg1/&#x27; &quot;)disk_st1 = run_cmd(&quot; df -h | awk &#x27;/vg2/&#x27; &quot;)ipconfig = run_cmd(&quot; ifconfig eth0 | awk &#x27;/inet/&#x27; &quot;)print(temp1_in, cpu_temp, cpu_stat, cpu_used, sep=&#x27;\\n&#x27;)print(ram_stat, ram_used, disk_st0, disk_st1, ipconfig, sep=&#x27;\\n&#x27;)###status = now() + &#x27;\\n\\n&#x27;status += &#x27;Synology Status:      \\n&#x27;status += &#x27;CPU  Used  = &#123;:.2%&#125;   \\n&#x27;.format(cpu_used)status += &#x27;CPU  Temp  = &#123;:.2f&#125;°C \\n&#x27;.format(cpu_temp)status += &#x27;RAM  Total = &#123;&#125;M      \\n&#x27;.format(ram_stat[1])status += &#x27;RAM  Used  = &#123;:.2%&#125;   \\n&#x27;.format(ram_used)status += &#x27;DISK Total = &#123;&#125;, &#123;&#125;   \\n&#x27;.format(disk_st0[1], disk_st1[1])status += &#x27;DISK Used  = &#123;&#125;, &#123;&#125;   \\n&#x27;.format(disk_st0[2], disk_st1[2])status += &#x27;DISK Perc  = &#123;&#125;, &#123;&#125;   \\n&#x27;.format(disk_st0[4], disk_st1[4])status += &#x27;IP Address = &#123;&#125;       \\n&#x27;.format(ipconfig[1].replace(&#x27;addr:&#x27;, &#x27;&#x27;))print(status)# Send to ftqqkey = &#x27;SCUxxxxxxxxxxxxxxx&#x27;api = &#x27;https://sc.ftqq.com/&#123;&#125;.send&#x27;.format(key)send_data = &#123;&#x27;text&#x27;: &#x27;Synology_Status&#x27;, &#x27;desp&#x27;: status&#125;res = requests.post(api, data=send_data)print(res.content)# Send to wechatimport wechat_push as wpaccess_token, _ = wp.get_access_token(wp.corp_id, wp.corp_secret)wp.wechat_push_text(agent_id=wp.agent_id, access_token=access_token, message=status)\n","categories":["synology"],"tags":["synology"]},{"title":"runcat-pyqt5-win：在windows任务栏养猫（2）","url":"/2020/02/29/python-app/runcat-for-win-%E5%9C%A8windows%E4%BB%BB%E5%8A%A1%E6%A0%8F%E5%85%BB%E7%8C%AB%20V2/","content":"runcat-pyqt5-win V2之前撸了一个 runcat-pyqt5-win，可以在windows任务栏养猫，用奔跑的猫来显示当前系统资源（CPU）的占用情况。\n\ngithub仓库： https://github.com/shenbo/runcat-pyqt5-win\n原mac应用： http://kyomesuke.com/runcat/index.html\n\n原来的功能比较简单，这次增加了右键菜单：\n\n可切换图标类型： [cat, mario]\n可切换监控类型： [cpu, memory, gpu(nVidia)]\n增加了退出按钮\n\n运行效果\n\n\n\nRequirements\npsutil\npyqt5\nnvidia-ml-py\n\n完整代码import osimport sysimport threadingimport timeimport psutilfrom PyQt5.QtGui import QIconfrom PyQt5.QtWidgets import QApplication, QSystemTrayIcon, QMenu, QActionimport pynvmlpynvml.nvmlInit()handle = pynvml.nvmlDeviceGetHandleByIndex(0)   # GPU id: 0class TrayIcon(QSystemTrayIcon):    def __init__(self, parent=None):        super(TrayIcon, self).__init__(parent)        self.monitor = &#x27;cpu&#x27;        self.cpu_usage = 0.2  # 初始化        self.mem_usage = 0.2  # 初始化        self.gpu_usage = 0.2  # 初始化        self.icon_type = &#x27;runcat&#x27;         # 设定默认图标，并加载        self.icon_list = self.loadIcon()        self.setIcon(self.icon_list[0])        self.setVisible(True)        self.setMenu()  # 加载菜单        self.updateIcon()  # 更新图标    # 加载图标    def loadIcon(self):        if self.icon_type == &#x27;mario&#x27;:            return [QIcon(f&#x27;icons/&#123;self.icon_type&#125;/&#123;i&#125;.png&#x27;) for i in range(3)]        return [QIcon(f&#x27;icons/&#123;self.icon_type&#125;/&#123;i&#125;.png&#x27;) for i in range(5)]    # 设置菜单    def setMenu(self):        self.menu = QMenu()        self.action_1 = QAction(QIcon(f&#x27;icons/cat.png&#x27;),                                &#x27;Cat&#x27;, self, triggered=lambda: self.changeIconType(&#x27;runcat&#x27;))        self.action_2 = QAction(QIcon(f&#x27;icons/mario/0.png&#x27;),                                &#x27;Mario&#x27;, self, triggered=lambda: self.changeIconType(&#x27;mario&#x27;))        self.action_c = QAction(QIcon(f&#x27;icons/cpu.png&#x27;),                                &#x27;CPU&#x27;, self, triggered=lambda: self.changeMonitor(&#x27;cpu&#x27;))        self.action_m = QAction(QIcon(f&#x27;icons/mem.png&#x27;),                                &#x27;Memory&#x27;, self, triggered=lambda: self.changeMonitor(&#x27;mem&#x27;))        self.action_g = QAction(QIcon(f&#x27;icons/gpu.png&#x27;),                                &#x27;GPU&#x27;, self, triggered=lambda: self.changeMonitor(&#x27;gpu&#x27;))        self.action_q = QAction(QIcon(f&#x27;icons/quit.png&#x27;),                                &#x27;Quit&#x27;, self, triggered=self.quit)        self.menu.addAction(self.action_c)        self.menu.addAction(self.action_m)        self.menu.addAction(self.action_g)        self.menu.addSeparator()        self.menu.addAction(self.action_1)        self.menu.addAction(self.action_2)        self.menu.addSeparator()        self.menu.addAction(self.action_q)        self.setContextMenu(self.menu)    # 根据使用率更新图标，    # 创建两个 threading：一个获取使用率，一个更新图标    def updateIcon(self):        threading.Timer(0.1, self.thread_get_cpu_usage, []).start()        threading.Timer(0.1, self.thread_update_icon, []).start()    # get cpu usage    def thread_get_cpu_usage(self):        while True:            self.cpu_usage = psutil.cpu_percent(interval=1) / 100            self.mem_usage = psutil.virtual_memory().percent / 100            meminfo = pynvml.nvmlDeviceGetMemoryInfo(handle)            self.gpu_usage = meminfo.used / meminfo.total            # print(self.cpu_usage)            time.sleep(0.5)    # update icon    def thread_update_icon(self):        while True:            mon = self.cpu_usage            if self.monitor == &#x27;mem&#x27;:                mon = self.mem_usage            elif self.monitor == &#x27;gpu&#x27;:                mon = self.gpu_usage                        t = 0.18 - mon * 0.15            # print(mon, t)            for i in self.icon_list:                self.setIcon(i)                tip = f&#x27;cpu: &#123;self.cpu_usage:.2%&#125; \\nmem: &#123;self.mem_usage:.2%&#125; \\ngpu: &#123;self.gpu_usage:.2%&#125;&#x27;                self.setToolTip(tip)                # print(i, self.cpu_usage)                time.sleep(t)    # Change icon type    def changeIconType(self, type):        print(type)        if type != self.icon_type:            self.icon_type = type            self.icon_list = self.loadIcon()            print(f&#x27;Load &#123;self.icon_type&#125;(&#123;len(self.icon_list)&#125;) icons...&#x27;)    # change monitor type    def changeMonitor(self, monitor_type):        print(monitor_type)        if monitor_type != self.monitor:            self.monitor = monitor_type    # 退出程序    def quit(self):        self.setVisible(False)        app.quit()        os._exit(-1) # 完全退出程序if __name__ == &quot;__main__&quot;:    app = QApplication(sys.argv)    tray = TrayIcon()    sys.exit(app.exec_())\n","categories":["python"],"tags":["python","pyqt5"]},{"title":"keras调用tensorborad时报错 AttributeError 'Model' object has no attribute '_get_distribution_strategy'","url":"/2020/02/22/tensorflow/keras%E8%B0%83%E7%94%A8tensorborad%E6%97%B6%E6%8A%A5%E9%94%99/","content":"keras调用tensorborad时报错：AttributeError: &#39;Model&#39; object has no attribute &#39;_get_distribution_strategy&#39;\n软件版本：\n\npython: 3.7.4\nkeras: 2.3.1\ntensorboard: 2.1.0\ntensorflow: 2.1.0\n\n解决办法A：\n参考tensorflow的 pull #34870 : “Use _get_distribution_strategy only when it is available. “ https://github.com/tensorflow/tensorflow/pull/34870\n\n\nThe changes introduced in  06d8f77  are not compatible with standalone Keras (they are compatible with tf.Keras). a keras.Model does not have a _get_distribution_strategy method, which is now assumed for the Tensorboard callback.\n\n\n直接修改tensorflow/python/keras/callbacks.py文件，如下图。\n\n\n\n\n\n相关代码如下。\n# 1529行左右 : # distributed_file_utils.write_dirpath()    # In case this callback is used via native Keras, _get_distribution_strategy does not exist.    if hasattr(self.model, &#x27;_get_distribution_strategy&#x27;):      # TensorBoard callback involves writing a summary file in a      # possibly distributed settings.      self._log_write_dir = distributed_file_utils.write_dirpath(          self.log_dir, self.model._get_distribution_strategy())  # pylint: disable=protected-access    else:      self._log_write_dir = self.log_dir# 1732行左右也要改一下: # distributed_file_utils.remove_temp_dirpath()    # In case this callback is used via native Keras, _get_distribution_strategy does not exist.    if hasattr(self.model, &#x27;_get_distribution_strategy&#x27;):      # Safely remove the unneeded temp files.      distributed_file_utils.remove_temp_dirpath(          self.log_dir, self.model._get_distribution_strategy())  # pylint: disable=protected-access\n\n\n解决办法B：修改引用，改为从tensorflow.keras中引用。\nimport kerasfrom tensorflow.keras.callbacks import TensorBoardfrom tensorflow.keras.layers import *from tensorflow.keras.models import Sequential# xxxxx\n\nref ：https://stackoverflow.com/questions/59765784/attributeerror-sequential-object-has-no-attribute-get-distribution-strategy\n\n","categories":["tensorflow"],"tags":["tensorflow","keras"]},{"title":"数据可视化-等高线-pandas透视图-seaborn热力图-桑基图(Sankey)","url":"/2020/02/17/sci-matplotlib/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-matplotlib%E7%BB%98%E5%88%B6%E7%AD%89%E9%AB%98%E7%BA%BF/","content":"matplotlib绘制等高线ref: https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contour.html\nimport numpy as npimport matplotlib.pyplot as pltx = np.arange(0, 10.0, 0.1)y = np.arange(0, 10.0, 0.1)X, Y = np.meshgrid(x, y)    # 生成x-y网格图Z = X**1.5 + Y**1.5plt.figure()CS = plt.contour(X, Y, Z, levels=6)                   # 设置距离plt.clabel(CS, inline=1, fontsize=10, fmt=&#x27;%d ℃&#x27;)   # 设置标签plt.savefig(&#x27;Temp.png&#x27;, dpi=300, bbox_inches=&#x27;tight&#x27;)plt.show()\n\n\n \n\n\n\npandas透视图1. 创建需要展示的数据import itertoolsimport matplotlib.pyplot as pltimport numpy as npimport pandas as pdimport seaborn as sns# === define paras ==================para_names = [&#x27;layer_n&#x27;, &#x27;activition&#x27;, &#x27;seed&#x27;]layer_n = [1, 2, 3, 4, 5, 6]activition = [&#x27;tanh&#x27;, &#x27;sigmod&#x27;, &#x27;relu&#x27;]seed = [11, 17, 19]# 创建 dataframedf =  pd.DataFrame([], columns=para_names)for values in itertools.product(layer_n, activition, seed):    newline = pd.DataFrame(list(values), index=para_names)    df = df.append(newline.T, ignore_index=True)# 伪造一些训练结果，方便展示# activ_2_num = pd.factorize(df[&#x27;activition&#x27;])[0].astype(&#x27;int&#x27;)  # 激活函数是字符类型，将其映射成整数形activ_dict = &#123;&#x27;tanh&#x27;: 2, &#x27;sigmod&#x27;: 4, &#x27;relu&#x27;: 6&#125;  # 也可以直接定义字典，然后replacedf[&#x27;results&#x27;] = df[&#x27;layer_n&#x27;] + df[&#x27;activition&#x27;].replace(activ_dict) + df[&#x27;seed&#x27;] * 0.1 + np.random.random((54,))df[&#x27;results&#x27;] = df[&#x27;results&#x27;].astype(&#x27;float&#x27;)  # 转换成浮点类型print(df.head())\n\n输出：\n  layer_n activition seed   results\n0       1       tanh   11  4.261361\n1       1       tanh   17  4.822595\n2       1       tanh   19  4.929088\n3       1     sigmod   11  6.698047\n4       1     sigmod   17  7.020531\n\n\n2. 绘制带误差的折线图展示训练结果# 绘制带误差的折线图，横轴为网络层数，纵轴为训练结果，# 激活函数采用不同颜色的线型，误差来自于没有指定的列：不同的随机种子seedplt.figure(figsize=(8, 6))sns.lineplot(x=&#x27;layer_n&#x27;, y=&#x27;results&#x27;, hue=&#x27;activition&#x27;,  style=&#x27;activition&#x27;,              markers=True, data=df)plt.grid(linestyle=&#x27;:&#x27;)plt.show()\n\n\n\n\n3. 使用pandas透视图、seaborn热力图来展示# 创建透视图，# 对于没有指定的列（seed），按最大值进行统计dt = pd.pivot_table(df, index=[&#x27;layer_n&#x27;], columns=[&#x27;activition&#x27;], values=[&#x27;results&#x27;], aggfunc=[max])print(dt)print(dt.columns)  # 找到最大值、最大值所对应的索引max_value, max_idx = dt.stack().max(), dt.stack().idxmax()print(f&#x27; - the max value is &#123;max_value&#125;;\\n - the index is &#123;max_idx&#125;...&#x27;)# 透视图变成了多重索引(MultiIndex)，重新调整一下new_col = dt.columns.levels[2]dt.columns = new_col# dt.index = list(dt.index)print(dt)dt.sort_index(axis=0, ascending=False, inplace=True)  # 必要时将索引重新排序dt.sort_index(axis=1, ascending=False, inplace=True)  # 必要时将索引重新排序# 绘制热力图，横轴为网络层数，纵轴为激活函数，# 栅格的颜色代表训练结果，颜色越深结果越好plt.figure(figsize=(8, 6))g = sns.heatmap(dt, vmin=0.0, annot=True, fmt=&#x27;.2g&#x27;, cmap=&#x27;Blues&#x27;, cbar=True)plt.show()\n\n\n\n\nref:\n\npandas.pivot_table https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html\n\nseaborn.lineplot https://seaborn.pydata.org/generated/seaborn.lineplot.html\n\nseaborn.heatplot https://seaborn.pydata.org/generated/seaborn.heatmap.html\n\n\n\n桑基图(Sankey)1. 桑基图(Sankey)介绍sankey图可用于数据从一系列节点到另一系列节点流入流出的可视化。\n主要有两个基本概念：\n\n节点 （nodes）\n连接 （links）： 源节点至目标节点之间的关系，每个连接包括三个元素：\nsource： 源节点\ntarget： 目标节点\nvalue： 数据\n\n\n\n\nref: https://developers.google.com/chart/interactive/docs/gallery/sankey\n\n2. 绘制桑基图（使用pyecharts）常用的绘图库 matplotlib, seaborn 好像不支持桑基图， 这里使用了 pyecharts 。\n这里 https://gallery.pyecharts.org/#/Sankey/sankey_base 有几个例子。\n\n\n简单用法如下：\nimport pandas as pdfrom pyecharts import options as optsfrom pyecharts.charts import Sankey# 数据data = [[ &#x27;Brazil&#x27;, &#x27;Portugal&#x27;, 5 ],       [ &#x27;Brazil&#x27;, &#x27;France&#x27;, 1 ],       [ &#x27;Brazil&#x27;, &#x27;Spain&#x27;, 1 ],       [ &#x27;Brazil&#x27;, &#x27;England&#x27;, 1 ],       [ &#x27;Canada&#x27;, &#x27;Portugal&#x27;, 1 ],       [ &#x27;Canada&#x27;, &#x27;France&#x27;, 5 ],       [ &#x27;Canada&#x27;, &#x27;England&#x27;, 1 ],       [ &#x27;Mexico&#x27;, &#x27;Portugal&#x27;, 1 ],       [ &#x27;Mexico&#x27;, &#x27;France&#x27;, 1 ],       [ &#x27;Mexico&#x27;, &#x27;Spain&#x27;, 5 ],       [ &#x27;Mexico&#x27;, &#x27;England&#x27;, 1 ],       [ &#x27;USA&#x27;, &#x27;Portugal&#x27;, 1 ],       [ &#x27;USA&#x27;, &#x27;France&#x27;, 1 ],       [ &#x27;USA&#x27;, &#x27;Spain&#x27;, 1 ],       [ &#x27;USA&#x27;, &#x27;England&#x27;, 5 ],       [ &#x27;Portugal&#x27;, &#x27;Angola&#x27;, 2 ],       [ &#x27;Portugal&#x27;, &#x27;Senegal&#x27;, 1 ],       [ &#x27;Portugal&#x27;, &#x27;Morocco&#x27;, 1 ],       [ &#x27;Portugal&#x27;, &#x27;South Africa&#x27;, 3 ],       [ &#x27;France&#x27;, &#x27;Angola&#x27;, 1 ],       [ &#x27;France&#x27;, &#x27;Senegal&#x27;, 3 ],       [ &#x27;France&#x27;, &#x27;Mali&#x27;, 3 ],       [ &#x27;France&#x27;, &#x27;Morocco&#x27;, 3 ],       [ &#x27;France&#x27;, &#x27;South Africa&#x27;, 1 ],       [ &#x27;Spain&#x27;, &#x27;Senegal&#x27;, 1 ],       [ &#x27;Spain&#x27;, &#x27;Morocco&#x27;, 3 ],       [ &#x27;Spain&#x27;, &#x27;South Africa&#x27;, 1 ],       [ &#x27;England&#x27;, &#x27;Angola&#x27;, 1 ],       [ &#x27;England&#x27;, &#x27;Senegal&#x27;, 1 ],       [ &#x27;England&#x27;, &#x27;Morocco&#x27;, 2 ],       [ &#x27;England&#x27;, &#x27;South Africa&#x27;, 7 ],       [ &#x27;South Africa&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;South Africa&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;South Africa&#x27;, &#x27;Japan&#x27;, 3 ],       [ &#x27;Angola&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;Angola&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;Angola&#x27;, &#x27;Japan&#x27;, 3 ],       [ &#x27;Senegal&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;Senegal&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;Senegal&#x27;, &#x27;Japan&#x27;, 3 ],       [ &#x27;Mali&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;Mali&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;Mali&#x27;, &#x27;Japan&#x27;, 3 ],       [ &#x27;Morocco&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;Morocco&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;Morocco&#x27;, &#x27;Japan&#x27;, 3 ]]df = pd.DataFrame(data, columns=[&#x27;source&#x27;, &#x27;target&#x27;, &#x27;value&#x27;])print(&#x27;- data shape: &#x27;, df.shape, &#x27;\\n&#x27;)# 生成节点， 先合并源节点和目标节点，然后去除重复的节点，最后输出成 dict 形式nn = pd.concat([df[&#x27;source&#x27;], df[&#x27;target&#x27;]])nn = nn.drop_duplicates()nodes = pd.DataFrame(nn, columns=[&#x27;name&#x27;]).to_dict(orient=&#x27;records&#x27;)print(&#x27;- nodes:\\n&#x27;, nodes, &#x27;\\n&#x27;)# 生成连接， dict 形式links = df.to_dict(orient=&#x27;records&#x27;)print(&#x27;- links:\\n&#x27;, links, &#x27;\\n&#x27;)# 绘制桑基图sk =(    Sankey(init_opts=opts.InitOpts(width=&quot;800px&quot;, height=&quot;600px&quot;)) # 页面大小    .add(        series_name=&quot;legend&quot;, # legend        nodes=nodes,        links=links,        # opacity 透明度； curve 弯曲程度； color 色系        linestyle_opt=opts.LineStyleOpts(opacity=0.2, curve=0.5, color=&quot;source&quot;),         label_opts=opts.LabelOpts(position=&quot;right&quot;), # 节点名称    )    .set_global_opts(title_opts=opts.TitleOpts(title=&quot;sankey&quot;)) # 标题    .render(&quot;sankey.html&quot;) # 保存成 html 文件)\n\n\n\n代码说明：\n\npyecharts的桑基图对于原始数据的格式比较啰嗦，这里用 pandas 处理了一下，还可以修改一下去读取 csv 文件。\npyecharts直接保存图片也比较麻烦，需要用 selenium 之类的工具，配置一大堆；还不如直接在浏览器截图。\n\n\n使用 D3 绘制D3 绘制桑基图貌似更简便一点，可惜不能用 python。\nhttps://github.com/d3/d3-sankey\n这里还有个在线可实时编辑版。\nhttps://observablehq.com/@mbostock/flow-o-matic\n厉害了！\n","categories":["sci"],"tags":["pandas","seaborn"]},{"title":"数据可视化-等高线-pandas透视图-seaborn热力图-桑基图(Sankey)","url":"/2020/02/17/sci-matplotlib/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-pandas%E9%80%8F%E8%A7%86%E5%9B%BE-seaborn%E7%83%AD%E5%8A%9B%E5%9B%BE/","content":"matplotlib绘制等高线ref: https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contour.html\nimport numpy as npimport matplotlib.pyplot as pltx = np.arange(0, 10.0, 0.1)y = np.arange(0, 10.0, 0.1)X, Y = np.meshgrid(x, y)    # 生成x-y网格图Z = X**1.5 + Y**1.5plt.figure()CS = plt.contour(X, Y, Z, levels=6)                   # 设置距离plt.clabel(CS, inline=1, fontsize=10, fmt=&#x27;%d ℃&#x27;)   # 设置标签plt.savefig(&#x27;Temp.png&#x27;, dpi=300, bbox_inches=&#x27;tight&#x27;)plt.show()\n\n\n \n\n\n\npandas透视图1. 创建需要展示的数据import itertoolsimport matplotlib.pyplot as pltimport numpy as npimport pandas as pdimport seaborn as sns# === define paras ==================para_names = [&#x27;layer_n&#x27;, &#x27;activition&#x27;, &#x27;seed&#x27;]layer_n = [1, 2, 3, 4, 5, 6]activition = [&#x27;tanh&#x27;, &#x27;sigmod&#x27;, &#x27;relu&#x27;]seed = [11, 17, 19]# 创建 dataframedf =  pd.DataFrame([], columns=para_names)for values in itertools.product(layer_n, activition, seed):    newline = pd.DataFrame(list(values), index=para_names)    df = df.append(newline.T, ignore_index=True)# 伪造一些训练结果，方便展示# activ_2_num = pd.factorize(df[&#x27;activition&#x27;])[0].astype(&#x27;int&#x27;)  # 激活函数是字符类型，将其映射成整数形activ_dict = &#123;&#x27;tanh&#x27;: 2, &#x27;sigmod&#x27;: 4, &#x27;relu&#x27;: 6&#125;  # 也可以直接定义字典，然后replacedf[&#x27;results&#x27;] = df[&#x27;layer_n&#x27;] + df[&#x27;activition&#x27;].replace(activ_dict) + df[&#x27;seed&#x27;] * 0.1 + np.random.random((54,))df[&#x27;results&#x27;] = df[&#x27;results&#x27;].astype(&#x27;float&#x27;)  # 转换成浮点类型print(df.head())\n\n输出：\n  layer_n activition seed   results\n0       1       tanh   11  4.261361\n1       1       tanh   17  4.822595\n2       1       tanh   19  4.929088\n3       1     sigmod   11  6.698047\n4       1     sigmod   17  7.020531\n\n\n2. 绘制带误差的折线图展示训练结果# 绘制带误差的折线图，横轴为网络层数，纵轴为训练结果，# 激活函数采用不同颜色的线型，误差来自于没有指定的列：不同的随机种子seedplt.figure(figsize=(8, 6))sns.lineplot(x=&#x27;layer_n&#x27;, y=&#x27;results&#x27;, hue=&#x27;activition&#x27;,  style=&#x27;activition&#x27;,              markers=True, data=df)plt.grid(linestyle=&#x27;:&#x27;)plt.show()\n\n\n\n\n3. 使用pandas透视图、seaborn热力图来展示# 创建透视图，# 对于没有指定的列（seed），按最大值进行统计dt = pd.pivot_table(df, index=[&#x27;layer_n&#x27;], columns=[&#x27;activition&#x27;], values=[&#x27;results&#x27;], aggfunc=[max])print(dt)print(dt.columns)  # 找到最大值、最大值所对应的索引max_value, max_idx = dt.stack().max(), dt.stack().idxmax()print(f&#x27; - the max value is &#123;max_value&#125;;\\n - the index is &#123;max_idx&#125;...&#x27;)# 透视图变成了多重索引(MultiIndex)，重新调整一下new_col = dt.columns.levels[2]dt.columns = new_col# dt.index = list(dt.index)print(dt)dt.sort_index(axis=0, ascending=False, inplace=True)  # 必要时将索引重新排序dt.sort_index(axis=1, ascending=False, inplace=True)  # 必要时将索引重新排序# 绘制热力图，横轴为网络层数，纵轴为激活函数，# 栅格的颜色代表训练结果，颜色越深结果越好plt.figure(figsize=(8, 6))g = sns.heatmap(dt, vmin=0.0, annot=True, fmt=&#x27;.2g&#x27;, cmap=&#x27;Blues&#x27;, cbar=True)plt.show()\n\n\n\n\nref:\n\npandas.pivot_table https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html\n\nseaborn.lineplot https://seaborn.pydata.org/generated/seaborn.lineplot.html\n\nseaborn.heatplot https://seaborn.pydata.org/generated/seaborn.heatmap.html\n\n\n\n桑基图(Sankey)1. 桑基图(Sankey)介绍sankey图可用于数据从一系列节点到另一系列节点流入流出的可视化。\n主要有两个基本概念：\n\n节点 （nodes）\n连接 （links）： 源节点至目标节点之间的关系，每个连接包括三个元素：\nsource： 源节点\ntarget： 目标节点\nvalue： 数据\n\n\n\n\nref: https://developers.google.com/chart/interactive/docs/gallery/sankey\n\n2. 绘制桑基图（使用pyecharts）常用的绘图库 matplotlib, seaborn 好像不支持桑基图， 这里使用了 pyecharts 。\n这里 https://gallery.pyecharts.org/#/Sankey/sankey_base 有几个例子。\n\n\n简单用法如下：\nimport pandas as pdfrom pyecharts import options as optsfrom pyecharts.charts import Sankey# 数据data = [[ &#x27;Brazil&#x27;, &#x27;Portugal&#x27;, 5 ],       [ &#x27;Brazil&#x27;, &#x27;France&#x27;, 1 ],       [ &#x27;Brazil&#x27;, &#x27;Spain&#x27;, 1 ],       [ &#x27;Brazil&#x27;, &#x27;England&#x27;, 1 ],       [ &#x27;Canada&#x27;, &#x27;Portugal&#x27;, 1 ],       [ &#x27;Canada&#x27;, &#x27;France&#x27;, 5 ],       [ &#x27;Canada&#x27;, &#x27;England&#x27;, 1 ],       [ &#x27;Mexico&#x27;, &#x27;Portugal&#x27;, 1 ],       [ &#x27;Mexico&#x27;, &#x27;France&#x27;, 1 ],       [ &#x27;Mexico&#x27;, &#x27;Spain&#x27;, 5 ],       [ &#x27;Mexico&#x27;, &#x27;England&#x27;, 1 ],       [ &#x27;USA&#x27;, &#x27;Portugal&#x27;, 1 ],       [ &#x27;USA&#x27;, &#x27;France&#x27;, 1 ],       [ &#x27;USA&#x27;, &#x27;Spain&#x27;, 1 ],       [ &#x27;USA&#x27;, &#x27;England&#x27;, 5 ],       [ &#x27;Portugal&#x27;, &#x27;Angola&#x27;, 2 ],       [ &#x27;Portugal&#x27;, &#x27;Senegal&#x27;, 1 ],       [ &#x27;Portugal&#x27;, &#x27;Morocco&#x27;, 1 ],       [ &#x27;Portugal&#x27;, &#x27;South Africa&#x27;, 3 ],       [ &#x27;France&#x27;, &#x27;Angola&#x27;, 1 ],       [ &#x27;France&#x27;, &#x27;Senegal&#x27;, 3 ],       [ &#x27;France&#x27;, &#x27;Mali&#x27;, 3 ],       [ &#x27;France&#x27;, &#x27;Morocco&#x27;, 3 ],       [ &#x27;France&#x27;, &#x27;South Africa&#x27;, 1 ],       [ &#x27;Spain&#x27;, &#x27;Senegal&#x27;, 1 ],       [ &#x27;Spain&#x27;, &#x27;Morocco&#x27;, 3 ],       [ &#x27;Spain&#x27;, &#x27;South Africa&#x27;, 1 ],       [ &#x27;England&#x27;, &#x27;Angola&#x27;, 1 ],       [ &#x27;England&#x27;, &#x27;Senegal&#x27;, 1 ],       [ &#x27;England&#x27;, &#x27;Morocco&#x27;, 2 ],       [ &#x27;England&#x27;, &#x27;South Africa&#x27;, 7 ],       [ &#x27;South Africa&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;South Africa&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;South Africa&#x27;, &#x27;Japan&#x27;, 3 ],       [ &#x27;Angola&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;Angola&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;Angola&#x27;, &#x27;Japan&#x27;, 3 ],       [ &#x27;Senegal&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;Senegal&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;Senegal&#x27;, &#x27;Japan&#x27;, 3 ],       [ &#x27;Mali&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;Mali&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;Mali&#x27;, &#x27;Japan&#x27;, 3 ],       [ &#x27;Morocco&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;Morocco&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;Morocco&#x27;, &#x27;Japan&#x27;, 3 ]]df = pd.DataFrame(data, columns=[&#x27;source&#x27;, &#x27;target&#x27;, &#x27;value&#x27;])print(&#x27;- data shape: &#x27;, df.shape, &#x27;\\n&#x27;)# 生成节点， 先合并源节点和目标节点，然后去除重复的节点，最后输出成 dict 形式nn = pd.concat([df[&#x27;source&#x27;], df[&#x27;target&#x27;]])nn = nn.drop_duplicates()nodes = pd.DataFrame(nn, columns=[&#x27;name&#x27;]).to_dict(orient=&#x27;records&#x27;)print(&#x27;- nodes:\\n&#x27;, nodes, &#x27;\\n&#x27;)# 生成连接， dict 形式links = df.to_dict(orient=&#x27;records&#x27;)print(&#x27;- links:\\n&#x27;, links, &#x27;\\n&#x27;)# 绘制桑基图sk =(    Sankey(init_opts=opts.InitOpts(width=&quot;800px&quot;, height=&quot;600px&quot;)) # 页面大小    .add(        series_name=&quot;legend&quot;, # legend        nodes=nodes,        links=links,        # opacity 透明度； curve 弯曲程度； color 色系        linestyle_opt=opts.LineStyleOpts(opacity=0.2, curve=0.5, color=&quot;source&quot;),         label_opts=opts.LabelOpts(position=&quot;right&quot;), # 节点名称    )    .set_global_opts(title_opts=opts.TitleOpts(title=&quot;sankey&quot;)) # 标题    .render(&quot;sankey.html&quot;) # 保存成 html 文件)\n\n\n\n代码说明：\n\npyecharts的桑基图对于原始数据的格式比较啰嗦，这里用 pandas 处理了一下，还可以修改一下去读取 csv 文件。\npyecharts直接保存图片也比较麻烦，需要用 selenium 之类的工具，配置一大堆；还不如直接在浏览器截图。\n\n\n使用 D3 绘制D3 绘制桑基图貌似更简便一点，可惜不能用 python。\nhttps://github.com/d3/d3-sankey\n这里还有个在线可实时编辑版。\nhttps://observablehq.com/@mbostock/flow-o-matic\n厉害了！\n","categories":["sci"],"tags":["pandas","seaborn"]},{"title":"数据可视化-等高线-pandas透视图-seaborn热力图-桑基图(Sankey)","url":"/2020/02/17/sci-matplotlib/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-%E6%A1%91%E5%9F%BA%E5%9B%BE(Sankey)/","content":"matplotlib绘制等高线ref: https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contour.html\nimport numpy as npimport matplotlib.pyplot as pltx = np.arange(0, 10.0, 0.1)y = np.arange(0, 10.0, 0.1)X, Y = np.meshgrid(x, y)    # 生成x-y网格图Z = X**1.5 + Y**1.5plt.figure()CS = plt.contour(X, Y, Z, levels=6)                   # 设置距离plt.clabel(CS, inline=1, fontsize=10, fmt=&#x27;%d ℃&#x27;)   # 设置标签plt.savefig(&#x27;Temp.png&#x27;, dpi=300, bbox_inches=&#x27;tight&#x27;)plt.show()\n\n\n \n\n\n\npandas透视图1. 创建需要展示的数据import itertoolsimport matplotlib.pyplot as pltimport numpy as npimport pandas as pdimport seaborn as sns# === define paras ==================para_names = [&#x27;layer_n&#x27;, &#x27;activition&#x27;, &#x27;seed&#x27;]layer_n = [1, 2, 3, 4, 5, 6]activition = [&#x27;tanh&#x27;, &#x27;sigmod&#x27;, &#x27;relu&#x27;]seed = [11, 17, 19]# 创建 dataframedf =  pd.DataFrame([], columns=para_names)for values in itertools.product(layer_n, activition, seed):    newline = pd.DataFrame(list(values), index=para_names)    df = df.append(newline.T, ignore_index=True)# 伪造一些训练结果，方便展示# activ_2_num = pd.factorize(df[&#x27;activition&#x27;])[0].astype(&#x27;int&#x27;)  # 激活函数是字符类型，将其映射成整数形activ_dict = &#123;&#x27;tanh&#x27;: 2, &#x27;sigmod&#x27;: 4, &#x27;relu&#x27;: 6&#125;  # 也可以直接定义字典，然后replacedf[&#x27;results&#x27;] = df[&#x27;layer_n&#x27;] + df[&#x27;activition&#x27;].replace(activ_dict) + df[&#x27;seed&#x27;] * 0.1 + np.random.random((54,))df[&#x27;results&#x27;] = df[&#x27;results&#x27;].astype(&#x27;float&#x27;)  # 转换成浮点类型print(df.head())\n\n输出：\n  layer_n activition seed   results\n0       1       tanh   11  4.261361\n1       1       tanh   17  4.822595\n2       1       tanh   19  4.929088\n3       1     sigmod   11  6.698047\n4       1     sigmod   17  7.020531\n\n\n2. 绘制带误差的折线图展示训练结果# 绘制带误差的折线图，横轴为网络层数，纵轴为训练结果，# 激活函数采用不同颜色的线型，误差来自于没有指定的列：不同的随机种子seedplt.figure(figsize=(8, 6))sns.lineplot(x=&#x27;layer_n&#x27;, y=&#x27;results&#x27;, hue=&#x27;activition&#x27;,  style=&#x27;activition&#x27;,              markers=True, data=df)plt.grid(linestyle=&#x27;:&#x27;)plt.show()\n\n\n\n\n3. 使用pandas透视图、seaborn热力图来展示# 创建透视图，# 对于没有指定的列（seed），按最大值进行统计dt = pd.pivot_table(df, index=[&#x27;layer_n&#x27;], columns=[&#x27;activition&#x27;], values=[&#x27;results&#x27;], aggfunc=[max])print(dt)print(dt.columns)  # 找到最大值、最大值所对应的索引max_value, max_idx = dt.stack().max(), dt.stack().idxmax()print(f&#x27; - the max value is &#123;max_value&#125;;\\n - the index is &#123;max_idx&#125;...&#x27;)# 透视图变成了多重索引(MultiIndex)，重新调整一下new_col = dt.columns.levels[2]dt.columns = new_col# dt.index = list(dt.index)print(dt)dt.sort_index(axis=0, ascending=False, inplace=True)  # 必要时将索引重新排序dt.sort_index(axis=1, ascending=False, inplace=True)  # 必要时将索引重新排序# 绘制热力图，横轴为网络层数，纵轴为激活函数，# 栅格的颜色代表训练结果，颜色越深结果越好plt.figure(figsize=(8, 6))g = sns.heatmap(dt, vmin=0.0, annot=True, fmt=&#x27;.2g&#x27;, cmap=&#x27;Blues&#x27;, cbar=True)plt.show()\n\n\n\n\nref:\n\npandas.pivot_table https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.pivot_table.html\n\nseaborn.lineplot https://seaborn.pydata.org/generated/seaborn.lineplot.html\n\nseaborn.heatplot https://seaborn.pydata.org/generated/seaborn.heatmap.html\n\n\n\n桑基图(Sankey)1. 桑基图(Sankey)介绍sankey图可用于数据从一系列节点到另一系列节点流入流出的可视化。\n主要有两个基本概念：\n\n节点 （nodes）\n连接 （links）： 源节点至目标节点之间的关系，每个连接包括三个元素：\nsource： 源节点\ntarget： 目标节点\nvalue： 数据\n\n\n\n\nref: https://developers.google.com/chart/interactive/docs/gallery/sankey\n\n2. 绘制桑基图（使用pyecharts）常用的绘图库 matplotlib, seaborn 好像不支持桑基图， 这里使用了 pyecharts 。\n这里 https://gallery.pyecharts.org/#/Sankey/sankey_base 有几个例子。\n\n\n简单用法如下：\nimport pandas as pdfrom pyecharts import options as optsfrom pyecharts.charts import Sankey# 数据data = [[ &#x27;Brazil&#x27;, &#x27;Portugal&#x27;, 5 ],       [ &#x27;Brazil&#x27;, &#x27;France&#x27;, 1 ],       [ &#x27;Brazil&#x27;, &#x27;Spain&#x27;, 1 ],       [ &#x27;Brazil&#x27;, &#x27;England&#x27;, 1 ],       [ &#x27;Canada&#x27;, &#x27;Portugal&#x27;, 1 ],       [ &#x27;Canada&#x27;, &#x27;France&#x27;, 5 ],       [ &#x27;Canada&#x27;, &#x27;England&#x27;, 1 ],       [ &#x27;Mexico&#x27;, &#x27;Portugal&#x27;, 1 ],       [ &#x27;Mexico&#x27;, &#x27;France&#x27;, 1 ],       [ &#x27;Mexico&#x27;, &#x27;Spain&#x27;, 5 ],       [ &#x27;Mexico&#x27;, &#x27;England&#x27;, 1 ],       [ &#x27;USA&#x27;, &#x27;Portugal&#x27;, 1 ],       [ &#x27;USA&#x27;, &#x27;France&#x27;, 1 ],       [ &#x27;USA&#x27;, &#x27;Spain&#x27;, 1 ],       [ &#x27;USA&#x27;, &#x27;England&#x27;, 5 ],       [ &#x27;Portugal&#x27;, &#x27;Angola&#x27;, 2 ],       [ &#x27;Portugal&#x27;, &#x27;Senegal&#x27;, 1 ],       [ &#x27;Portugal&#x27;, &#x27;Morocco&#x27;, 1 ],       [ &#x27;Portugal&#x27;, &#x27;South Africa&#x27;, 3 ],       [ &#x27;France&#x27;, &#x27;Angola&#x27;, 1 ],       [ &#x27;France&#x27;, &#x27;Senegal&#x27;, 3 ],       [ &#x27;France&#x27;, &#x27;Mali&#x27;, 3 ],       [ &#x27;France&#x27;, &#x27;Morocco&#x27;, 3 ],       [ &#x27;France&#x27;, &#x27;South Africa&#x27;, 1 ],       [ &#x27;Spain&#x27;, &#x27;Senegal&#x27;, 1 ],       [ &#x27;Spain&#x27;, &#x27;Morocco&#x27;, 3 ],       [ &#x27;Spain&#x27;, &#x27;South Africa&#x27;, 1 ],       [ &#x27;England&#x27;, &#x27;Angola&#x27;, 1 ],       [ &#x27;England&#x27;, &#x27;Senegal&#x27;, 1 ],       [ &#x27;England&#x27;, &#x27;Morocco&#x27;, 2 ],       [ &#x27;England&#x27;, &#x27;South Africa&#x27;, 7 ],       [ &#x27;South Africa&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;South Africa&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;South Africa&#x27;, &#x27;Japan&#x27;, 3 ],       [ &#x27;Angola&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;Angola&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;Angola&#x27;, &#x27;Japan&#x27;, 3 ],       [ &#x27;Senegal&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;Senegal&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;Senegal&#x27;, &#x27;Japan&#x27;, 3 ],       [ &#x27;Mali&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;Mali&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;Mali&#x27;, &#x27;Japan&#x27;, 3 ],       [ &#x27;Morocco&#x27;, &#x27;China&#x27;, 5 ],       [ &#x27;Morocco&#x27;, &#x27;India&#x27;, 1 ],       [ &#x27;Morocco&#x27;, &#x27;Japan&#x27;, 3 ]]df = pd.DataFrame(data, columns=[&#x27;source&#x27;, &#x27;target&#x27;, &#x27;value&#x27;])print(&#x27;- data shape: &#x27;, df.shape, &#x27;\\n&#x27;)# 生成节点， 先合并源节点和目标节点，然后去除重复的节点，最后输出成 dict 形式nn = pd.concat([df[&#x27;source&#x27;], df[&#x27;target&#x27;]])nn = nn.drop_duplicates()nodes = pd.DataFrame(nn, columns=[&#x27;name&#x27;]).to_dict(orient=&#x27;records&#x27;)print(&#x27;- nodes:\\n&#x27;, nodes, &#x27;\\n&#x27;)# 生成连接， dict 形式links = df.to_dict(orient=&#x27;records&#x27;)print(&#x27;- links:\\n&#x27;, links, &#x27;\\n&#x27;)# 绘制桑基图sk =(    Sankey(init_opts=opts.InitOpts(width=&quot;800px&quot;, height=&quot;600px&quot;)) # 页面大小    .add(        series_name=&quot;legend&quot;, # legend        nodes=nodes,        links=links,        # opacity 透明度； curve 弯曲程度； color 色系        linestyle_opt=opts.LineStyleOpts(opacity=0.2, curve=0.5, color=&quot;source&quot;),         label_opts=opts.LabelOpts(position=&quot;right&quot;), # 节点名称    )    .set_global_opts(title_opts=opts.TitleOpts(title=&quot;sankey&quot;)) # 标题    .render(&quot;sankey.html&quot;) # 保存成 html 文件)\n\n\n\n代码说明：\n\npyecharts的桑基图对于原始数据的格式比较啰嗦，这里用 pandas 处理了一下，还可以修改一下去读取 csv 文件。\npyecharts直接保存图片也比较麻烦，需要用 selenium 之类的工具，配置一大堆；还不如直接在浏览器截图。\n\n\n使用 D3 绘制D3 绘制桑基图貌似更简便一点，可惜不能用 python。\nhttps://github.com/d3/d3-sankey\n这里还有个在线可实时编辑版。\nhttps://observablehq.com/@mbostock/flow-o-matic\n厉害了！\n","categories":["sci"],"tags":["pandas","seaborn"]},{"title":"元宵","url":"/2020/02/08/yoyo/20200208-%E5%85%83%E5%AE%B5%E8%8A%82/","content":"\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"听不到","url":"/2020/02/07/yoyo/20200207-%E5%90%AC%E4%B8%8D%E5%88%B0/","content":"悠悠：我又听不到你说话了，我的耳朵又听不到说话了。\n妈妈：怎么了？耳朵哪不舒服了？\n悠悠：你不说表扬的话，我都听不到。\n妈妈：[捂脸][捂脸][捂脸][捂脸]\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"raspberry pi 运行状态提醒","url":"/2020/02/03/raspi/raspberry-pi-%E8%BF%90%E8%A1%8C%E7%8A%B6%E6%80%81/","content":"1.获取运行状态获取树莓派运行状态用到的命令如下表：\n\n\n\n命令\n说明\n\n\n\nvcgencmd measure_temp\n获取CPU温度\n\n\ntop\n获取CPU使用率\n\n\nfree\n获取RAM使用率\n\n\ndf\n获取DISK使用率\n\n\nifconfig\n获取IP地址\n\n\n\n1.1 获取CPU温度：\n\n$ vcgencmd measure_temp    temp=40.8C   # 直接返回温度，只要把 temp= 去掉就行\n\n\n\n\n1.2 获取CPU使用率\n\n$ top -bn1    top - 16:27:28 up 1 day, 18:49,  1 user,  load average: 0.00, 0.00, 0.00    Tasks: 105 total,   1 running, 104 sleeping,   0 stopped,   0 zombie    %Cpu(s):  1.4 us,  2.7 sy,  0.0 ni, 95.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st    MiB Mem :    926.1 total,    697.2 free,     51.3 used,    177.6 buff/cache    MiB Swap:    100.0 total,    100.0 free,      0.0 used.    797.4 avail Mem    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND    411 pi        20   0   10188   2804   2500 R   5.9   0.3   0:00.04 top    ...    ...# -bn1 参数： n1指定只运行一次，b输出结果为batch-mode，避免出现乱码# 可以看到CPU的信息在第3行，只要输出CPU这一行$ top -bn1 | awk &#x27;/Cpu\\(s\\)/&#x27;    %Cpu(s):  1.4 us,  2.7 sy,  0.0 ni, 95.9 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st# 缩写分别是user, system, nice, idle, wait, ...# 计算CPU使用率等于 1 - idle%\n\n\n1.3 获取RAM使用率\n\n$ free -m                total        used        free      shared  buff/cache   available    Mem:            926          52         696          23         177         796    Swap:            99           0          99# -m 参数是指定输出结果以 MB 为单位# 修改一下命令，只要输出 Mem 这一行$ free -m | awk &#x27;/Mem/&#x27;    Mem:            926          52         696          23         177         796# 计算RAM使用率等于 (total - available) / total； （仅供参考）\n\n\n1.4 获取DISK使用率\n\n$ df -h    Filesystem      Size  Used Avail Use% Mounted on    /dev/root        29G  1.7G   27G   6% /    devtmpfs        459M     0  459M   0% /dev    tmpfs           464M     0  464M   0% /dev/shm    tmpfs           464M   24M  440M   6% /run    tmpfs           5.0M  4.0K  5.0M   1% /run/lock    tmpfs           464M     0  464M   0% /sys/fs/cgroup    /dev/mmcblk0p1  253M   53M  200M  21% /boot    tmpfs            93M     0   93M   0% /run/user/1000# -h 参数是指定输出结果人性化，自动选择单位# 修改一下命令，只要输出 /dev/root 这一行$ df -h | awk &#x27;/root/&#x27;    /dev/root        29G  1.7G   27G   6% /\n\n\n1.5 获取 IP 地址\n\n$ sudo ifconfig wlan0    wlan0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500            inet 192.168.1.12  netmask 255.255.255.0  broadcast 192.168.1.255            ...            ...# ifconfig 命令要用管理员运行# wlan0 参数是指wifi网络；如果是有线网络，改为： eth0# 修改一下命令，只要输出 inet 这一行$ sudo ifconfig wlan0 | awk &#x27;/inet/&#x27;    inet 192.168.1.12  netmask 255.255.255.0  broadcast 192.168.1.255\n\n2. 完整的代码import osimport timeimport requestsdef now():    return &#x27;[&#x27; + time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;) + &#x27;]&#x27;# run commanddef run_cmd(cmd):    p = os.popen(cmd).readline().strip().split()    return pcpu_temp = run_cmd(&quot; vcgencmd measure_temp &quot;)cpu_stat = run_cmd(&quot; top -bn1 | awk &#x27;/Cpu\\(s\\)/&#x27; &quot;)cpu_used = 1 - float(cpu_stat[7])/100.0ram_stat = run_cmd(&quot; free -m | awk &#x27;/Mem/&#x27; &quot;)ram_used = (int(ram_stat[1]) - int(ram_stat[6])) / float(ram_stat[1])dsk_stat = run_cmd(&quot; df -h | awk &#x27;/root/&#x27; &quot;)ipconfig = run_cmd(&quot;sudo ifconfig wlan0 | awk &#x27;/inet/&#x27;&quot;)print(cpu_temp, cpu_stat, cpu_used, ram_stat, ram_used, dsk_stat, ipconfig, sep=&#x27;\\n&#x27;)###status = now() + &#x27;\\n\\n&#x27;status += &#x27;Raspi Status:       \\n&#x27;status += &#x27;CPU  Used  = &#123;:.2%&#125; \\n&#x27;.format(cpu_used)status += &#x27;CPU  Temp  = &#123;&#125;     \\n&#x27;.format(cpu_temp[0].replace(&#x27;temp=&#x27;, &#x27;&#x27;))status += &#x27;RAM  Total = &#123;&#125;M    \\n&#x27;.format(ram_stat[1])status += &#x27;RAM  Used  = &#123;:.2%&#125; \\n&#x27;.format(ram_used)status += &#x27;DISK Total = &#123;&#125;     \\n&#x27;.format(dsk_stat[1])status += &#x27;DISK Used  = &#123;&#125;     \\n&#x27;.format(dsk_stat[2])status += &#x27;DISK Perc  = &#123;&#125;     \\n&#x27;.format(dsk_stat[4])status += &#x27;IP Address = &#123;&#125;     \\n&#x27;.format(ipconfig[1])print(status)# Send to ftqqkey = &#x27;SCUxxxxxxxxxxxxxxx&#x27;api = &#x27;https://sc.ftqq.com/&#123;&#125;.send&#x27;.format(key)send_data = &#123;&#x27;text&#x27;: &#x27;Raspi_Status&#x27;, &#x27;desp&#x27;: status&#125;res = requests.post(api, data=send_data)print(res.content)# Send to wechatimport wechat_push as wpaccess_token, _ = wp.get_access_token(wp.corp_id, wp.corp_secret)wp.wechat_push_text(agent_id=wp.agent_id, access_token=access_token, message=status)\n","categories":["raspi"],"tags":["raspberry-pi"]},{"title":"群晖python3配置","url":"/2020/01/16/synology/%E7%BE%A4%E6%99%96-python3%E9%85%8D%E7%BD%AE/","content":"pip3 安装、配置群晖默认不支持 apt-get 之类的命令，使用 wget 下载 get-pip.py 安装 pip。\nwget -O /tmp/get-pip.py &#x27;https://bootstrap.pypa.io/get-pip.py&#x27;python3 /tmp/get-pip.py# 权限不够的话，加上 --user# python3 /tmp/get-pip.py --userrm /tmp/get-pip.py\n\n安装之后提示 pip3 的安装目录（一般是 /homes/USERNAME/.local/bin）不在系统的环境变量里。每次要先跳到安装目录里。\ncd .local/bin./pip3 -V./pip3 list\n\n\n配置环境变量可以手动把 pip3 目录加入环境变量。\nvim ~/.bash_profile# 写入以下内容export PATH=$PATH:/volume1/homes/USERNAME/.local/bin# 保存、退出# 运行以下命令使生效source ~/.bash_profile# 最后可以检查一下echo $PATH\n\n更改源pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simplepip3 config list\n\npip3 卸载python3 -m pip uninstall pip\n\n\nref：\n\nhttps://github.com/docker-library/python/blob/855b85c8309e925814dfa97d61310080dcd08db6/3.5/Dockerfile#L53\n\n","categories":["synology"],"tags":["python","synology"]},{"title":"常用 DNS","url":"/2019/12/30/apps/%E5%B8%B8%E7%94%A8DNS/","content":"国内\n腾讯 DNS (DNSPod)\n\n119.29.29.29182.254.116.116\n\n\n114DNS\n\n114.114.114.114114.114.115.115\n\n\n清华大学 TUNA 协会\n\n101.6.6.6\n\n国外\nGoogle Public DNS\n\n8.8.8.88.8.4.4\n\n\nCloudflare DNS\n\n1.1.1.11.0.0.1\n","categories":["apps"],"tags":["DNS"]},{"title":"厦门","url":"/2019/11/15/yoyo/20191115-%E5%8E%A6%E9%97%A8/","content":"\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"深度学习调参-keras,tensorflow设置随机种子，保证结果可复现","url":"/2019/11/03/tensorflow/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%B0%83%E5%8F%82-keras,tensorflow%E8%AE%BE%E7%BD%AE%E9%9A%8F%E6%9C%BA%E7%A7%8D%E5%AD%90%EF%BC%8C%E4%BF%9D%E8%AF%81%E7%BB%93%E6%9E%9C%E5%8F%AF%E5%A4%8D%E7%8E%B0/","content":"keras,tensorflow设置随机种子，保证结果可复现ref: https://keras.io/getting-started/faq/#how-can-i-obtain-reproducible-results-using-keras-during-development\nref: https://tensorflow.google.cn/api_docs/python/tf/random/set_seed\nnp.random.seed(42)# tensorflow V1.xtf.set_random_seed(1234)# tensorflow V2.x# For Tensorflow 2.0 tf.random.set_random_seed(seed) changed to tf.random.set_seed(seed).tf.random.set_seed(1234)\n","categories":["tensorflow"],"tags":["tensorflow","keras"]},{"title":"Hexo 使用 Github Actions 自动更新","url":"/2019/10/10/hexo/hexo-%E4%BD%BF%E7%94%A8Github-Actions%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/","content":"准备\n需要两个 github 仓库：\n一个用于发布页面： XXXXXX.github.io\n一个用于放源码： hexo-source （可设为隐私仓库）\n\n\n\n1. 创建 hexo-source 仓库\n在hexo的根目录下（ ~&#x2F;hexo）运行：\n\ncd hexogit initgit add .git commit -m &quot;first commit&quot;git remote add origin https://github.com/XXXXXX/hexo-source.gitgit push -u origin master\n\n2. Github Actions 设置\n运行 ssh-keygen 生成一对密钥。\n\nssh-keygen\n\n\n打开 XXXXXX.github.io 仓库设置，在 Deploye keys 选项中，添加公钥~/.ssh/id_rsa.pub的内容。\n打开 hexo-source 仓库设置，在 Secrets 选项中，新建 repo secret: 名称设为GITHUB_ACTION, 内容为~/.ssh/id_rsa的内容。\n\n\n\n3. 添加 Github Actions 配置文件内容如下：\nname: Hexo Auto-Deployon: [push]jobs:  build:    name: Hexo Auto-Deploy by GitHub Actions    runs-on: ubuntu-latest    steps:    - name: 1. git checkout...      uses: actions/checkout@v1          - name: 2. setup nodejs...      uses: actions/setup-node@v1        - name: 3. install hexo...      run: |        npm install hexo-cli -g        npm install            - name: 4. hexo generate public files...      run: |        hexo clean        hexo g      - name: 5. hexo deploy ...      run: |        mkdir -p ~/.ssh/        echo &quot;$&#123;&#123; secrets.GITHUB_ACTION &#125;&#125;&quot; &gt; ~/.ssh/id_rsa        chmod 600 ~/.ssh/id_rsa        ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts                git config --global user.name &quot;XXXXXX&quot;        git config --global user.email &quot;XXXXXX@XXXXXX.com&quot;        git config --global core.quotepath false                hexo d\n\n\n以上。\n","categories":["hexo"],"tags":["hexo","github_actions"]},{"title":"latex插入eps图片","url":"/2019/10/08/sci/%E8%AE%BA%E6%96%87-latex%E6%8F%92%E5%85%A5eps%E5%9B%BE%E7%89%87/","content":"1. 创建eps图片\n从png图片转换: texlive中自带了一个命令： bmeps\n\nbmeps img.png img.eps\n\n\n从python创建, 调用matplotlib能直接存为eps格式，可直接保存一份eps的\n\nplt.savefig(&#x27;fig1.eps&#x27;, dpi=300)\n\n\nPPT转为png、eps的方法\nppt导出png: 默认dpi较低，需要在注册表改一下dpi&#x3D;300。\nppt导出eps: 先另存为pdf，再用adobe acrobat转为eps。\n\n\n\n2. 去除eps图片的空白\n\n有时候遇到eps图片周边空白较多的情况，需要把空白去掉。建议生成图片时就设置好，而不是去修改eps文件。\n2.1 python调用matplotlib保存图片时, 调整图片的边界框（bounding box)。plt.savefig(&#x27;fig1.eps&#x27;, dpi=300, bbox_inches=&#x27;tight&#x27;)\n\n2.2 python调用matplotlib创建图片包含多个子图时，设置为紧凑布局。fig.tight_layout() # 自动调整# fig.tight_layout(pad=1.0，w_pad=1.0， h_pad=1.0)  # 精确调整\n\n2.3 ppt的图片可直接修改幻灯片母版页大小。A4 paper size：   21*29.7 cm   // 单个图片A6 paper size： 10.5*14.8 cm   // 并排放两个图片\n\n2.4 使用Gsview直接修改eps图片。Ctex套件中带有Gsview工具，可以裁剪EPS。（Gsview官网： https://www.gsview.com/）\n使用步骤：\n\nGsvier菜单栏 -&gt; Options -&gt; Show bounding boxs -&gt; 选中\nFile -&gt; PS to EPS -&gt; 不选 Automatically calculate Bounding Box -&gt; 然后点击yes -&gt; 保存。\n\n","categories":["sci"],"tags":["latex"]},{"title":"latex 环境安装与配置","url":"/2019/10/06/sci/%E8%AE%BA%E6%96%87-latex%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/","content":"在 win10 下尝试过的 latex 环境有以下三种：\n\ntexlive + texstudio \nctex (集成 miktex + winedt， 以及中文支持)\nmiktex + texstudio &#x2F; （vscode + latex workshop）\n\n1. texlive + texstudio这个是最常用的配置方法，建议新手从这个开始使用。优点：基本适用于所有的场景（中文除外），一劳永逸；缺点：默认不支持中文，安装包巨大。\n\ntexlive 安装： 可以在线安装，也可以离线安装（推荐，安装包3.2G），安装后6G的空间。\n\n推荐清华大学源： https://mirrors.tuna.tsinghua.edu.cn/CTAN/systems/texlive\n\n\ntexstudio 安装：下载安装包（~89M），正常的安装方法即可。\n\n官网下载： http://texstudio.sourceforge.net/\nScoop 安装： scoop install texstudio\n\n\ntexstudio 默认的配置就基本够用，不要乱改。\n\n中文，字体，字号\n高级配置：行号、空白等\n\n\n\n\nps: texstudio的提示、警告、错误信息非常明确，出现问题先看提示。\n\n\n\n2. ctex这个其实是 miktex + winedt + 中文支持 的集成版，用中文写作时可直接用。\n但是最后一次更新是在2016年4月，坑比较多。\n\nctex 安装（完整版安装包 ~1.3G 左右）： http://www.ctex.org/CTeXDownload\n\n3. miktex + texstudio &#x2F; (vscode + latex workshop)这是适合折腾的使用方法。\n\n使用 Scoop 安装 miktex， texstudio， perl scoop install texstudioscoop install latex         # miktex， ~200Mscoop install perl          # latexmk 需要用 perl 环境， ~150M\n在 vscode 里 安装 latex workshop 插件，可实时预览\n这是比较折腾的做法， miktex中只有基本的包； 后续用到需要的包，会自动提示下载\n慢慢折腾吧\n\n\nlatex 入门教程\n《LATEX 排版学习笔记》\nhttp://static.latexstudio.net/wp-content/uploads/2014/02/latexlog-1310.pdf\n\n\n《一份（不太）简短的 LATEX 介绍》\nhttp://mirrors.sjtug.sjtu.edu.cn/ctan/info/lshort/chinese/lshort-zh-cn.pdf\n\n\n\nlatex 简单用法\n图片转换 \n\npng转eps: texlive中 自带了一个命令： bmeps\npython 调用 matplotlib 能直接存为 eps 格式，可直接多保存一份eps的\n\n\nPPT转为png、eps \n\nppt导出png: 默认dpi较低，需要在注册表改一下dpi&#x3D;300。\nppt导出eps: 先另存为pdf，再用 adobe acrobat 转为eps。\n\n\n图片并排\n\n\n\\begin&#123;figure&#125;[h]\\begin&#123;tabular&#125;&#123;cc&#125;  \\begin&#123;minipage&#125;[t]&#123;0.5\\linewidth&#125;    \\centering    &#123;\\includegraphics[]&#123;2d.png&#125;&#125; \\\\    &#123;(a) 2D Plot&#125;  \\end&#123;minipage&#125;  \\begin&#123;minipage&#125;[t]&#123;0.5\\linewidth&#125;    \\centering    \\includegraphics[]&#123;3d.png&#125; \\\\    &#123;(b) 3D Plot&#125;  \\end&#123;minipage&#125;\\end&#123;tabular&#125;\\caption&#123;Results&#125;\\end&#123;figure&#125;\n\n\n多行公式\n\n\\begin&#123;equation&#125;\\left\\&#123;\\begin&#123;array&#125;&#123;rl&#125;\tf(x) &amp; = \\sin (x) \\\\\tf(x) &amp; = \\cos (x) \\\\\tf(x) &amp; = \\tan (x)\\end&#123;array&#125;\\right.\\end&#123;equation&#125;\n\n\n参考文献 bib\n\n%\\usepackage&#123;hyperref&#125;\\usepackage&#123;cite&#125;% ---- Bibliography ----\\bibliographystyle&#123;unsrt&#125;\\bibliography&#123;0_references&#125;\n\n\n","categories":["sci"],"tags":["latex"]},{"title":"数据处理-scipy中值滤波、pandas重采样","url":"/2019/09/21/sci-pandas/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-scipy%E4%B8%AD%E5%80%BC%E6%BB%A4%E6%B3%A2%E3%80%81pandas%E9%87%8D%E9%87%87%E6%A0%B7/","content":"1. scipy中值滤波使用scipy中的signal.medfilt对数组进行中值滤波。方法： scipy.signal.medfilt\n\n滤波器的kernel_size必须是奇数\n输出数组的size与输入的数组一致\n\nimport scipy.signal as signalimport matplotlib.pyplot as pltimport numpy as npimport pandas as pdn = 51 y = np.sin(np.linspace(0, 10, n)) + np.random.rand(n)y_med = signal.medfilt(y, kernel_size=5)plt.figure()plt.plot(y, &#x27;r--&#x27;, label=&#x27;y&#x27;)plt.plot(y_med, &#x27;b-.&#x27;, label=&#x27;y_med&#x27;)plt.legend()plt.show()\n\n\n\nsignal.medfilt还可以对矩阵（图像）进行滤波处理，以消除噪音。ref： https://docs.scipy.org/doc/scipy/reference/generated/scipy.signal.medfilt.html\n\n\n2. pandas重采样(1) pandas可对时间序列进行重采样对带有时间序列的DataFrame，pandas中内置了重采样的功能，可以灵活的自定义各种频率以及统计函数。\nn = 51index = pd.date_range(&#x27;2019-01-01 00:00:00&#x27;, periods=n, freq=&#x27;S&#x27;)y = np.sin(np.linspace(0, 10, n)) + np.random.rand(n)dt = pd.DataFrame(&#123;&#x27;value&#x27;: y&#125;, index=index)dt = dt.resample(&#x27;5S&#x27;).mean()print(dt.head())plt.figure()plt.plot(index, y, &#x27;r--&#x27;, label=&#x27;y&#x27;)plt.plot(dt.index, dt[&#x27;value&#x27;], &#x27;b-.&#x27;, label=&#x27;y_resample&#x27;)plt.legend()plt.show()\n\n\n\n(2) 对非时间序列的重采样引入时间差序列: timedelta_range\nn = 51t = np.linspace(0, 10, n)x = np.sin(t) + np.random.rand(n)index = pd.timedelta_range(0, periods=n, freq=&#x27;s&#x27;)dt = pd.DataFrame(&#123;&#x27;key&#x27;: np.arange(n), &#x27;value&#x27;: x&#125;, index=index)dt = dt.resample(&#x27;5s&#x27;).mean()print(dt.head())plt.figure()plt.plot(np.arange(n), x, &#x27;r--&#x27;, label=&#x27;x&#x27;)plt.plot(dt[&#x27;key&#x27;], dt[&#x27;value&#x27;], &#x27;b-.&#x27;, label=&#x27;x_resample&#x27;)plt.legend()plt.show()\n\n\n\n\nref：https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.resample.html\n","categories":["sci"],"tags":["scipy","pandas"]},{"title":"深度学习调参-自动化运行多组超参数","url":"/2019/09/03/tensorflow/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%B0%83%E5%8F%82-%E8%87%AA%E5%8A%A8%E5%8C%96%E8%BF%90%E8%A1%8C%E5%A4%9A%E7%BB%84%E8%B6%85%E5%8F%82%E6%95%B0/","content":"1. 创建一个神经网络模型比如用cnn在mnist数据集上训练，关于模型建立和训练的代码这里不写了。。。\n在程序开头加入超参数的定义：建议至少包括参数名称、类型、和初始值。\n\nref： https://docs.python.org/3/library/argparse.html\n\n########################## filename: mnist_cnn.py#########################import argparse# -------parser paras--------------------parser = argparse.ArgumentParser(description=&#x27;Trains a simple CNN on MNIST dataset&#x27;)parser.add_argument(&#x27;--layer_n&#x27;, type=int, default=1)parser.add_argument(&#x27;--activition&#x27;, type=str, default=&#x27;tanh&#x27;)parser.add_argument(&#x27;--seed&#x27;, type=int, default=11)args = parser.parse_args()print(args.__dict__)seed = args.seedlayer_n = args.layer_nactivition = args.activition# --- CNN model ----# balabala ...# --- train ----# balabala ...\n\n\n2. 再创建一个脚本文件，用来执行mnist_cnn.py。########################## filename: run_all.py#########################import subprocesscmds = [&#x27;python mnist_cnn.py --layer_n=1 --activition=tanh --seed=11&#x27;,        &#x27;python mnist_cnn.py --layer_n=1 --activition=tanh --seed=17&#x27;,        &#x27;python mnist_cnn.py --layer_n=1 --activition=tanh --seed=19&#x27;]for cmd in cmds:    p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)    for line in iter(p.stdout.readline, b&#x27;&#x27;):        msg = line.strip().decode(&#x27;gbk&#x27;)        print(msg)\n","categories":["tensorflow"],"tags":["tensorflow","keras"]},{"title":"深度学习调参-超参数排列组合","url":"/2019/09/03/tensorflow/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E8%B0%83%E5%8F%82-%E8%B6%85%E5%8F%82%E6%95%B0%E6%8E%92%E5%88%97%E7%BB%84%E5%90%88/","content":"首先定义超参数的名称和取值范围，然后调用itertools.product，可以生成所有超参数的排列组合。\n\nref： https://docs.python.org/3/library/itertools.html#itertools.product\n\nimport itertoolsimport subprocess# === define paras ==================para_names = [&#x27;layer_n&#x27;, &#x27;activition&#x27;, &#x27;seed&#x27;]layer_n = [1, 2, 3, 4, 5, 6]activition = [&#x27;tanh&#x27;, &#x27;sigmod&#x27;, &#x27;relu&#x27;]seed = [11, 17, 19]# calc cases numberi = 1nums = sum(1 for _ in itertools.product(layer_n, activition, seed))print(f&#x27;==== we have &#123;nums&#125; cases in total&#x27;, &#x27;===&#x27; * 3)# === run all case ===========for values in itertools.product(layer_n, activition, seed):    print(f&#x27; *** &#123;i&#125; / &#123;nums&#125; &#x27;, &#x27;***&#x27; * 3)        cmd = f&#x27;python mnist_cnn.py&#x27;    for p, v in zip(para_names, values):        cmd += f&#x27; --&#123;p&#125;=&#123;v&#125;&#x27;    print(cmd)        # p = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)    # print(p.stdout.read().decode(&#x27;utf8&#x27;))        i += 1        \n\n输出：\n==== we have 54 cases in total =========\n *** 1 / 54  *********\npython mnist_cnn.py --layer_n=1 --activition=tanh --seed=11\n *** 2 / 54  *********\npython mnist_cnn.py --layer_n=1 --activition=tanh --seed=17\n *** 3 / 54  *********\npython mnist_cnn.py --layer_n=1 --activition=tanh --seed=19\n *** 4 / 54  *********\npython mnist_cnn.py --layer_n=1 --activition=sigmod --seed=11\n *** 5 / 54  *********\npython mnist_cnn.py --layer_n=1 --activition=sigmod --seed=17\n *** 6 / 54  *********\n \n ...\n\n *** 53 / 54  *********\npython mnist_cnn.py --layer_n=6 --activition=relu --seed=17\n *** 54 / 54  *********\npython mnist_cnn.py --layer_n=6 --activition=relu --seed=19\n\n","categories":["tensorflow"],"tags":["tensorflow","keras"]},{"title":"数据可视化-混淆矩阵(confusion matrix)","url":"/2019/08/19/sci-matplotlib/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-%E6%B7%B7%E6%B7%86%E7%9F%A9%E9%98%B5(confusion-matrix)/","content":"1. 混淆矩阵（confusion matrix）介绍在基于深度学习的分类识别领域中，经常采用统计学中的混淆矩阵（confusion matrix）来评价分类器的性能。\n它是一种特定的二维矩阵：\n\n列代表预测的类别；行代表实际的类别。\n对角线上的值表示预测正确的数量&#x2F;比例；非对角线元素是预测错误的部分。\n\n混淆矩阵的对角线值越高越好，表明许多正确的预测。\n特别是在各分类数据的数量不平衡的情况下，混淆矩阵可以直观的显示分类模型对应各个类别的准确率。\n\nref: https://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.html\n\n2. 混淆矩阵示列\n数据集： MNIST\ntensorflow,keras,\n神经网络：CNN\n\n依赖：keras，matplotlib，numpy，seaborn，tensorflow，sklearn\n\n\nimport kerasimport matplotlib.pyplot as pltimport numpy as npimport seaborn as snsfrom sklearn.metrics import confusion_matrix# === dataset ===with np.load(&#x27;mnist.npz&#x27;) as f:    x_train, y_train = f[&#x27;x_train&#x27;], f[&#x27;y_train&#x27;]    x_test, y_test = f[&#x27;x_test&#x27;], f[&#x27;y_test&#x27;]x_train = x_train.reshape(60000, 28, 28, 1)x_test = x_test.reshape(10000, 28, 28, 1)print(x_train.shape)print(x_test.shape)# === model: CNN ===model = keras.models.Sequential()model.add(keras.layers.Conv2D(32, (3, 3), activation=&#x27;relu&#x27;, input_shape=(28, 28, 1)))model.add(keras.layers.MaxPooling2D((2, 2)))model.add(keras.layers.Conv2D(64, (3, 3), activation=&#x27;relu&#x27;))model.add(keras.layers.MaxPooling2D((2, 2)))model.add(keras.layers.Flatten())model.add(keras.layers.Dense(64, activation=&#x27;relu&#x27;))model.add(keras.layers.Dense(10, activation=&#x27;softmax&#x27;))model.compile(optimizer=&#x27;adam&#x27;,              loss=&#x27;sparse_categorical_crossentropy&#x27;,              metrics=[&#x27;accuracy&#x27;])model.summary()# === train ===model.fit(x=x_train, y=y_train,          batch_size=512,          epochs=10,          validation_data=(x_test, y_test))# === pred ===y_pred = model.predict_classes(x_test)print(y_pred)# === 混淆矩阵：真实值与预测值的对比 ===# https://scikit-learn.org/stable/auto_examples/model_selection/plot_confusion_matrix.htmlcon_mat = confusion_matrix(y_test, y_pred)con_mat_norm = con_mat.astype(&#x27;float&#x27;) / con_mat.sum(axis=1)[:, np.newaxis]     # 归一化con_mat_norm = np.around(con_mat_norm, decimals=2)# === plot ===plt.figure(figsize=(8, 8))sns.heatmap(con_mat_norm, annot=True, cmap=&#x27;Blues&#x27;)plt.ylim(0, 10)plt.xlabel(&#x27;Predicted labels&#x27;)plt.ylabel(&#x27;True labels&#x27;)plt.show()\n\n\n","categories":["sci"],"tags":["tensorflow","seaborn","keras","confusion_matrix"]},{"title":"jupyter lab 打开方式","url":"/2019/08/15/python/jupyter-lab-%E6%89%93%E5%BC%80%E6%96%B9%E5%BC%8F/","content":"Jupyter Lab 是 Jupyter Notebook 的下一代升级版，界面相对更友好，功能也更强大，更像一个IDE了。\n\n\n\n可以到这个页面 https://jupyter.org/try 试用一下。\n0. 安装jupyterlabpip install jupyterlab\n\n1. jupyterlab的三种打开方式（windows）\n\n1.1 命令行打开在工作目录，打开命令行工具，输入：\njupyter lab\n浏览器(会自动)打开jupyterlab页面：http://localhost:8888/lab\n\n\n注意，jupyter lab 会默认继承 jupyter notebook 的相关配置，如果之前有改过的话。\n\n\n1.2 用bat文件打开在工作目录，新建jupyter_lab.bat文件，文件内容填入：\njupyter lab\n\n下次双击打开jupyter_lab.bat文件即可。\n\n\nps： 如果想用无窗口模式（去掉黑乎乎的终端窗口）打开，可以新建一个vbs，丢到工作目录里。\nCreateObject(&quot;WScript.Shell&quot;).Run &quot;C:\\\\xxxx\\\\python\\\\3.7.4\\\\Scripts\\\\jupyter-lab.exe&quot;,0\n1.3 右键菜单打开在右键菜单里添加 jupyter lab here按钮，方法如下：\n\n新建注册表文件jupyter lab here.reg，内容：\n\nWindows Registry Editor Version 5.00[HKEY_CURRENT_USER\\Software\\Classes\\Directory\\Background\\shell\\Jupyter Lab Here]&quot;Icon&quot;=&quot;\\&quot;C:\\\\Users\\\\XXXX\\\\scoop\\\\apps\\\\python\\\\current\\\\Lib\\\\site-packages\\\\notebook\\\\static\\\\favicon.ico\\&quot;&quot;[HKEY_CURRENT_USER\\Software\\Classes\\Directory\\Background\\shell\\Jupyter Lab Here\\command]@=&quot;\\&quot;C:\\\\Users\\\\XXXX\\\\scoop\\\\apps\\\\python\\\\current\\\\Scripts\\\\jupyter-lab.exe\\&quot;&quot;\n\n\nfavicon.ico,jupyter-lab.exe的路径按实际情况修改\n\n\n\n双击jupyter lab here.reg文件，注入注册表即可！\n\n","categories":["python"],"tags":["python","jupyter","jupyterlab"]},{"title":"Hexo 使用 Travis CI 自动更新","url":"/2019/06/10/hexo/hexo-%E4%BD%BF%E7%94%A8Travis-CI%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/","content":"准备\n需要两个 github 仓库：\n一个用于发布页面： shenbo.github.io\n一个用于放源码： hexo-source\n\n\nTravis CI 账户 (https://www.travis-ci.org/)\n\n1. 创建 hexo-source 仓库\n在hexo的根目录下（ ~&#x2F;hexo）运行：\n\ncd hexogit initgit add .git commit -m &quot;first commit&quot;git remote add origin https://github.com/shenbo/hexo-source.gitgit push -u origin master\n\n2. Travis CI 与 Github 设置2.1 打开 Github 个人设置，创建授权 tokens\n路径 Settings - Developer settings - Personal access tokens\n链接：(https://github.com/settings/tokens)\ngenerate new token\n复制token\n\n2.2 设置 Travis CI 与 Github 绑定\n将 Travis 账号 与 Github绑定，激活 hexo-source仓库的开关\n打开仓库设置，在 Environment Variables 选项中新建 github_token 项,将刚刚获得的token填进去\n其他默认选项不用管\n\n\n\n3. 添加 Travis CI 配置文件\n在hexo的根目录下（ ~&#x2F;hexo）新建 .travis.yml内容如下：\n\nlanguage: node_jsnode_js: stablecache:    apt: true    directories:        - node_modulesbefore_install:    - npm install hexo-cli -ginstall:  - npm install  - npm install hexo-deployer-git --savescript:  - hexo clean  - hexo gafter_script:  - git clone $&#123;GH_REF&#125; hexo-public  - cp -rf public/* hexo-public/  - cd hexo-public  - git config user.name &quot;shenbo&quot;  - git config user.email &quot;shenbo@hotmail.com&quot;  - git add .  - git commit -am &quot;Travis CI Auto Builder...&quot;  - git push origin master branches:  only:    - masterenv: global:   - GH_REF: https://shenbo:$&#123;github_token&#125;@github.com/shenbo/shenbo.github.io.git \n\n\n在 hexo-source 仓库 push 一下, 几秒钟后在 Travis CI 页面应该能看到正在 build。\n\n4. 使用配置成功后，可以发现，本地就不需要nodejs环境了；\n即使换了电脑只要clone hexo-source 仓库，更新这个仓库即可。\n","categories":["hexo"],"tags":["hexo","travis_ci"]},{"title":"幼儿园报名","url":"/2019/06/07/yoyo/20190606-%E5%B9%BC%E5%84%BF%E5%9B%AD/","content":"\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"python简单爬虫：selenium webdriver (phantomjs) 和 beautifulSoup","url":"/2019/05/28/python/python-%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB%EF%BC%9Aselenium-webdriver-(phantomjs)-%E5%92%8C-beautifulSoup/","content":"1. Selenium\n\nhttps://docs.seleniumhq.org/\n\n\n\n\nhttps://phantomjs.org/\nhttps://github.com/ariya/phantomjs\n\n\nSelenium 是一个JavaScript框架，调用 webdriver 模拟在浏览器内的操作，可以适用 Chrome、 Firefox 、IE 等浏览器。\n本文用的是 PhantomJS，一个在可以后台运行的无头浏览器(Scriptable Headless Browser)。\n\nPhantomJS 项目目前已经暂停更新。\nSelenium 推荐用 Chrome 或 Firefox 的无头模式。\n但 chromedriver 无头模式启动时，还是会有一个空白的命令行窗口，比较讨厌，因此还是用 PhantomJS。\n\n\n\nimport timefrom bs4 import BeautifulSoupfrom selenium import webdriver# # ====== chrome config ==========# # chromedriver 下载地址 http://npm.taobao.org/mirrors/chromedriver/# # 或： scoop install chromedriver# chrome_options = webdriver.ChromeOptions()# chrome_options.headless = True  # 无界面## chromedriver_path = r&#x27;C:\\xxx\\scoop\\apps\\chromedriver\\current\\chromedriver&#x27;# driver = webdriver.Chrome(executable_path=chromedriver_path, options=chrome_options)# ====== phantomjs config ========# 安装： scoop install phantomjsphantomjs_path = r&#x27;C:\\xxx\\scoop\\apps\\PhantomJS\\current\\phantomjs&#x27;driver = webdriver.PhantomJS(executable_path=phantomjs_path)driver.get(&#x27;https://www.baidu.com&#x27;)time.sleep(1)print(driver.title)print(driver.page_source)driver.close()driver.quit()\n\n2. BeautifulSoupdriver.get(url)content = driver.page_sourcesoup = BeautifulSoup(content, &#x27;html.parser&#x27;)  # 解析器：&#x27;lxml&#x27;# 匹配第一个 class 为 title 的 div 标签div = soup.find(&#x27;div&#x27;, &#123;&#x27;class&#x27;: &#x27;title&#x27;&#125;)# 匹配第一个 class 包含 title 的 div 标签div = soup.find(&#x27;div&#x27;, &#123;&#x27;class&#x27;: [&#x27;title&#x27;, &#x27; &#x27;]&#125;)# 获得 div 标签内的 子标签 &lt;a&gt; 的 title 属性title = div.a.get(&#x27;title&#x27;)# 获得 div 标签内的 子标签 &lt;a&gt; 的 文字text = div.a.text# 匹配所有 class 包含 sound 的 div 标签sound_list = soup.find_all(&#x27;div&#x27;, &#123;&#x27;class&#x27;: [&#x27;sound&#x27;, &#x27; &#x27;]&#125;)for sound in sound_list：    print(sound)# 匹配第一个 class 包含 title, id 为 sound 的 div 标签div = soup.find(&#x27;div&#x27;, &#123;&#x27;class&#x27;: [&#x27;title&#x27;, &#x27; &#x27;], &#x27;id&#x27;: &#x27;sound&#x27;&#125;)\n\n3. Selenium 模拟浏览器翻页 (滚动条)# == loading all pages ==driver.get(url)page_num = 10for i in range(page_num):    driver.execute_script(&#x27;window.scrollBy(0, document.body.scrollHeight)&#x27;)    time.sleep(3)content = driver.page_source\n","categories":["python"],"tags":["python","selenium","beautifulSoup"]},{"title":"数据可视化：matplotlib animation 绘制动画","url":"/2019/05/27/sci-matplotlib/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-matplotlib-animation-%E7%BB%98%E5%88%B6%E5%8A%A8%E7%94%BB/","content":"1. 用 matplotlib animation 绘制动画ref: https://matplotlib.org/3.1.1/api/animation_api.html\nimport matplotlib.animation as animationimport matplotlib.pyplot as pltimport numpy as np# 数据集：X轴数据固定；Y轴的数据更新X = np.arange(0, 10, 0.01)  # X shape： (N,)Ys = [np.sin(X + k / 10) for k in range(100)]  # Ys shape： (k, N)def my_ani(x, ys):    fig, ax = plt.subplots()    ax.set_title(&#x27;y = sin(x + k/10)&#x27;)    ax.set_xlim([0, 10]), ax.set_xlabel(&#x27;X&#x27;)    ax.set_ylim([-1, 1]), ax.set_ylabel(&#x27;Y&#x27;)    line, = ax.plot(x, ys[0])    ano = plt.annotate(&#x27;k: 0&#x27;, (1, 1))    def animate(i):        line.set_ydata(ys[i])       # update the y data.        ano.set_text(&#x27;k: %d&#x27; % i)  # update the annotate.        return line,    # animation.FuncAnimation 参数说明    # fig:          figure 对象    # func:         动画函数，自定义函数 animate    # frames:       总帧数    # interval:     间隔时间，ms    ani = animation.FuncAnimation(fig, animate, frames=30, interval=50)    # ani.save(&#x27;sin_ani.mp4&#x27;, dpi=300, writer=&#x27;ffmpeg&#x27;)     # scoop install ffmpeg    # ani.save(&#x27;sin_ani.gif&#x27;, dpi=300, writer=&#x27;pillow&#x27;)     # pip install pillow    plt.show()my_ani(X, Ys)\n\n\n\n\n\n\n2. 也用 plot 的方法显示动画，保存不太方便import matplotlib.pyplot as pltimport numpy as np# 数据集：X轴数据固定；Y轴的数据更新X = np.arange(0, 10, 0.01)  # X shape： (N,)Ys = [np.sin(X + k / 10) for k in range(100)]  # Ys shape： (k, N)plt.ion()plt.show()for i in range(len(Ys)):    plt.cla()    plt.title(&#x27;y = sin(x + k/10)&#x27;)    plt.xlim(0, 10)    plt.ylim(-1, 1)        plt.plot(X, Ys[i], &#x27;r&#x27;, alpha=0.7, linewidth=0.7)    plt.text(1, 1, &#x27;k: %d&#x27; % i)    plt.draw()    plt.pause(0.05)  # 间隔时间，s\n\n\ntitle: 数据可视化：matplotlib animation 绘制动画(2)date: 2020-10-08 16:42:45tags: matplotlibcategories: sciref: https://matplotlib.org/3.1.1/api/animation_api.html\nmatplotlib animation 动画教程都是针对曲线类型的,\n对于包含子图、或含有类似直方图等图形的情况，就不适用了。\n下面尝试实现包含多个子图，同时有直方图的动画效果。\nimport matplotlib.animation as animationimport matplotlib.pyplot as pltimport numpy as npX = np.arange(0, 10, 0.01)  # X shape： (N,)Ys = [np.sin(X + k/10.0) for k in range(100)]  # Ys shape： (k, N)fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(8, 4))def animate(i):    axes[0].cla()    axes[0].plot(X, Ys[i])    axes[0].set_title(f&#x27;y = sin(x + &#123;i&#125;/10)&#x27;)    axes[1].cla()    axes[1].hist(Ys[i], bins=50, orientation=&#x27;horizontal&#x27;)ani = animation.FuncAnimation(fig, animate, frames=50, interval=50)ani.save(&#x27;matplotlib-animation-hist.gif&#x27;)plt.show()\n\n\n\n\nok！\n\n\ntitle: 数据可视化：matplotlib animation 绘制 Lorenz 随机函数三维动画date: 2022-11-08 19:42:49tags: matplotlibcategories: sci1. 创建 Lorenz 函数，生成随机数据import numpy as npimport matplotlib.pyplot as pltfrom scipy.integrate import odeintfrom mpl_toolkits.mplot3d.axes3d import Axes3Dimport matplotlib.animation as animation# === define the lorenz system ===# x, y, and z make up the system state# t is time,# sigma, rho, beta are the system parametersdef lorenz_system(current_state, t):    x, y, z = current_state    dx_dt = sigma * (y - x)    dy_dt = x * (rho - z) - y    dz_dt = x * y - beta * z    return [dx_dt, dy_dt, dz_dt]# define the initial system state, system parametersinitial_state = [-0.1, 0.01, 0.08]sigma = 10.rho = 50.beta = 3.start_time = 0end_time = 10num_points = 100 * (end_time - start_time)time_points = np.linspace(start_time, end_time, num_points)# === generate datas =========xyz = odeint(lorenz_system, initial_state, time_points)data = np.array(xyz).T * 0.01  # scale down to 0.01print(data)print(data[0])\n\n\n\n2. 绘制二维图# === 2d plot lorenz ====def lorenz_2d_plot(data):    fig, axs = plt.subplots(3, 1, sharex=&#x27;all&#x27;)    xxx = range(len(data[2]))    axs[2].set_xlim(0, 1000)    axs[2].set_xlabel(&#x27;time&#x27;)    axs[0].plot(xxx, data[0], color=&#x27;r&#x27;, alpha=0.7, linewidth=0.7)    axs[0].set_ylabel(&#x27;x&#x27;)    axs[1].plot(xxx, data[1], color=&#x27;g&#x27;, alpha=0.7, linewidth=0.7)    axs[1].set_ylabel(&#x27;y&#x27;)    axs[2].plot(xxx, data[2], color=&#x27;b&#x27;, alpha=0.7, linewidth=0.7)    axs[2].set_ylabel(&#x27;z&#x27;)    fig.tight_layout()    fig.savefig(&#x27;matplotlib_lorenz-2d.png&#x27;, dpi=300, bbox_inches=&#x27;tight&#x27;)    plt.show()lorenz_2d_plot(data)\n\n\n\n3. 绘制三维图# === 3d plot lorenz ====def lorenz_3d_plot(data):    fig = plt.figure()    ax = Axes3D(fig)    ax.xaxis.set_pane_color((1, 1, 1, 1))    ax.yaxis.set_pane_color((1, 1, 1, 1))    ax.zaxis.set_pane_color((1, 1, 1, 1))    ax.set_title(&#x27;Lorenz&#x27;)    ax.set_xlim3d([-0.5, 0.5]), ax.set_xlabel(&#x27;X&#x27;)    ax.set_ylim3d([-0.5, 0.5]), ax.set_ylabel(&#x27;Y&#x27;)    ax.set_zlim3d([0.0, 1.0]), ax.set_zlabel(&#x27;Z&#x27;)    # ax.view_init(30, -60)               # default view    ax.plot(data[0], data[1], data[2], color=&#x27;r&#x27;, alpha=0.7, linewidth=0.75)    ax.set_title(&#x27;Lorenz_3d&#x27;)    fig.savefig(&#x27;matplotlib_lorenz-3d.png&#x27;, dpi=300, bbox_inches=&#x27;tight&#x27;)    plt.show()lorenz_3d_plot(data)\n\n\n4. 绘制三维动画# === 3d plot lorenz ====def lorenz_3d_plot_ani(data):    fig = plt.figure()    ax = Axes3D(fig)    ax.xaxis.set_pane_color((1, 1, 1, 1))    ax.yaxis.set_pane_color((1, 1, 1, 1))    ax.zaxis.set_pane_color((1, 1, 1, 1))    ax.set_title(&#x27;Lorenz_3d_animation&#x27;)    ax.set_xlim3d([-0.5, 0.5]), ax.set_xlabel(&#x27;X&#x27;)    ax.set_ylim3d([-0.5, 0.5]), ax.set_ylabel(&#x27;Y&#x27;)    ax.set_zlim3d([0.0, 1.0]), ax.set_zlabel(&#x27;Z&#x27;)    # ax.view_init(30, -60)               # default view    # === Animation Functions ===    def update_line(num, data, line):        line.set_data(data[0:2, :num])        line.set_3d_properties(data[2, :num])        return line    # initial with the start point    line, = ax.plot(data[0][0:1], data[1][0:1], data[2][0:1], color=&#x27;r&#x27;, alpha=0.7, linewidth=0.75)    ani = animation.FuncAnimation(fig, update_line, 1000, fargs=(data, line), interval=1)    # ani.save(&#x27;matplotlib_lorenz_3d_ani.mp4&#x27;, fps=24, dpi=300)    ani.save(&#x27;03_lorenz_3d_ani.gif&#x27;)    plt.show()lorenz_3d_plot_ani(data)\n\nok！\n","categories":["sci"],"tags":["matplotlib"]},{"title":"数据可视化：matplotlib animation 绘制动画","url":"/2019/05/27/sci-matplotlib/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-matplotlib-animation-%E7%BB%98%E5%88%B6%E5%8A%A8%E7%94%BB2/","content":"1. 用 matplotlib animation 绘制动画ref: https://matplotlib.org/3.1.1/api/animation_api.html\nimport matplotlib.animation as animationimport matplotlib.pyplot as pltimport numpy as np# 数据集：X轴数据固定；Y轴的数据更新X = np.arange(0, 10, 0.01)  # X shape： (N,)Ys = [np.sin(X + k / 10) for k in range(100)]  # Ys shape： (k, N)def my_ani(x, ys):    fig, ax = plt.subplots()    ax.set_title(&#x27;y = sin(x + k/10)&#x27;)    ax.set_xlim([0, 10]), ax.set_xlabel(&#x27;X&#x27;)    ax.set_ylim([-1, 1]), ax.set_ylabel(&#x27;Y&#x27;)    line, = ax.plot(x, ys[0])    ano = plt.annotate(&#x27;k: 0&#x27;, (1, 1))    def animate(i):        line.set_ydata(ys[i])       # update the y data.        ano.set_text(&#x27;k: %d&#x27; % i)  # update the annotate.        return line,    # animation.FuncAnimation 参数说明    # fig:          figure 对象    # func:         动画函数，自定义函数 animate    # frames:       总帧数    # interval:     间隔时间，ms    ani = animation.FuncAnimation(fig, animate, frames=30, interval=50)    # ani.save(&#x27;sin_ani.mp4&#x27;, dpi=300, writer=&#x27;ffmpeg&#x27;)     # scoop install ffmpeg    # ani.save(&#x27;sin_ani.gif&#x27;, dpi=300, writer=&#x27;pillow&#x27;)     # pip install pillow    plt.show()my_ani(X, Ys)\n\n\n\n\n\n\n2. 也用 plot 的方法显示动画，保存不太方便import matplotlib.pyplot as pltimport numpy as np# 数据集：X轴数据固定；Y轴的数据更新X = np.arange(0, 10, 0.01)  # X shape： (N,)Ys = [np.sin(X + k / 10) for k in range(100)]  # Ys shape： (k, N)plt.ion()plt.show()for i in range(len(Ys)):    plt.cla()    plt.title(&#x27;y = sin(x + k/10)&#x27;)    plt.xlim(0, 10)    plt.ylim(-1, 1)        plt.plot(X, Ys[i], &#x27;r&#x27;, alpha=0.7, linewidth=0.7)    plt.text(1, 1, &#x27;k: %d&#x27; % i)    plt.draw()    plt.pause(0.05)  # 间隔时间，s\n\n\ntitle: 数据可视化：matplotlib animation 绘制动画(2)date: 2020-10-08 16:42:45tags: matplotlibcategories: sciref: https://matplotlib.org/3.1.1/api/animation_api.html\nmatplotlib animation 动画教程都是针对曲线类型的,\n对于包含子图、或含有类似直方图等图形的情况，就不适用了。\n下面尝试实现包含多个子图，同时有直方图的动画效果。\nimport matplotlib.animation as animationimport matplotlib.pyplot as pltimport numpy as npX = np.arange(0, 10, 0.01)  # X shape： (N,)Ys = [np.sin(X + k/10.0) for k in range(100)]  # Ys shape： (k, N)fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(8, 4))def animate(i):    axes[0].cla()    axes[0].plot(X, Ys[i])    axes[0].set_title(f&#x27;y = sin(x + &#123;i&#125;/10)&#x27;)    axes[1].cla()    axes[1].hist(Ys[i], bins=50, orientation=&#x27;horizontal&#x27;)ani = animation.FuncAnimation(fig, animate, frames=50, interval=50)ani.save(&#x27;matplotlib-animation-hist.gif&#x27;)plt.show()\n\n\n\n\nok！\n\n\ntitle: 数据可视化：matplotlib animation 绘制 Lorenz 随机函数三维动画date: 2022-11-08 19:42:49tags: matplotlibcategories: sci1. 创建 Lorenz 函数，生成随机数据import numpy as npimport matplotlib.pyplot as pltfrom scipy.integrate import odeintfrom mpl_toolkits.mplot3d.axes3d import Axes3Dimport matplotlib.animation as animation# === define the lorenz system ===# x, y, and z make up the system state# t is time,# sigma, rho, beta are the system parametersdef lorenz_system(current_state, t):    x, y, z = current_state    dx_dt = sigma * (y - x)    dy_dt = x * (rho - z) - y    dz_dt = x * y - beta * z    return [dx_dt, dy_dt, dz_dt]# define the initial system state, system parametersinitial_state = [-0.1, 0.01, 0.08]sigma = 10.rho = 50.beta = 3.start_time = 0end_time = 10num_points = 100 * (end_time - start_time)time_points = np.linspace(start_time, end_time, num_points)# === generate datas =========xyz = odeint(lorenz_system, initial_state, time_points)data = np.array(xyz).T * 0.01  # scale down to 0.01print(data)print(data[0])\n\n\n\n2. 绘制二维图# === 2d plot lorenz ====def lorenz_2d_plot(data):    fig, axs = plt.subplots(3, 1, sharex=&#x27;all&#x27;)    xxx = range(len(data[2]))    axs[2].set_xlim(0, 1000)    axs[2].set_xlabel(&#x27;time&#x27;)    axs[0].plot(xxx, data[0], color=&#x27;r&#x27;, alpha=0.7, linewidth=0.7)    axs[0].set_ylabel(&#x27;x&#x27;)    axs[1].plot(xxx, data[1], color=&#x27;g&#x27;, alpha=0.7, linewidth=0.7)    axs[1].set_ylabel(&#x27;y&#x27;)    axs[2].plot(xxx, data[2], color=&#x27;b&#x27;, alpha=0.7, linewidth=0.7)    axs[2].set_ylabel(&#x27;z&#x27;)    fig.tight_layout()    fig.savefig(&#x27;matplotlib_lorenz-2d.png&#x27;, dpi=300, bbox_inches=&#x27;tight&#x27;)    plt.show()lorenz_2d_plot(data)\n\n\n\n3. 绘制三维图# === 3d plot lorenz ====def lorenz_3d_plot(data):    fig = plt.figure()    ax = Axes3D(fig)    ax.xaxis.set_pane_color((1, 1, 1, 1))    ax.yaxis.set_pane_color((1, 1, 1, 1))    ax.zaxis.set_pane_color((1, 1, 1, 1))    ax.set_title(&#x27;Lorenz&#x27;)    ax.set_xlim3d([-0.5, 0.5]), ax.set_xlabel(&#x27;X&#x27;)    ax.set_ylim3d([-0.5, 0.5]), ax.set_ylabel(&#x27;Y&#x27;)    ax.set_zlim3d([0.0, 1.0]), ax.set_zlabel(&#x27;Z&#x27;)    # ax.view_init(30, -60)               # default view    ax.plot(data[0], data[1], data[2], color=&#x27;r&#x27;, alpha=0.7, linewidth=0.75)    ax.set_title(&#x27;Lorenz_3d&#x27;)    fig.savefig(&#x27;matplotlib_lorenz-3d.png&#x27;, dpi=300, bbox_inches=&#x27;tight&#x27;)    plt.show()lorenz_3d_plot(data)\n\n\n4. 绘制三维动画# === 3d plot lorenz ====def lorenz_3d_plot_ani(data):    fig = plt.figure()    ax = Axes3D(fig)    ax.xaxis.set_pane_color((1, 1, 1, 1))    ax.yaxis.set_pane_color((1, 1, 1, 1))    ax.zaxis.set_pane_color((1, 1, 1, 1))    ax.set_title(&#x27;Lorenz_3d_animation&#x27;)    ax.set_xlim3d([-0.5, 0.5]), ax.set_xlabel(&#x27;X&#x27;)    ax.set_ylim3d([-0.5, 0.5]), ax.set_ylabel(&#x27;Y&#x27;)    ax.set_zlim3d([0.0, 1.0]), ax.set_zlabel(&#x27;Z&#x27;)    # ax.view_init(30, -60)               # default view    # === Animation Functions ===    def update_line(num, data, line):        line.set_data(data[0:2, :num])        line.set_3d_properties(data[2, :num])        return line    # initial with the start point    line, = ax.plot(data[0][0:1], data[1][0:1], data[2][0:1], color=&#x27;r&#x27;, alpha=0.7, linewidth=0.75)    ani = animation.FuncAnimation(fig, update_line, 1000, fargs=(data, line), interval=1)    # ani.save(&#x27;matplotlib_lorenz_3d_ani.mp4&#x27;, fps=24, dpi=300)    ani.save(&#x27;03_lorenz_3d_ani.gif&#x27;)    plt.show()lorenz_3d_plot_ani(data)\n\nok！\n","categories":["sci"],"tags":["matplotlib"]},{"title":"数据可视化：matplotlib animation 绘制动画","url":"/2019/05/27/sci-matplotlib/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-matplotlib-animation-%E7%BB%98%E5%88%B6%E5%8A%A8%E7%94%BB3/","content":"1. 用 matplotlib animation 绘制动画ref: https://matplotlib.org/3.1.1/api/animation_api.html\nimport matplotlib.animation as animationimport matplotlib.pyplot as pltimport numpy as np# 数据集：X轴数据固定；Y轴的数据更新X = np.arange(0, 10, 0.01)  # X shape： (N,)Ys = [np.sin(X + k / 10) for k in range(100)]  # Ys shape： (k, N)def my_ani(x, ys):    fig, ax = plt.subplots()    ax.set_title(&#x27;y = sin(x + k/10)&#x27;)    ax.set_xlim([0, 10]), ax.set_xlabel(&#x27;X&#x27;)    ax.set_ylim([-1, 1]), ax.set_ylabel(&#x27;Y&#x27;)    line, = ax.plot(x, ys[0])    ano = plt.annotate(&#x27;k: 0&#x27;, (1, 1))    def animate(i):        line.set_ydata(ys[i])       # update the y data.        ano.set_text(&#x27;k: %d&#x27; % i)  # update the annotate.        return line,    # animation.FuncAnimation 参数说明    # fig:          figure 对象    # func:         动画函数，自定义函数 animate    # frames:       总帧数    # interval:     间隔时间，ms    ani = animation.FuncAnimation(fig, animate, frames=30, interval=50)    # ani.save(&#x27;sin_ani.mp4&#x27;, dpi=300, writer=&#x27;ffmpeg&#x27;)     # scoop install ffmpeg    # ani.save(&#x27;sin_ani.gif&#x27;, dpi=300, writer=&#x27;pillow&#x27;)     # pip install pillow    plt.show()my_ani(X, Ys)\n\n\n\n\n\n\n2. 也用 plot 的方法显示动画，保存不太方便import matplotlib.pyplot as pltimport numpy as np# 数据集：X轴数据固定；Y轴的数据更新X = np.arange(0, 10, 0.01)  # X shape： (N,)Ys = [np.sin(X + k / 10) for k in range(100)]  # Ys shape： (k, N)plt.ion()plt.show()for i in range(len(Ys)):    plt.cla()    plt.title(&#x27;y = sin(x + k/10)&#x27;)    plt.xlim(0, 10)    plt.ylim(-1, 1)        plt.plot(X, Ys[i], &#x27;r&#x27;, alpha=0.7, linewidth=0.7)    plt.text(1, 1, &#x27;k: %d&#x27; % i)    plt.draw()    plt.pause(0.05)  # 间隔时间，s\n\n\ntitle: 数据可视化：matplotlib animation 绘制动画(2)date: 2020-10-08 16:42:45tags: matplotlibcategories: sciref: https://matplotlib.org/3.1.1/api/animation_api.html\nmatplotlib animation 动画教程都是针对曲线类型的,\n对于包含子图、或含有类似直方图等图形的情况，就不适用了。\n下面尝试实现包含多个子图，同时有直方图的动画效果。\nimport matplotlib.animation as animationimport matplotlib.pyplot as pltimport numpy as npX = np.arange(0, 10, 0.01)  # X shape： (N,)Ys = [np.sin(X + k/10.0) for k in range(100)]  # Ys shape： (k, N)fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(8, 4))def animate(i):    axes[0].cla()    axes[0].plot(X, Ys[i])    axes[0].set_title(f&#x27;y = sin(x + &#123;i&#125;/10)&#x27;)    axes[1].cla()    axes[1].hist(Ys[i], bins=50, orientation=&#x27;horizontal&#x27;)ani = animation.FuncAnimation(fig, animate, frames=50, interval=50)ani.save(&#x27;matplotlib-animation-hist.gif&#x27;)plt.show()\n\n\n\n\nok！\n\n\ntitle: 数据可视化：matplotlib animation 绘制 Lorenz 随机函数三维动画date: 2022-11-08 19:42:49tags: matplotlibcategories: sci1. 创建 Lorenz 函数，生成随机数据import numpy as npimport matplotlib.pyplot as pltfrom scipy.integrate import odeintfrom mpl_toolkits.mplot3d.axes3d import Axes3Dimport matplotlib.animation as animation# === define the lorenz system ===# x, y, and z make up the system state# t is time,# sigma, rho, beta are the system parametersdef lorenz_system(current_state, t):    x, y, z = current_state    dx_dt = sigma * (y - x)    dy_dt = x * (rho - z) - y    dz_dt = x * y - beta * z    return [dx_dt, dy_dt, dz_dt]# define the initial system state, system parametersinitial_state = [-0.1, 0.01, 0.08]sigma = 10.rho = 50.beta = 3.start_time = 0end_time = 10num_points = 100 * (end_time - start_time)time_points = np.linspace(start_time, end_time, num_points)# === generate datas =========xyz = odeint(lorenz_system, initial_state, time_points)data = np.array(xyz).T * 0.01  # scale down to 0.01print(data)print(data[0])\n\n\n\n2. 绘制二维图# === 2d plot lorenz ====def lorenz_2d_plot(data):    fig, axs = plt.subplots(3, 1, sharex=&#x27;all&#x27;)    xxx = range(len(data[2]))    axs[2].set_xlim(0, 1000)    axs[2].set_xlabel(&#x27;time&#x27;)    axs[0].plot(xxx, data[0], color=&#x27;r&#x27;, alpha=0.7, linewidth=0.7)    axs[0].set_ylabel(&#x27;x&#x27;)    axs[1].plot(xxx, data[1], color=&#x27;g&#x27;, alpha=0.7, linewidth=0.7)    axs[1].set_ylabel(&#x27;y&#x27;)    axs[2].plot(xxx, data[2], color=&#x27;b&#x27;, alpha=0.7, linewidth=0.7)    axs[2].set_ylabel(&#x27;z&#x27;)    fig.tight_layout()    fig.savefig(&#x27;matplotlib_lorenz-2d.png&#x27;, dpi=300, bbox_inches=&#x27;tight&#x27;)    plt.show()lorenz_2d_plot(data)\n\n\n\n3. 绘制三维图# === 3d plot lorenz ====def lorenz_3d_plot(data):    fig = plt.figure()    ax = Axes3D(fig)    ax.xaxis.set_pane_color((1, 1, 1, 1))    ax.yaxis.set_pane_color((1, 1, 1, 1))    ax.zaxis.set_pane_color((1, 1, 1, 1))    ax.set_title(&#x27;Lorenz&#x27;)    ax.set_xlim3d([-0.5, 0.5]), ax.set_xlabel(&#x27;X&#x27;)    ax.set_ylim3d([-0.5, 0.5]), ax.set_ylabel(&#x27;Y&#x27;)    ax.set_zlim3d([0.0, 1.0]), ax.set_zlabel(&#x27;Z&#x27;)    # ax.view_init(30, -60)               # default view    ax.plot(data[0], data[1], data[2], color=&#x27;r&#x27;, alpha=0.7, linewidth=0.75)    ax.set_title(&#x27;Lorenz_3d&#x27;)    fig.savefig(&#x27;matplotlib_lorenz-3d.png&#x27;, dpi=300, bbox_inches=&#x27;tight&#x27;)    plt.show()lorenz_3d_plot(data)\n\n\n4. 绘制三维动画# === 3d plot lorenz ====def lorenz_3d_plot_ani(data):    fig = plt.figure()    ax = Axes3D(fig)    ax.xaxis.set_pane_color((1, 1, 1, 1))    ax.yaxis.set_pane_color((1, 1, 1, 1))    ax.zaxis.set_pane_color((1, 1, 1, 1))    ax.set_title(&#x27;Lorenz_3d_animation&#x27;)    ax.set_xlim3d([-0.5, 0.5]), ax.set_xlabel(&#x27;X&#x27;)    ax.set_ylim3d([-0.5, 0.5]), ax.set_ylabel(&#x27;Y&#x27;)    ax.set_zlim3d([0.0, 1.0]), ax.set_zlabel(&#x27;Z&#x27;)    # ax.view_init(30, -60)               # default view    # === Animation Functions ===    def update_line(num, data, line):        line.set_data(data[0:2, :num])        line.set_3d_properties(data[2, :num])        return line    # initial with the start point    line, = ax.plot(data[0][0:1], data[1][0:1], data[2][0:1], color=&#x27;r&#x27;, alpha=0.7, linewidth=0.75)    ani = animation.FuncAnimation(fig, update_line, 1000, fargs=(data, line), interval=1)    # ani.save(&#x27;matplotlib_lorenz_3d_ani.mp4&#x27;, fps=24, dpi=300)    ani.save(&#x27;03_lorenz_3d_ani.gif&#x27;)    plt.show()lorenz_3d_plot_ani(data)\n\nok！\n","categories":["sci"],"tags":["matplotlib"]},{"title":"XPS9370 关闭屏幕动态亮度","url":"/2019/05/12/xps/XPS9370-%E6%98%BE%E7%A4%BA%E5%99%A8%E5%8A%A8%E6%80%81%E4%BA%AE%E5%BA%A6%E8%B0%83%E8%8A%82/","content":"问题XPS13 9370用了之后发现屏幕亮度会随显示内容而自动调节。调节机制太弱智，眼睛都要瞎了。\n解决方案：\n开机后立即点 F2，进入Bios，我的版本是1.10.0\n找到 Video - Dynamic Backlight Control，然后选择 Disabled， 然后单击右下角 Apply\nOK !\n\n\n\n\n\n\n\n","categories":["xps"],"tags":["xps"]},{"title":"数据可视化：matplotlib marker 类型字符对照、设置间隔","url":"/2019/03/07/sci-matplotlib/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-matplotlib-marker-%E7%B1%BB%E5%9E%8B%E5%AD%97%E7%AC%A6%E5%AF%B9%E7%85%A7/","content":"matplotlib marker 类型字符对照\nref: https://matplotlib.org/stable/api/markers_api.htmlref: https://matplotlib.org/stable/gallery/lines_bars_and_markers/marker_reference.html#sphx-glr-gallery-lines-bars-and-markers-marker-reference-py\n\nunfilled_markers = (&#x27;,&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;+&#x27;, &#x27;x&#x27;, &#x27;|&#x27;, &#x27;_&#x27;) unfilled_markers = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)           # intfilled_markers = (&#x27;.&#x27;, &#x27;o&#x27;, &#x27;v&#x27;, &#x27;^&#x27;, &#x27;&lt;&#x27;, &#x27;&gt;&#x27;, &#x27;8&#x27;, &#x27;s&#x27;, &#x27;p&#x27;, &#x27;*&#x27;, &#x27;h&#x27;, &#x27;H&#x27;, &#x27;D&#x27;, &#x27;d&#x27;, &#x27;P&#x27;, &#x27;X&#x27;)\n\n\n\n\n\n\nmatplotlib marker 设置间隔\nref: https://matplotlib.org/3.1.1/gallery/lines_bars_and_markers/markevery_demo.html?highlight=markevery\n\nmatplotlib 绘制曲线时如果数据点较多， 添加 marker 后会出现 marker 重叠或太密集的现象， 可以用 markevery 来控制 marker 的间距。\nplt.plot(x, y, marker=&#x27;o&#x27;, markevery=10)\n\n\n\nmarkevery 可以设置整数，也可以设为数组格式。\n\n\n\n\n\n\n\n","categories":["sci"],"tags":["matplotlib"]},{"title":"数据可视化：matplotlib marker 类型字符对照、设置间隔","url":"/2019/03/07/sci-matplotlib/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-matplotlib-marker-%E8%AE%BE%E7%BD%AE%E9%97%B4%E9%9A%94/","content":"matplotlib marker 类型字符对照\nref: https://matplotlib.org/stable/api/markers_api.htmlref: https://matplotlib.org/stable/gallery/lines_bars_and_markers/marker_reference.html#sphx-glr-gallery-lines-bars-and-markers-marker-reference-py\n\nunfilled_markers = (&#x27;,&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;, &#x27;+&#x27;, &#x27;x&#x27;, &#x27;|&#x27;, &#x27;_&#x27;) unfilled_markers = (0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)           # intfilled_markers = (&#x27;.&#x27;, &#x27;o&#x27;, &#x27;v&#x27;, &#x27;^&#x27;, &#x27;&lt;&#x27;, &#x27;&gt;&#x27;, &#x27;8&#x27;, &#x27;s&#x27;, &#x27;p&#x27;, &#x27;*&#x27;, &#x27;h&#x27;, &#x27;H&#x27;, &#x27;D&#x27;, &#x27;d&#x27;, &#x27;P&#x27;, &#x27;X&#x27;)\n\n\n\n\n\n\nmatplotlib marker 设置间隔\nref: https://matplotlib.org/3.1.1/gallery/lines_bars_and_markers/markevery_demo.html?highlight=markevery\n\nmatplotlib 绘制曲线时如果数据点较多， 添加 marker 后会出现 marker 重叠或太密集的现象， 可以用 markevery 来控制 marker 的间距。\nplt.plot(x, y, marker=&#x27;o&#x27;, markevery=10)\n\n\n\nmarkevery 可以设置整数，也可以设为数组格式。\n\n\n\n\n\n\n\n","categories":["sci"],"tags":["matplotlib"]},{"title":"frp配置内网穿透、ssh远程连接、systemctl自启动","url":"/2019/02/27/network/frp%E9%85%8D%E7%BD%AE%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E3%80%81ssh%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E3%80%81systemctl%E8%87%AA%E5%90%AF%E5%8A%A8/","content":"\nref: https://github.com/fatedier/frp\n\n1.内网穿透1.1 服务器端 VPS 配置下载匹配的版本，https://github.com/fatedier/frp/releases\n\n修改 frps.ini 文件：\n\n# frps.ini[common]bind_port = 7000\n\n启动 frps：\n\n./frps -c ./frps.ini\n\n\n1.2 客户端配置\n修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 123.123.1.0；\n\n# frpc.ini[common]server_addr = 123.123.1.0server_port = 7000[ssh]type = tcplocal_ip = 127.0.0.1local_port = 22remote_port = 6000\n\n启动 frpc：\n\n./frpc -c ./frpc.ini\n\n1.3 远程访问ssh root@123.123.1.0 -oPort=6000 \n\n2. 自动启动 frp 服务–使用 systemctl\n2.1 新建 frp.service 文件\n\nsudo nano /lib/systemd/system/frp.service \n\n2.2 写入以下内容，注意区分 服务端 和 客户端\n\n[Unit]Description=frp serviceAfter=network.target syslog.targetWants=network.target[Service]Type=simple# 服务端ExecStart=/home/ubuntu/frp/frps -c /home/ubuntu/frp/frps.ini# 客户端# ExecStart=/root/frp/frpc -c /root/frp/frpc.ini[Install]WantedBy=multi-user.target\n\n\n2.3 使用 systemctl 启动服务\n\n# 启动frpsudo systemctl start frp# 开机自启动 sudo systemctl enable frp\n\n# 重启sudo systemctl restart frp# 停止sudo systemctl stop frp# 查看日志sudo systemctl status frp\n","categories":["apps"],"tags":["frp","rdp","systemctl"]},{"title":"frp配置内网穿透、通过rdp远程桌面控制windows系统","url":"/2019/02/27/network/frp%E9%85%8D%E7%BD%AE%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F%E3%80%81%E9%80%9A%E8%BF%87rdp%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2%E6%8E%A7%E5%88%B6windows%E7%B3%BB%E7%BB%9F/","content":"\nref: https://github.com/fatedier/frp\n\n1.内网穿透1.1 服务器端 VPS 配置下载匹配的版本，https://github.com/fatedier/frp/releases\n\n修改 frps.ini 文件：\n\n# frps.ini[common]bind_port = 7000\n\n启动 frps：\n\n./frps -c ./frps.ini\n\n\n1.2 客户端配置\n修改 frpc.ini 文件，假设 frps 所在服务器的公网 IP 为 123.123.1.0；\n\n# frpc.ini[common]server_addr = 123.123.1.0server_port = 7000[rdp]type = tcplocal_ip = 0.0.0.0local_port = 3389remote_port = 5200\n\n启动 frpc：\n\nfrpc.exe -c frpc.ini\n\n2 远程访问\nip 123.123.1.0:5200\n\n输入用户名，密码\n\n\n3 将 frp 封装成 windows 后台服务windows下 frp 程序启动后会有一个cmd窗口，需要一直开着，不能关闭。\n以下将 frp 封装成 windows 服务，可以在后台运行，并且开机自启动。\n\n需要下载 NSSM, http://www.nssm.cc/usage, 它可以将普通的 windows 程序封装成服务。\n\n3.1 使用 GUI 配置：\n运行 nssm install frpc\n在弹出的对话框中填写：\nPath：              C:/frpc/frpc.exe\nStartup directory： C:/frpc/\nArguments：         -c C:/frpc/frpc.ini\n\n\n\n\n3.2 使用命令行配置：NSSM 也可以使用命令行配置：\nnssm install frpc &quot;C:/frpc/frpc.exe&quot;nssm set frpc AppParameters  &quot;-c C:/frpc/frpc.ini&quot;\n\n3.3 启动服务等# 启动服务nssm start frpc# 停止服务nssm stop frpc# 编辑服务配置nssm edit frpc# 删除服务nssm remove frpc\n\n3.4 测试\n检查远程访问端口 3389 是否正常\n\n运行 netstat -ano, 寻找是否有 0.0.0.0:3389 端口；\n如果没有，我的电脑-右键属性-高级系统设置-远程选项卡-勾选允许远程访问，确定。\n\n\n检查 frpc 服务是否运行\n\n运行 services.msc，可以打开 windows 的服务管理器；\n检查 frpc 服务是否启动。\n\n\n\n","categories":["apps"],"tags":["frp","rdp"]},{"title":"使用 scoop 安装管理 windows 软件","url":"/2019/02/23/scoop/%E4%BD%BF%E7%94%A8scoop%E5%AE%89%E8%A3%85%E7%AE%A1%E7%90%86windows%E8%BD%AF%E4%BB%B6/","content":"\nref: (https://github.com/lukesampson/scoop)\n\n1. 安装 scoop\n1.1 安装 PowerShell 5.0 以上版本\n\nwin10： 已自带；\nwin7 x64： 下载 Win7AndW2K8R2-KB3191566-x64.zip，安装；\nref: https://docs.microsoft.com/zh-cn/powershell/scripting/install/installing-windows-powershell?view=powershell-6\n\n\n\n\n1.2 以当前Win账户运行PowerShell\n\n\nset-executionpolicy remotesigned -s cu\n\n\n1.3 安装 scoop\n\niex (new-object net.webclient).downloadstring(&#x27;https://get.scoop.sh&#x27;)\n\n\n\n2. 使用方法\n2.1 安装常用软件\n\nscoop install sudoscoop install git 7zip opensshscoop install aria2scoop install ffmpegscoop install nodejsscoop install python# 安装指定的版本，不要更新scoop install python@3.6.8scoop hold python# scoop unhold python\n\n\n\ngit 配置\n右键菜单里添加 git bash here 的方法\n新建注册表文件 git bash here.reg, 内容如下（路径按需修改）\n\nWindows Registry Editor Version 5.00[HKEY_CURRENT_USER\\Software\\Classes\\Directory\\Background\\shell\\Git Bash Here]&quot;ICON&quot;=&quot;\\&quot;C:\\\\Users\\\\XXXX\\\\scoop\\\\apps\\\\git\\\\current\\\\git-bash.exe\\&quot;&quot; [HKEY_CURRENT_USER\\Software\\Classes\\Directory\\Background\\shell\\Git Bash Here\\command]@=&quot;\\&quot;C:\\\\Users\\\\XXXX\\\\scoop\\\\apps\\\\git\\\\current\\\\git-bash.exe\\&quot;&quot; \n\n\n2.2 安装 extras 库的软件\n\n# 添加库 extras scoop bucket add extras# 安装scoop install googlechromescoop install everythingscoop install screentogifscoop install snipastescoop install vscode# 添加库 versions, 可以安装其他（落后的)版本scoop bucket add versionsscoop install python@3.7.7# 添加库 jetbrainsscoop bucket add jetbrainsscoop install pycharm-professional# 添加库 Ash258scoop bucket add Ash258 &#x27;https://github.com/Ash258/scoop-Ash258.git&#x27;scoop install potplayer# 添加 第三方库 doradoscoop bucket add dorado &#x27;https://github.com/h404bi/dorado&#x27;scoop install trafficmonitorscoop install wechatscoop install qqplayer\n\n\n更多的库 https://github.com/lukesampson/scoop/blob/master/buckets.json\n\n&#123;    &quot;main&quot;: &quot;https://github.com/ScoopInstaller/Main&quot;,    &quot;extras&quot;: &quot;https://github.com/lukesampson/scoop-extras&quot;,    &quot;versions&quot;: &quot;https://github.com/ScoopInstaller/Versions&quot;,    &quot;nightlies&quot;: &quot;https://github.com/ScoopInstaller/Nightlies&quot;,    &quot;nirsoft&quot;: &quot;https://github.com/kodybrown/scoop-nirsoft&quot;,    &quot;php&quot;: &quot;https://github.com/ScoopInstaller/PHP&quot;,    &quot;nerd-fonts&quot;: &quot;https://github.com/matthewjberger/scoop-nerd-fonts&quot;,    &quot;nonportable&quot;: &quot;https://github.com/oltolm/scoop-nonportable&quot;,    &quot;java&quot;: &quot;https://github.com/ScoopInstaller/Java&quot;,    &quot;games&quot;: &quot;https://github.com/Calinou/scoop-games&quot;,    &quot;jetbrains&quot;: &quot;https://github.com/Ash258/Scoop-JetBrains&quot;&#125;\n\n\n\n更多更多的第三方库 https://github.com/rasa/scoop-directory/\n\n\n\n2.3 其他命令\n\n# 显示已安装软件scoop list# 显示可更新的软件scoop status# 更新scoop, 更新指定软件scoop updatescoop update &lt;app&gt;scoop update vscode-insiders -kf    # 更新 nightly 版本# 清理所有旧版软件, 清理指定软件, 清理过期的安装包scoop cleanup *scoop cleanup &lt;app&gt;scoop cleanup -k *  # 或 scoop cleanup --cache *# 查找软件scoop search &lt;app&gt;# 显示软件信息（含必要配置说明）scoop info &lt;app&gt;\n\n\n用scoop管理软件，清爽多了，全部都在c：/user/xxx/scoop/app里，但是也有几个问题：\n\n好多软件是从官网，github，amazon下载的，网速比较渣，可以先安装aria2，安装后scoop会优先调用aria2来下载软件；\n安装之后一般系统环境变量是设置好了的，但是有些软件的文件关联，右键菜单之类需要手动添加，可以先scoop info ，看看有没有相关配置说明参考。\n\n\nscoop 调用 aria2 的相关配置, 配置文件路径 c：/user/xxx/.config/scoop/config.json , 加入以下：\n&#123;  &quot;aria2-enabled&quot;:  true,  &quot;aria2-retry-wait&quot;:  5,  &quot;aria2-split&quot;:  10,  &quot;aria2-min-split-size&quot;:  &quot;2M&quot;&#125;\n\n也可以用命令行 scoop config :\nscoop config aria2-enabled true                   # default: truescoop config aria2-retry-wait 8                   # default: 2scoop config aria2-split 8                        # default: 5scoop config aria2-max-connection-per-server 8   # default: 5scoop config aria2-min-split-size] 2M             # default: 5M\n","categories":["apps"],"tags":["scoop"]},{"title":"runcat-pyqt5-win：在windows任务栏养猫","url":"/2019/01/24/python-app/runcat-for-win-%E5%9C%A8windows%E4%BB%BB%E5%8A%A1%E6%A0%8F%E5%85%BB%E7%8C%AB/","content":"runcat-pyqt5-winRunCat是一款 mac应用，用奔跑的猫来显示当前系统资源（CPU）占用情况。\n但是只有mac版，于是用python撸了一个，可以在windows任务栏（通知区域）养猫。\n首先用psutil获得CPU或内存的使用情况，然后用pyqt5创建QSystemTrayIcon显示在任务栏的托盘区域。\nGPU的使用情况可以用 nvidia-ml-py, https://pypi.org/project/nvidia-ml-py/的pynvml模块（仅限nvidia gpu）。\n\n\n运行效果\n\nRequirements\npsutil\npyqt5\nnvidia-ml-py\n\nCode\ngithub仓库： https://github.com/shenbo/runcat-pyqt5-win\n\nCPU 版\n\n\nimport sysimport timeimport threadingfrom PyQt5.QtGui import QIconfrom PyQt5.QtWidgets import QApplication, QSystemTrayIconimport psutil# Get cpu usagedef func():    while True:        global cpu        cpu = psutil.cpu_percent(interval=1) / 100        time.sleep(1)# Create Qt Appapp = QApplication(sys.argv)app.setQuitOnLastWindowClosed(False)# Create trayicontray = QSystemTrayIcon()tray.setIcon(QIcon(&#x27;0.ico&#x27;))tray.setVisible(True)cpu = 0.1timer = threading.Timer(1, func, [])timer.start()while True:    t = (cpu * cpu - 10 * cpu + 10) / 40    for i in range(5):        # Update trayicon        tray.setIcon(QIcon(&#x27;&#123;&#125;.ico&#x27;.format(i)))        tray.setToolTip(&#x27;CPU: &#123;:.2%&#125;&#x27;.format(cpu))        time.sleep(t)app.exec_()\n\n\n内存版\n\nimport sysimport timeimport threadingfrom PyQt5.QtGui import QIconfrom PyQt5.QtWidgets import QApplication, QSystemTrayIconimport psutil# Get memory usagedef func():    while True:        global mem        mem = psutil.virtual_memory().percent / 100        time.sleep(1)# Create Qt Appapp = QApplication(sys.argv)app.setQuitOnLastWindowClosed(False)# Create trayicontray = QSystemTrayIcon()tray.setIcon(QIcon(&#x27;0.ico&#x27;))tray.setVisible(True)mem = 0.1timer = threading.Timer(1, func, [])timer.start()while True:    t = (mem * mem - 10 * mem + 10) / 40    for i in range(5):        # Update trayicon        tray.setIcon(QIcon(&#x27;&#123;&#125;.ico&#x27;.format(i)))        tray.setToolTip(&#x27;Memory: &#123;:.2%&#125;&#x27;.format(mem))        time.sleep(t)app.exec_()\n\n\nGPU 版\n\nimport sysimport timeimport threadingfrom PyQt5.QtGui import QIconfrom PyQt5.QtWidgets import QApplication, QSystemTrayIconimport pynvmlpynvml.nvmlInit()handle = pynvml.nvmlDeviceGetHandleByIndex(0)   # GPU id: 0# Get gpu usagedef func():    while True:        global gpu        meminfo = pynvml.nvmlDeviceGetMemoryInfo(handle)        gpu = meminfo.used / meminfo.total        time.sleep(1)# Create Qt Appapp = QApplication(sys.argv)app.setQuitOnLastWindowClosed(False)# Create trayicontray = QSystemTrayIcon()tray.setIcon(QIcon(&#x27;0.ico&#x27;))tray.setVisible(True)gpu = 0.1timer = threading.Timer(1, func, [])timer.start()while True:    t = (gpu * gpu - 10 * gpu + 10) / 40    for i in range(5):        # Update trayicon        tray.setIcon(QIcon(&#x27;&#123;&#125;.ico&#x27;.format(i)))        tray.setToolTip(&#x27;GPU: &#123;:.2%&#125;&#x27;.format(gpu))        time.sleep(t)app.exec_()\n\nUsage\n直接clone或下载， 改 *.pyw 运行\n\n或者下载打包后的 *.exe， 但是有30多M。。。下载exe\n\n\n\nref:\n\nhttps://github.com/Kyome22/menubar_runcat\nhttps://github.com/sunthx/RunCat-Win\n\n\n","categories":["python"],"tags":["python","pyqt5"]},{"title":"XPS9370(UHD620集显)使用Solidworks卡顿","url":"/2019/01/12/xps/XPS9370-UHD620%E9%9B%86%E6%98%BE-Solidworks%E5%8D%A1%E9%A1%BF/","content":"2019年升级了装备 XPS 9370，但是 Solidworks 2014使用时非常卡。XPS 9370 配置的是 Intel UHD 620 集显，公司还有个笔记本是 ThinkPad New S2，是HD 620显卡，solidworks 却不卡。\n解决办法：改注册表将 Solidworks 2016 原有的显卡系列随便选一个导出来，然后用文本编辑器打开，将显卡系列的名称（如 HD Graphics）改为 UHD Graphics 620，Workarounds 值改为 00000009。\n\n\n或直接将以下导入注册表。\nWindows Registry Editor Version 5.00[HKEY_CURRENT_USER\\Software\\SolidWorks\\SOLIDWORKS 2016\\Performance\\Graphics\\Hardware\\Intel\\Intel(R) UHD Graphics 620]&quot;Workarounds&quot;=dword:00000009[HKEY_CURRENT_USER\\Software\\SolidWorks\\SOLIDWORKS 2016\\Performance\\Graphics\\Hardware\\Intel\\Intel(R) UHD Graphics 620\\V001_FG_X614105256_V815102256]&quot;Workarounds&quot;=dword:10000480[HKEY_CURRENT_USER\\Software\\SolidWorks\\SOLIDWORKS 2016\\Performance\\Graphics\\Hardware\\Intel\\Intel(R) UHD Graphics 620\\V002_FG_V815102345]&quot;Workarounds&quot;=dword:10000080\n\n\n以下方法已失效！\n在网上搜了一圈大致有以下几个解决方法：\n\n一、在 Solidworks  的选项里，勾选启动 OpenGL 软件加速；\n找到了 OpenGL 选项，发现默认是已勾选的，状态还是灰色的，根本改不了；\n\n\n\n\n\n\n\n\n二、换 Solidworks 2016版以后的版本，2016版之后对 WIN10 的支持比较好；\n装了2016版，问题还是一样；\n重装了 WIN10 专业版也不行；\n\n\n三、可能是显卡驱动的问题，把显卡驱动降级；\n没有尝试；XPS 出厂的显卡驱动版本时是22.xx，官网最新显卡驱动已经是25.xx了，不想再降级了；\n后续又检查 ThinkPad New S2 出厂的显卡驱动版本时是21.xx；很有可能是驱动的问题\n\n\n四、由于UHD 620是新推出的显卡，不在 Solidworks  默认支持的列表里面，需要改注册表，将新驱动添加进去；\n检查注册表，支持列表里确实没有UHD 620；但是将UHD 620加进去还是没用；\n\n\n\n\n\n\n将原有的显卡系列随便选一个导出来，然后用文本编辑器打开，将显卡系列的名称（如 HD Graphics）改为 UHD Graphics 即可。\n\n\n几乎要放弃了，大不了就卡着卡着用吧。想到显卡驱动还没更新到最新版，更新一下驱动吧，更新到了 Dell 官网的24.xx版；\n\n\n\n注：虽然是 Intel 的显卡，但是驱动貌似不是Intel官网上的官方驱动（最新版是25.xx），Intel官网的驱动安不上去；估计是 dell自己做了一些（负）优化，需要到 Dell 官网下载显卡驱动（最新版是24.xx，写于2019年1月）。\n\n\n再打开 Solidworks 2016，发现启动 OpenGL 软件加速选项变成白色，可以取消勾选了！！！\n\n卡顿问题终于解决了。。。\n\n但是一打开工程图就崩溃。。。\n\nWTF!\n\n\n\n最终解决方案：\n打开Solidworks Rx，以安全模式打开。\n\n\n\n\nOK！！暂未发现问题。\n\n","categories":["xps"],"tags":["xps","solidworks"]},{"title":"RTX2070显卡、tensorflow-gpu、CUDA10安装","url":"/2018/12/29/tensorflow/RTX2070%E6%98%BE%E5%8D%A1%E3%80%81tensorflow-gpu%E3%80%81CUDA10%E5%AE%89%E8%A3%85/","content":"1.硬件安装前一段用 tensorflow 玩深度学习，笔记本只能跑个 mnist，再大点的模型都跑不动。试了腾讯云、极客云，用着也不方便。\n还是上显卡吧！\n\n本来一门心思想买1080，看着看着RTX20系列出了，买新不买旧，那就买2070吧。\n学校有个台式机是dell optix 7020，小机箱，原装电源只有～300w。还得换个电源。\n机械硬盘还得再换个ssd。。。\n\n\n\n最后选择：\n\n凄惨红 iGame GeForce RTX 2070 Ultra  OC\n\n\n\n\nIntel 545S 256G固态硬盘 2.5英寸盘 SATA接口 SSD\n\n\n\n\n安钛克 EAG550evo金牌全模组电源\n\n\n\n这个台式机的主板供电接口不是通用的，坑爹，还得配一个转接头：\n\nDELL Optiplex 3020 7020 9020主板 8针电源线 电源24PIN转8PIN线\n\n\n\n东西到齐开始安装。。。\n\n原机箱\n\n\n\n\n\n显卡、电源到货\n\n\n\n\n原硬盘和支架挡到了显卡，果断拆掉。。。\n\n\n\n\n\n\n\n事实证明，并不好拆。。。\n\n\n安装完成！\n\n\n\n2.软件安装\n参考Tensorflow官网的tensorflow-gpu版本,安装指南, https://tensorflow.google.cn/install/gpu。\n\nNVIDIA® GPU 驱动程序, https://www.nvidia.com/drivers - CUDA 9.0 需要 384.x 或更高版本。\nCUDA® 工具包, https://developer.nvidia.com/cuda-zone - TensorFlow 支持 CUDA 9.0。\nCUDA 工具包附带的 CUPTI, http://docs.nvidia.com/cuda/cupti/ \ncuDNN SDK, https://developer.nvidia.com/cudnn （7.2 及更高版本）\n\n\n注意只支持到CUDA 9，到处是坑。。。\n\n\n\n\n\n首先，安装显卡驱动，Win10已经自动装好了。可以到nvidia官网确认一下驱动的版本是不是最新的。\n\n\n\n\n\n安装CUDA 9.2\n\nCUDA官网的最新版已经是CUDA10；找到历史版本试着安装CUDA9.2，但是试了几次都安装失败。。。估计是CUDA9.2不支持RTX2070。。。那就硬着头皮安装CUDA10吧。\n\n\n安装CUDA 10\n\n\n\n\n安装cuDNN 7.3.1，需要注册一个 nvidia developer账号。\n\n\n\n\n安装 tensorflow-gpu，最新版是 tensorflow_gpu-1.11.0，直接用pip安装。\n\npip install tensorflow-gpu\n\n\n赶紧 import 试一下：\n\nimport tensorflow as tfprint(tf.__version__)\n\n但是运行时却报错 Import Error: DLL load fail: 找不到指定的模块\n阿西吧。。。看来真不支持CUDA10啊\n最后请教论坛大神，找到了野生版轮子：\n\ntensorflow-windows-wheel, https://github.com/fo40225/tensorflow-windows-wheel\n\n\n\n\n找到tensorflow_gpu-1.11.0-CP36-cp36m-win_amd64.whl\n\n\n\n\n下载到本地安装\n\npip install tensorflow_gpu-1.11.0-CP36-cp36m-win_amd64.whl\n\n\n运行 import ... ，成功！\n\n以上， 全部搞定！！\n","categories":["tensorflow"],"tags":["tensorflow","keras","RTX2070","tensorflow-gpu","CUDA10"]},{"title":"使用python定时自动截屏，发邮件通知","url":"/2018/12/28/python/Python-%E5%AE%9A%E6%97%B6%E8%87%AA%E5%8A%A8%E6%88%AA%E5%B1%8F%EF%BC%8C%E5%8F%91%E9%82%AE%E4%BB%B6%E9%80%9A%E7%9F%A5/","content":"前一段做试验，需要远程监控现场的电脑；写了一个定时截屏并把图片发送至邮箱的脚本，这样微信就可以得到通知。\n1. 截屏，并保存图片from PIL import ImageGrabimport timetime_now = time.strftime(&#x27;%Y%m%d-%H%M%S&#x27;)pic = ImageGrab.grab()pic_name = time_now+&#x27;.jpg&#x27;pic.save(pic_name)\n\n2. 定时任务import threadingdef func():    t = time.localtime(time.time())    min, hour, wkday = t.tm_min, t.tm_hour, t.tm_wday    # --------add tasks here--------------------------    if min in [0, 15, 30, 45]:        print(&#x27;tasks&#x27;)       # --------tasks end----------------------------    global timer    timer = threading.Timer(60, func, [])    timer.start()timer = threading.Timer(1, func, [])timer.start()\n\n\n\n3.发邮件，将图片作为附件from email.mime.text import MIMETextfrom email.header import Headerfrom smtplib import SMTP_SSLfrom email.mime.application import MIMEApplicationfrom email.mime.multipart import MIMEMultipartdef send_mail(mail_title=&#x27;&#x27;, mail_content=&#x27;&#x27;, pic_name=&#x27;&#x27;):    sender = &#x27;xx@qq.com&#x27;    receiver = &#x27;xx@qq.com&#x27;    pwd = &#x27;xxxxxxxxxxxx&#x27;                # qq邮箱授权码    smtp = SMTP_SSL(&#x27;smtp.qq.com&#x27;)      # ssl登录    smtp.login(sender, pwd)    msg = MIMEMultipart()    msg[&quot;Subject&quot;] = Header(mail_title, &#x27;utf-8&#x27;)    msg[&quot;from&quot;] = sender    msg[&quot;to&quot;] = receiver    puretext = MIMEText(&#x27;content: &#x27;+mail_content)    msg.attach(puretext)        jpgpart = MIMEApplication(open(pic_name, &#x27;rb&#x27;).read())    jpgpart.add_header(&#x27;Content-Disposition&#x27;, &#x27;attachment&#x27;, filename=pic_name)    msg.attach(jpgpart)        smtp.sendmail(sender, receiver, msg.as_string())    smtp.quit()\n\n\n完整代码from datetime import datetimeimport timefrom PIL import ImageGrabimport osimport threadingdef send_mail(mail_title=&#x27;&#x27;, mail_content=&#x27;&#x27;, pic_name=&#x27;&#x27;):    from email.mime.text import MIMEText    from email.header import Header    from smtplib import SMTP_SSL    from email.mime.application import MIMEApplication    from email.mime.multipart import MIMEMultipart    sender = &#x27;xx@qq.com&#x27;    receiver = &#x27;xx@qq.com&#x27;    pwd = &#x27;xxxxxxxxxxxx&#x27;                # qq邮箱授权码    smtp = SMTP_SSL(&#x27;smtp.qq.com&#x27;)      # ssl登录    smtp.login(sender, pwd)    msg = MIMEMultipart()    msg[&quot;Subject&quot;] = Header(mail_title, &#x27;utf-8&#x27;)    msg[&quot;from&quot;] = sender    msg[&quot;to&quot;] = receiver    puretext = MIMEText(&#x27;content: &#x27;+mail_content)    msg.attach(puretext)    jpgpart = MIMEApplication(open(pic_name, &#x27;rb&#x27;).read())    jpgpart.add_header(&#x27;Content-Disposition&#x27;, &#x27;attachment&#x27;, filename=pic_name)    msg.attach(jpgpart)        smtp.sendmail(sender, receiver, msg.as_string())    smtp.quit()        def func():    t = time.localtime(time.time())    min, hour, wkday = t.tm_min, t.tm_hour, t.tm_wday    # --------add tasks here--------------------------    if min in [0, 15, 30, 45]:        time_now = time.strftime(&#x27;%Y%m%d-%H%M%S&#x27;)        pic = ImageGrab.grab()        pic_name = time_now+&#x27;.jpg&#x27;        pic.save(pic_name)        title = &#x27;mgso4 test monitor &#x27; + time_now        send_mail(title, title, pic_name)        # os.remove(pic_name)    # --------tasks end----------------------------    global timer    timer = threading.Timer(60, func, [])    timer.start()if __name__ == &quot;__main__&quot;:    timer = threading.Timer(1, func, [])    timer.start()\n\nPS1：去掉python程序的命令行窗口把 *.py 文件后缀改成 *.pyw ，即可去掉运行时出现的cmd窗口，直接后台运行。\nPS2：加入开机启动（Win10）将 *.pyw 文件做一个快捷方式，放到开始菜单的启动文件夹C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp里，这样每次开机就能直接启动了。\n～\n","categories":["python"],"tags":["python"]},{"title":"使用 python 批量将xls文件转换为xlsx","url":"/2018/12/28/python/Python-%E6%89%B9%E9%87%8F%E5%B0%86xls%E6%96%87%E4%BB%B6%E8%BD%AC%E6%8D%A2%E4%B8%BAxlsx/","content":"处理excel数据时遇到了个问题，数据导出来总是不全。\n后来发现是 *.xls 格式的问题：\n\nxls格式 最大行数为65535\n\n\nxlsx格式 最大行数为1048576（满足要求了）\n\n而且xlsx文件大小只有原来的1&#x2F;3左右。\n但是手上有一大堆旧的xls文件需要转换。\n解决方法：安装pywin32pip install pywin32\n\n代码import osimport os.pathimport win32com.client as win32## 根目录rootdir = u&#x27;E:\\\\temp1&#x27;# 三个参数：父目录；所有文件夹名（不含路径）；所有文件名for parent, dirnames, filenames in os.walk(rootdir):    for fn in filenames:        filedir = os.path.join(parent, fn)        print(filedir)        excel = win32.gencache.EnsureDispatch(&#x27;Excel.Application&#x27;)        wb = excel.Workbooks.Open(filedir)        # xlsx: FileFormat=51        # xls:  FileFormat=56,        wb.SaveAs(filedir.replace(&#x27;xls&#x27;, &#x27;xlsx&#x27;).replace(&#x27;XLS&#x27;, &#x27;xlsx&#x27;), FileFormat=51)        wb.Close()                                         excel.Application.Quit()\n","categories":["python"],"tags":["python","excel"]},{"title":"jupyter 设置远程访问","url":"/2018/12/28/python/jupyter-%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE/","content":"在vps上安装jupyter，设置远程访问。0. 安装jupyterpip install jupyter\n\n1. 生成密码打开python：\nfrom notebook.auth import passwdpasswd()\n根据提示输入密码，得到类似下面的密文：‘sha1:ce23d945972*********’复制下来。\n2. 生成配置文件：jupyter notebook --generate-config# 生成完可以看到配置文件的存储位置\n\n3. 修改配置文件sudo nano jupyter_notebook_config.py\nc.NotebookApp.ip = &#x27;*&#x27;c.NotebookApp.password = u&#x27;sha:ce..粘贴密文..&#x27;c.NotebookApp.open_browser = False c.NotebookApp.port = 3333\n\n4. 启动jupyternohup jupyter notebook  &amp;\n\n5. 远程登录试试打开 http://xxx.xxx.xxx.xxx:3333输入第一步设置的密码即可\n","categories":["python"],"tags":["python","jupyter"]},{"title":"PPT导出高分辨率的图片","url":"/2018/10/11/office/ppt-%E5%AF%BC%E5%87%BA%E9%AB%98%E5%88%86%E8%BE%A8%E7%8E%87%E7%9A%84%E5%9B%BE%E7%89%87/","content":"PPT导出高分辨率的图片（300dpi）\n1. 打开注册表\nwin + R 调出命令行, 键入 regedit , 回车\n\n2. 查找注册表路径（Office 2016版）：HKEY_CURRENT_USER\\Software\\Microsoft\\Office\\16\\PowerPoint\\Options\n\n3. 新建 DWORD 值(D)：\n名称为 ExportBitmapResolution\n数值为 300 （十进制）\n\n4. 打开需要的PPT，另存为或导出为图片格式。","categories":["office"],"tags":["ppt"]},{"title":"Hexo 使用 Webhook 自动部署","url":"/2018/07/31/hexo/hexo-%E4%BD%BF%E7%94%A8webhook%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/","content":"准备\n需要两个 github 仓库：\n一个用于发布页面： shenbo.github.io\n一个用于放源码： hexo-source\n\n\n已配置好 hexo 的 VPS 服务器\n\n1. 创建 hexo-source 仓库\n在hexo的source目录下（ ~&#x2F;hexo&#x2F;source）运行：\n\ncd hexo/sourcegit initgit add .git commit -m &quot;first commit&quot;git remote add origin https://github.com/shenbo/hexo-source.gitgit push -u origin master\n\n\n\n2. 搭建Webhook 服务2.1 编写 hexo 部署命令新建文件 hexo-d.sh ，内容如下：\ncd ~/hexo/sourcegit pull origin mastercd ~/hexohexo cleanhexo generatehexo deploy\n\n2.2 方案1：用 Python 接收 webhook\n新建文件 webhook.py ，内容如下：\n\nfrom wsgiref.simple_server import make_serverimport osdef application(environ, start_response):    start_response(&#x27;200 OK&#x27;, [(&#x27;Content-Type&#x27;, &#x27;text/html&#x27;)])    print(&#x27;blog.sh....&#x27;)    os.system(&#x27;/bin/bash hexo-d.sh &amp;&#x27;)        return [b&#x27;Hello, webhook!&#x27;]httpd = make_server(&#x27;&#x27;, 9000, application)print(&#x27;Serving HTTP on port 9000...&#x27;)# start HTTP server:httpd.serve_forever()\n\n\n运行webhook.py服务\n\nnohup python3 webhook.py &amp;\n\n2.3 方案二：直接安装 webhook 应用\n安装 webhook, https://github.com/adnanh/webhook 应用\n\nsudo apt-get install webhook\n\n\n新建配置文件 hexo-hooks.json，内容为：\n\n[  &#123;    &quot;id&quot;: &quot;blog&quot;,    &quot;execute-command&quot;: &quot;hexo-d.sh&quot;,    &quot;response-message&quot;: &quot;job done!&quot;  &#125;]\n\n\n启动 webhook 服务，默认端口为9000\n\nnohup webhook -hooks hexo-hook.json -verbose &amp;\n\n\nPS: 查看端口占用情况\n\nsudo netstat -peanut\n\n3. 配置 github 仓库的 webhook进入 github.com -&gt; repository -&gt; hexo-source -&gt; settings -&gt; webhook\n填写 webhook配置信息.\n\nPayload URL :  http://xxx.xxx.xxx.xxx:9000/\nPayload URL :  http://xxx.xxx.xxx.xxx:9000/hooks/blog\nContent type : aplacation&#x2F;json\n\n— ok！\n4. 测试在笔记本上 git clone hexo-source 仓库，然后 push 一下。\n","categories":["hexo"],"tags":["hexo","webhook"]},{"title":"pandas列名的修改","url":"/2018/07/06/sci-pandas/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-pandas%E5%88%97%E5%90%8D%E7%9A%84%E4%BF%AE%E6%94%B9/","content":"生成一个 dataframeimport pandas as pdimport numpy as npdf = pd.DataFrame(np.random.rand(2, 4))print(df)##              0         1         2         3#    0  0.714730  0.566612  0.764352  0.728862#    1  0.823414  0.662657  0.800281  0.711702\n\n\n\n定义列名df.columns = [&#x27;beijing&#x27;, &#x27;shanghai&#x27;, &#x27;guangzhou&#x27;, &#x27;shenzhou&#x27;]print(df)##        beijing  shanghai  guangzhou  shenzhou#    0  0.714730  0.566612   0.764352  0.728862#    1  0.823414  0.662657   0.800281  0.711702\n\n重命名列df.rename(&#123;&#x27;beijing&#x27;:&#x27;A&#x27;, &#x27;shanghai&#x27;:&#x27;B&#x27;, &#x27;guangzhou&#x27;:&#x27;C&#x27;, &#x27;shenzhou&#x27;:&#x27;D&#x27;&#125;, axis=&#x27;columns&#x27;, inplace=True)print(df)##              A         B         C         D#    0  0.714730  0.566612  0.764352  0.728862#    1  0.823414  0.662657  0.800281  0.711702\n\n重命名列2df.rename(columns=&#123;&#x27;A&#x27;:&#x27;A_1&#x27;, &#x27;B&#x27;:&#x27;B_1&#x27;, &#x27;C&#x27;:&#x27;C_1&#x27;, &#x27;D&#x27;:&#x27;D_1&#x27;&#125;, inplace=True)print(df)##            A_1       B_1       C_1       D_1#    0  0.714730  0.566612  0.764352  0.728862#    1  0.823414  0.662657  0.800281  0.711702\n\n替换特定的字符或前缀&#x2F;后缀df.columns = df.columns.str.replace(&#x27;_&#x27;, &#x27;&#x27;)print(df)##             A1        B1        C1        D1#    0  0.714730  0.566612  0.764352  0.728862#    1  0.823414  0.662657  0.800281  0.711702","categories":["sci"],"tags":["pandas"]},{"title":"pandas显示完整的行或列","url":"/2018/07/06/sci-pandas/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-pandas%E6%98%BE%E7%A4%BA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%A1%8C%E6%88%96%E5%88%97/","content":"pandas显示完整的行或列，避免省略中间行或列、以及自动换行。\nimport pandas as pdpd.set_option(&#x27;display.width&#x27;, 1000)pd.set_option(&#x27;display.max_rows&#x27;, 500)pd.set_option(&#x27;display.max_columns&#x27;, 500)\n","categories":["sci"],"tags":["pandas"]},{"title":"pandas时间序列及绘图","url":"/2018/07/06/sci-pandas/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-pandas%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97-datetime%E6%A0%BC%E5%BC%8F/","content":"1. 由字符串格式生成时间数据import pandas as pdimport numpy as np# string datetime --&gt; pandas datetimedt_start = &#x27;2018-07-04 12:00&#x27;pd_dt_start = pd.datetime.strptime(dt_start, &#x27;%Y-%m-%d %H:%M&#x27;)print(dt_start)         # 2018-07-04 12:00print(pd_dt_start)      # 2018-07-04 12:00:00\n\n\n\n2. 生成时间序列# pandas datetime rangedt_list = pd.date_range(&#x27;2018-07-04 09:00&#x27;, &#x27;2018-07-05 09:00&#x27;, freq=&#x27;H&#x27;)print(dt_list)# 构建 DataFramedf = pd.DataFrame(dt_list, columns=[&#x27;Time&#x27;])                # 将时间序列作为 &#x27;Time&#x27; 列df[&#x27;Temp&#x27;] = np.random.normal(30, 5, size=len(dt_list))     # 添加一列温度数据，&#x27;Temp&#x27;print(df)df.to_csv(&#x27;data.csv&#x27;)    # 保存为csv文件\n\n3. 读取文件中的时间# csv file datetime --&gt; pandas datetimedf = pd.read_csv(&#x27;data.csv&#x27;)     # 读取csv文件print(df[&#x27;Time&#x27;].head())         # dtype应该是datetime64[ns]； 如dtype是object，需转换一下df[&#x27;Time&#x27;] = pd.to_datetime(df[&#x27;Time&#x27;])     # 调用pd.to_datetime 转换print(df[&#x27;Time&#x27;].head())\n\n4. 数据筛选df = df[[&#x27;Time&#x27;, &#x27;Temp&#x27;]].dropna()      # 去除异常数据df = df[df[&#x27;Time&#x27;] &gt;= pd_dt_start]      # 时间筛选df = df[df[&#x27;Temp&#x27;] &lt;= 35.0]             # 温度筛选print(df[&#x27;Time&#x27;].head())\n\n5. 绘图import matplotlib.pyplot as pltimport matplotlib.ticker as tickerimport matplotlib.dates as datesplt.figure(figsize=(12, 8))plt.plot(df[&#x27;Time&#x27;], df[&#x27;Temp&#x27;])plt.xlabel(&#x27;Time&#x27;)plt.ylabel(&#x27;Temp (C)&#x27;)# 自定义刻度ax = plt.gca()ax.xaxis.set_major_locator(dates.DayLocator(interval=1))     # 主刻度为 每天ax.xaxis.set_major_formatter(dates.DateFormatter(&#x27;00\\n%Y-%m-%d&#x27;))ax.xaxis.set_minor_locator(dates.HourLocator(interval=1))   # 副刻度为 每小时ax.xaxis.set_minor_formatter(dates.DateFormatter(&#x27;%H&#x27;))ax.yaxis.set_major_locator(ticker.MultipleLocator(10))plt.show()\n\n\n\n\n\n时间字符串格式\nref: https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes\n\n\n\n\nDirective\nMeaning\nExample\n\n\n\n%a\nWeekday\nSun, Mon, …, Sat (en_US)\n\n\n%A\nWeekday  full name.\nSunday, Monday, …, Saturday (en_US)\n\n\n%w\nWeekday as a decimal number, where 0 is Sunday .\n0, 1, …, 6\n\n\n%d\nDay of the month as a zero-padded decimal number.\n01, 02, …, 31\n\n\n%b\nMonth as locale’s abbreviated name.\nJan, Feb, …, Dec (en_US);\n\n\n%B\nMonth as locale’s full name.\nJanuary, February, …, December (en_US);\n\n\n%m\nMonth as a zero-padded decimal number.\n01, 02, …, 12\n\n\n%y\nYear without century as a zero-padded decimal number.\n00, 01, …, 99\n\n\n%Y\nYear with century as a decimal number.\n0001, 0002, …, 2013, 2014, …, 9998, 9999\n\n\n%H\nHour (24-hour clock) as a zero-padded decimal number.\n00, 01, …, 23\n\n\n%I\nHour (12-hour clock) as a zero-padded decimal number.\n01, 02, …, 12\n\n\n%p\nLocale’s equivalent of either AM or PM.\nAM, PM (en_US);\n\n\n%M\nMinute as a zero-padded decimal number.\n00, 01, …, 59\n\n\n%S\nSecond as a zero-padded decimal number.\n00, 01, …, 59\n\n\n%f\nMicrosecond as a decimal number, zero-padded to 6 digits.\n000000, 000001, …, 999999\n\n\n%z\nUTC offset in the form ±HHMM[SS[.ffffff]]\n(empty), +0000, -0400, +1030, +063415, -030712.345216\n\n\n%Z\nTime zone name (empty string if the object is naive).\n(empty), UTC, GMT\n\n\n%j\nDay of the year as a zero-padded decimal number.\n001, 002, …, 366\n\n\n%U\nWeek number of the year (Sunday as the first day)\n00, 01, …, 53\n\n\n%W\nWeek number of the year (Monday as the first day)\n00, 01, …, 53\n\n\n%c\nLocale’s appropriate date and time representation.\nTue Aug 16 21:30:00 1988 (en_US);\n\n\n%x\nLocale’s appropriate date representation.\n08&#x2F;16&#x2F;88 (None);\n\n\n%X\nLocale’s appropriate time representation.\n21:30:00 (en_US);\n\n\n%%\nA literal ‘%’ character.\n%\n\n\n# === 1. 获取当前时间，返回指定的字符串 ===import time now = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;)print(now)from datetime import datetimenow = datetime.now().strftime(&#x27;%Y-%m-%d %a %H:%M:%S&#x27;)print(now)# === 2. 将时间字符串， 转化为时间对象 ===from datetime import datetimedt = datetime.strptime(&#x27;2023-01-01 12:00:00&#x27;, &#x27;%Y-%m-%d %H:%M:%S&#x27;)import pandas as pdpd_dt = pd.to_datetime(&#x27;2023-01-01 12:00&#x27;, format=&#x27;%Y-%m-%d %H:%M&#x27;)print(dt)print(pd_dt)\n","categories":["sci"],"tags":["pandas"]},{"title":"pandas时间序列及绘图","url":"/2018/07/06/sci-pandas/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86-pandas%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E5%8F%8A%E7%BB%98%E5%9B%BE/","content":"1. 由字符串格式生成时间数据import pandas as pdimport numpy as np# string datetime --&gt; pandas datetimedt_start = &#x27;2018-07-04 12:00&#x27;pd_dt_start = pd.datetime.strptime(dt_start, &#x27;%Y-%m-%d %H:%M&#x27;)print(dt_start)         # 2018-07-04 12:00print(pd_dt_start)      # 2018-07-04 12:00:00\n\n\n\n2. 生成时间序列# pandas datetime rangedt_list = pd.date_range(&#x27;2018-07-04 09:00&#x27;, &#x27;2018-07-05 09:00&#x27;, freq=&#x27;H&#x27;)print(dt_list)# 构建 DataFramedf = pd.DataFrame(dt_list, columns=[&#x27;Time&#x27;])                # 将时间序列作为 &#x27;Time&#x27; 列df[&#x27;Temp&#x27;] = np.random.normal(30, 5, size=len(dt_list))     # 添加一列温度数据，&#x27;Temp&#x27;print(df)df.to_csv(&#x27;data.csv&#x27;)    # 保存为csv文件\n\n3. 读取文件中的时间# csv file datetime --&gt; pandas datetimedf = pd.read_csv(&#x27;data.csv&#x27;)     # 读取csv文件print(df[&#x27;Time&#x27;].head())         # dtype应该是datetime64[ns]； 如dtype是object，需转换一下df[&#x27;Time&#x27;] = pd.to_datetime(df[&#x27;Time&#x27;])     # 调用pd.to_datetime 转换print(df[&#x27;Time&#x27;].head())\n\n4. 数据筛选df = df[[&#x27;Time&#x27;, &#x27;Temp&#x27;]].dropna()      # 去除异常数据df = df[df[&#x27;Time&#x27;] &gt;= pd_dt_start]      # 时间筛选df = df[df[&#x27;Temp&#x27;] &lt;= 35.0]             # 温度筛选print(df[&#x27;Time&#x27;].head())\n\n5. 绘图import matplotlib.pyplot as pltimport matplotlib.ticker as tickerimport matplotlib.dates as datesplt.figure(figsize=(12, 8))plt.plot(df[&#x27;Time&#x27;], df[&#x27;Temp&#x27;])plt.xlabel(&#x27;Time&#x27;)plt.ylabel(&#x27;Temp (C)&#x27;)# 自定义刻度ax = plt.gca()ax.xaxis.set_major_locator(dates.DayLocator(interval=1))     # 主刻度为 每天ax.xaxis.set_major_formatter(dates.DateFormatter(&#x27;00\\n%Y-%m-%d&#x27;))ax.xaxis.set_minor_locator(dates.HourLocator(interval=1))   # 副刻度为 每小时ax.xaxis.set_minor_formatter(dates.DateFormatter(&#x27;%H&#x27;))ax.yaxis.set_major_locator(ticker.MultipleLocator(10))plt.show()\n\n\n\n\n\n时间字符串格式\nref: https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes\n\n\n\n\nDirective\nMeaning\nExample\n\n\n\n%a\nWeekday\nSun, Mon, …, Sat (en_US)\n\n\n%A\nWeekday  full name.\nSunday, Monday, …, Saturday (en_US)\n\n\n%w\nWeekday as a decimal number, where 0 is Sunday .\n0, 1, …, 6\n\n\n%d\nDay of the month as a zero-padded decimal number.\n01, 02, …, 31\n\n\n%b\nMonth as locale’s abbreviated name.\nJan, Feb, …, Dec (en_US);\n\n\n%B\nMonth as locale’s full name.\nJanuary, February, …, December (en_US);\n\n\n%m\nMonth as a zero-padded decimal number.\n01, 02, …, 12\n\n\n%y\nYear without century as a zero-padded decimal number.\n00, 01, …, 99\n\n\n%Y\nYear with century as a decimal number.\n0001, 0002, …, 2013, 2014, …, 9998, 9999\n\n\n%H\nHour (24-hour clock) as a zero-padded decimal number.\n00, 01, …, 23\n\n\n%I\nHour (12-hour clock) as a zero-padded decimal number.\n01, 02, …, 12\n\n\n%p\nLocale’s equivalent of either AM or PM.\nAM, PM (en_US);\n\n\n%M\nMinute as a zero-padded decimal number.\n00, 01, …, 59\n\n\n%S\nSecond as a zero-padded decimal number.\n00, 01, …, 59\n\n\n%f\nMicrosecond as a decimal number, zero-padded to 6 digits.\n000000, 000001, …, 999999\n\n\n%z\nUTC offset in the form ±HHMM[SS[.ffffff]]\n(empty), +0000, -0400, +1030, +063415, -030712.345216\n\n\n%Z\nTime zone name (empty string if the object is naive).\n(empty), UTC, GMT\n\n\n%j\nDay of the year as a zero-padded decimal number.\n001, 002, …, 366\n\n\n%U\nWeek number of the year (Sunday as the first day)\n00, 01, …, 53\n\n\n%W\nWeek number of the year (Monday as the first day)\n00, 01, …, 53\n\n\n%c\nLocale’s appropriate date and time representation.\nTue Aug 16 21:30:00 1988 (en_US);\n\n\n%x\nLocale’s appropriate date representation.\n08&#x2F;16&#x2F;88 (None);\n\n\n%X\nLocale’s appropriate time representation.\n21:30:00 (en_US);\n\n\n%%\nA literal ‘%’ character.\n%\n\n\n# === 1. 获取当前时间，返回指定的字符串 ===import time now = time.strftime(&#x27;%Y-%m-%d %H:%M:%S&#x27;)print(now)from datetime import datetimenow = datetime.now().strftime(&#x27;%Y-%m-%d %a %H:%M:%S&#x27;)print(now)# === 2. 将时间字符串， 转化为时间对象 ===from datetime import datetimedt = datetime.strptime(&#x27;2023-01-01 12:00:00&#x27;, &#x27;%Y-%m-%d %H:%M:%S&#x27;)import pandas as pdpd_dt = pd.to_datetime(&#x27;2023-01-01 12:00&#x27;, format=&#x27;%Y-%m-%d %H:%M&#x27;)print(dt)print(pd_dt)\n","categories":["sci"],"tags":["pandas"]},{"title":"pycharm配置pyqt5-tools","url":"/2018/06/13/python/pycharm%E9%85%8D%E7%BD%AEpyqt5-tools/","content":"pip 安装 pyqt5-toolspip install pyqt5-tools -i https://pypi.mirrors.ustc.edu.cn/simple/\n\n启动 pycharm， 打开 Settings -&gt; Tools -&gt; External Tools\n点击+，添加工具\n\n添加 pyqtdesigner\n\n\n- Name:  pyqtdesigner- Program:  C:\\......\\designer.exe- Working dir:  $ProjectFileDir$\n\n\n添加 pyuic5\n\n- Name:  pyuic5- Program:  C:\\......\\pyuic5.exe- Arguments:  $FileName$ -o $FileNameWithoutExtension$.py- Working dir:  $FileDir$\n","categories":["python"],"tags":["python","pycharm","pyqt5"]},{"title":"python调用ffmpeg处理视频-提取图片","url":"/2018/04/13/python/python-%E8%B0%83%E7%94%A8ffmpeg%E5%A4%84%E7%90%86%E8%A7%86%E9%A2%91-%E6%8F%90%E5%8F%96%E5%9B%BE%E7%89%87/","content":"ffmpeg 使用说明查看使用说明：ffmpeg -h。\n# usage: ffmpeg [options] [[infile options] -i infile]... &#123;[outfile options] outfile&#125;...# options:-ss:   set the start time offset-f:    force format-t:    record or transcode &quot;duration&quot; seconds of audio/video-r     set frame rate (Hz value, fraction or abbreviation)-y:    overwrite output files\n\n\n\n遍历文件夹中的所有视频文件, 提取特定时间点的图片import os# 提取特定时间点（第12s）的图片# ffmpeg -ss 0:0:12 -i xxx.mp4 -t 0.01 -f image2 yyy.jpg -ystr = &#x27;c:/users/xxxx/ffmpeg/ffmpeg.exe &#x27; +       &#x27;-ss 0:0:12 -i &#123;&#125; -t 0.01 -f image2 d:&#123;&#125;.jpg -y&#x27;for parent, dirnames, filenames in os.walk(&#x27;d:/videos/&#x27;):    for filename in filenames:        video_dir = os.path.join(parent, filename)        str_cmd = str.format(video_dir, filename)        print(str_cmd)        os.popen(str_cmd)\n\n定时提取视频中的图片import os# 第12s之后每隔1s钟，定时提取视频中的图片# ffmpeg -ss 0:0:12 -i xxx.mp4 -r 1 -f image2 yyy_%03d.jpg -ystr = &#x27;c:/users/xxxx/ffmpeg/ffmpeg.exe &#x27; +       &#x27;-ss 0:0:12 -i xxx.mp4 -r 1 -f image2 d:&#123;&#125;_%03d.jpg -y&#x27;str_cmd = strprint(str_cmd)os.popen(str_cmd)\n\n\n定时提取视频中的图片，并截取需要的区域import osimport timeimport cv2import matplotlib.pyplot as pltss = &#x27;c:/users/xxxx/ffmpeg/ffmpeg.exe &#x27; +       &#x27;-ss &#123;&#125; -i xxx.mp4 -t 0.01 -f image2 d:&#123;&#125;.jpg -y&#x27;for sec in range(60):    cmd = ss.format(str(sec), str(sec))    print(cmd)    os.popen(cmd)    time.sleep(0.5)for i in range(60):    img = cv2.imread(&#x27;d:&#123;&#125;.jpg&#x27;.format(str(i)), 0)    cut = img[803:835, 533:595]    # 二值化    # _, cut1 = cv2.threshold(cut, 50, 220, cv2.THRESH_BINARY)    cv2.imwrite(&#x27;d:/cuts/&#123;&#125;.jpg&#x27;.format(str(i)), cut)    plt.subplot(6, 10, i+1)    plt.imshow(cut)    # plt.title(i)    plt.xticks([]), plt.yticks([])# plt.savefig(&#x27;yyy.png&#x27;, dpi=300)plt.show()\n","categories":["python"],"tags":["python","ffmpeg"]},{"title":"excel常用函数：查找、线性插值","url":"/2017/12/14/office/excel-%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/","content":"\nref: excel_formulas_and_functions, https://support.office.com/en-us/article/overview-of-formulas-in-excel-ecfdc708-9162-49e8-b993-c311f47ca173?wt.mc_id=fsn_excel_formulas_and_functions\n\n0 示例表格\n\n\n\nA\nB\nC\n\n\n\n1\nNO\nkey\nvalue\n\n\n2\n1\n0\n0\n\n\n3\n2\n5\n25\n\n\n4\n3\n10\n100\n\n\n5\n4\n15\n225\n\n\n6\n5\n20\n400\n\n\n7\n6\n25\n625\n\n\n8\n7\n30\n900\n\n\n9\n8\n35\n1225\n\n\n10\n9\n40\n1600\n\n\n11\n10\n45\n2025\n\n\n1 已知key，查找对应value\nVLOOKUP(lookup value, lookup array, column, range lookup)\n\n\n\n\n\nF\nG\nH\n\n\n\n4\nkey\nFormula\nvalue\n\n\n5\n20\n&#x3D;VLOOKUP(F5,B2:C11,2)\n400\n\n\n6\n25\n&#x3D;VLOOKUP(F6,B2:C11,2,FALSE)\n625\n\n\n7\n24\n&#x3D;VLOOKUP(F7,B2:C11,2)\n400\n\n\n8\n24\n&#x3D;VLOOKUP(F8,B2:C11,2,FALSE)\n#N&#x2F;A\n\n\n\n\n2 已知value，查找对应序号\nMATCH(lookup_value, lookup_array, [match_type])\nmatch_type：0 精确；1小于；-1大于\n\n\n\n\n\n\n\nF\nG\nH\n\n\n\n4\nvalue\nFormula\nNO\n\n\n5\n400\n&#x3D;MATCH(F5,C2:C11)\n5\n\n\n6\n500\n&#x3D;MATCH(E6,C2:C11,0)\n#N&#x2F;A\n\n\n7\n500\n&#x3D;MATCH(F7,C2:C11,1)\n5\n\n\n3 已知在数组中的序号，查找value\nINDEX(array, row number )\n\n\n\n\n\nF\nG\nH\n\n\n\n4\nNO\nFormula\nvalue\n\n\n5\n5\n&#x3D;INDEX(C2:C11,F5)\n400\n\n\n6\n6\n&#x3D;INDEX(C2:C11,F6)\n625\n\n\n4 已知 value1，查找偏移n_rows行，n_cols列后对应的 value2\nOFFSET(reference, rows, cols, [height], [width])\t\t\t\nvalue1 设为数组的表头A1, 即参数 reference\n\n\n\n\n\nF\nG\nH\nI\n\n\n\n4\nn_rows\nn_clns\nFormula\nvalue2\n\n\n5\n5\n1\n&#x3D;OFFSET(A1,F5,G5)\n20\n\n\n6\n5\n2\n&#x3D;OFFSET(A1,F6,G6)\n400\n\n\n5 线性趋势\nTREND(known_y’s, [known_x’s], [new_x’s], [const])\n\n\n\n\n\nF\nG\nH\n\n\n\n4\nNO\nFormula\nkey\n\n\n5\n4\n&#x3D;TREND(B2:B11,A2:A11,K5)\n15\n\n\n6\n4.5\n&#x3D;TREND(B2:B11,A2:A11,K6)\n17.5\n\n\n6 线性插值\n线性插值需要用到3个组合函数\t\t\nMATCH(key,x_s)\t\t\t\nOFFSET(y_title,MATCH(key,x_s),,2)\t\t\t\nOFFSET(x_title,MATCH(key,x_s),,2)\t\t\t\nTREND(OFFSET(y_title,MATCH(key,x_s),,2),OFFSET(x_title,MATCH(key,x_s),,2),key)\n\n\n\n\n\nF\nG\nH\n\n\n\n4\nNO\nFormula\nvalue\n\n\n5\n20\n&#x3D;TREND(OFFSET(C1,MATCH(K5,B2:B11),,2),\n400\n\n\n\n\nOFFSET(B1,MATCH(K5,B2:B11),,2),K5)\n\n\n\n6\n24\n&#x3D;TREND(OFFSET(C1,MATCH(K6,B2:B11),,2),\n580\n\n\n\n\nOFFSET(B1,MATCH(K6,B2:B11),,2),K6)\n\n\n\n7\n25\n&#x3D;TREND(OFFSET(C1,MATCH(K7,B2:B11),,2),\n625\n\n\n\n\nOFFSET(B1,MATCH(K7,B2:B11),,2),K7)\n\n\n\n","categories":["office"],"tags":["excel"]},{"title":"excel调用有道翻译api","url":"/2017/11/12/office/excel-%E8%B0%83%E7%94%A8%E6%9C%89%E9%81%93%E7%BF%BB%E8%AF%91/","content":"有道翻译 API 简介\nhttp://fanyi.youdao.com/translate?&amp;i=&quot;text&quot;&amp;doctype=xml\n\n参数说明：\n\ni=&quot;text&quot;，引号内为要翻译的单词或句子，中文、英文都行，默认是中英互译；\ndoctype=xml，指定返回值的格式为 xml 格式，还可以是 text， json等\n\n其他可选：\n\ntype，默认是type=auto；可以指定语言,比如中文-&gt;日语：type=zh_cn2ja\nversion，指定 api 版本等\n\n在 excel 里调用有道翻译 api\n首先用 WEBSERVICE 函数获得调用 api，返回值格式指定为 xml；\n\n然后用 FILTERXML 函数解析 xml，翻译的结果在 &lt;translation&gt; 标签里面\n\n完整代码如下：\n\n\n=FILTERXML(WEBSERVICE(&quot;http://fanyi.youdao.com/translate?&amp;i=&quot;&amp;A1&amp;&quot;&amp;doctype=xml&quot;),&quot;//translation&quot;)\n\n\n这个 api 有调用次数的限制，且用且珍惜。\n","categories":["office"],"tags":["excel"]},{"title":"python 调用 CoolProp 计算介质的物性","url":"/2017/10/24/python/Python-%E4%BD%BF%E7%94%A8CoolProp%E8%AE%A1%E7%AE%97%E4%BB%8B%E8%B4%A8%E7%9A%84%E7%89%A9%E6%80%A7/","content":"之前常用的物性计算软件是 Nist Refprop，在 Excel 中计算时调用起来非常好使。但是计算方程组求解时 Excel 就不太好用了。。\n发现了一个开源软件：CoolProp，它支持多种程序或语言的调用，接口比较好；对 python 的支持也非常方便。\n1. 安装 CoolProp\n直接使用 pip 安装：\n\npip install CoolProp\n\n\n或者安装开发版（稳定版偶尔有编译问题，导致安装失败）：\n\n# install the latest nightly release versionpip install -vvv --pre --trusted-host www.coolprop.dreamhosters.com --find-links http://www.coolprop.dreamhosters.com/binaries/Python/ -U --force-reinstall CoolProp\n\n\n2. 基本使用2.1 参数说明\nref: http://www.coolprop.org/coolprop/HighLevelAPI.html\n\n\n\n\n\n\n\n\n\n\n\nD, DMASS\nkg&#x2F;m^3\nMass density\n密度\n\n\nH, HMASS\nJ&#x2F;kg\nEnthalpy\n焓\n\n\nP\nPa\nPressure\n压力\n\n\nQ\nmol&#x2F;mol\nMass vapor quality\n气体占比\n\n\nT\nK\nTemp\n温度\n\n\nA, SPEED_OF_SOUND\nm&#x2F;s\nSpeed of sound\n声速\n\n\nCONDUCTIVITY, L\nW&#x2F;m&#x2F;K\nThermal conductivity\n热导率\n\n\nCVMASS, O\nJ&#x2F;kg&#x2F;K\nMass specific constant volume specific heat\n定容比热容\n\n\nC, CPMASS\nJ&#x2F;kg&#x2F;K\nMass specific constant pressure specific heat\n定压比热容\n\n\nI, SURFACE_TENSION\nN&#x2F;m\nSurface tension\n表面张力\n\n\nM, MOLARMASS\nkg&#x2F;mol\nMolar mass\n摩尔质量\n\n\nPCRIT\nPa\nPressure at the critical point\n临界压力\n\n\nTCRIT\nK\nTemperature at the critical point\n临界温度\n\n\nV, VISCOSITY\nPa·s\nViscosity\n粘度\n\n\nZ\n\nCompressibility factor\n压缩系数\n\n\n\n示例1：\n\nfrom CoolProp.HumidAirProp import HAPropsSIfrom CoolProp.CoolProp import PropsSIp = 101325t = PropsSI(&#x27;T&#x27;, &#x27;P&#x27;, p, &#x27;Q&#x27;, 0, &#x27;Water&#x27;)print(&#x27;\\n-------------CoolProp-------------&#x27;)print(&#x27;- 在 &#123;&#125; Pa(abs) 时，水的饱和温度: &#123;:.2f&#125; K \\n&#x27;.format(p, t))    # 373.12 K\n\n\n示例2：\n\nfrom CoolProp.HumidAirProp import HAPropsSIfrom CoolProp.CoolProp import PropsSIparas = &#123;&#x27;D&#x27;: &#x27;kg/m^3&#x27;,          &#x27;H&#x27;: &#x27;J/kg&#x27;,          &#x27;A&#x27;: &#x27;J/kg/K&#x27;,         &#x27;L&#x27;: &#x27;W/m/K&#x27;,         &#x27;O&#x27;: &#x27;J/kg/K&#x27;,         &#x27;C&#x27;: &#x27;J/kg/K&#x27;,         &#x27;M&#x27;: &#x27;kg/mol&#x27;,         &#x27;V&#x27;: &#x27;Pa.S&#x27;,         &#x27;Z&#x27;: &#x27;-&#x27;&#125;for (k, v) in paras.items():        v1 = CP.PropsSI(k, &#x27;T&#x27;, 273.15+20, &#x27;P&#x27;, 101325, &#x27;water&#x27;)    print(f&#x27;  &#123;k&#125;: &#123;v1:10.4f&#125; &#123;v&#125;&#x27;)\n\n\n\n2.2 直接定义一个类，方便调用from CoolProp.CoolProp import PropsSIclass WaterProp(object):    # 求特定压力下的物性    def __init__(self, p=101325):        self.T = PropsSI(&#x27;T&#x27;, &#x27;P&#x27;, p, &#x27;Q&#x27;, 0, &#x27;Water&#x27;)          # 饱和温度        self.C = PropsSI(&#x27;C&#x27;, &#x27;P&#x27;, p, &#x27;Q&#x27;, 0, &#x27;Water&#x27;)          # 比热容        self.D_l = PropsSI(&#x27;D&#x27;, &#x27;P&#x27;, p, &#x27;Q&#x27;, 0, &#x27;Water&#x27;)        # 液体密度        self.D_v = PropsSI(&#x27;D&#x27;, &#x27;P&#x27;, p, &#x27;Q&#x27;, 1, &#x27;Water&#x27;)        # 蒸汽密度        self.H_l = PropsSI(&#x27;H&#x27;, &#x27;P&#x27;, p, &#x27;Q&#x27;, 0, &#x27;Water&#x27;)        self.H_v = PropsSI(&#x27;H&#x27;, &#x27;P&#x27;, p, &#x27;Q&#x27;, 1, &#x27;Water&#x27;)        self.H = self.H_v - self.H_l                            # 汽化潜热        self.L_l = PropsSI(&#x27;L&#x27;, &#x27;P&#x27;, p, &#x27;Q&#x27;, 0, &#x27;Water&#x27;)        # 导热系数        self.I_l = PropsSI(&#x27;I&#x27;, &#x27;P&#x27;, p, &#x27;Q&#x27;, 0, &#x27;Water&#x27;)        # 表面张力        self.U_l = PropsSI(&#x27;V&#x27;, &#x27;P&#x27;, p, &#x27;Q&#x27;, 0, &#x27;Water&#x27;)        # 动力粘度        self.V_l = self.U_l / self.D_l                          # 运动粘度        self.Prl = PropsSI(&#x27;Prandtl&#x27;, &#x27;P&#x27;, p, &#x27;Q&#x27;, 0, &#x27;Water&#x27;)  # 普朗特数        self.print_prop()    def print_prop(self):        print(&#x27;\\n-------------CoolProp-------------&#x27;)        print(&#x27;- &#123;&#125;: &#123;:&gt;10s&#125;      &#123;:&lt;10&#125;&#x27;.format(&#x27;介质名称&#x27;, &#x27;Water&#x27;,    &#x27;单位&#x27;))        print(&#x27;- &#123;&#125;: &#123;:&gt;10.2f&#125;    &#123;:&lt;10&#125;&#x27;.format(&#x27;计算压力&#x27;, p,          &#x27;Pa&#x27;))        print(&#x27;- &#123;&#125;: &#123;:&gt;10.2f&#125;    &#123;:&lt;10&#125;&#x27;.format(&#x27;饱和温度&#x27;, self.T,     &#x27;K&#x27;))        print(&#x27;- &#123;&#125;: &#123;:&gt;10.2f&#125;    &#123;:&lt;10&#125;&#x27;.format(&#x27;液体密度&#x27;, self.D_l,   &#x27;kg/m3&#x27;))        print(&#x27;- &#123;&#125;: &#123;:&gt;10.4f&#125;    &#123;:&lt;10&#125;&#x27;.format(&#x27;蒸汽密度&#x27;, self.D_v,   &#x27;kg/m3&#x27;))        print(&#x27;- &#123;&#125;: &#123;:&gt;10.2f&#125;    &#123;:&lt;10&#125;&#x27;.format(&#x27;汽化潜热&#x27;, self.H,     &#x27;J/kg&#x27;))        print(&#x27;- &#123;&#125;: &#123;:&gt;10.4f&#125;    &#123;:&lt;10&#125;&#x27;.format(&#x27;导热系数&#x27;, self.L_l,   &#x27;W/m.K&#x27;))        print(&#x27;- &#123;&#125;: &#123;:&gt;10.4e&#125;    &#123;:&lt;10&#125;&#x27;.format(&#x27;运动粘度&#x27;, self.V_l,   &#x27;m2/s&#x27;))        print(&#x27;- &#123;&#125;: &#123;:&gt;10.4f&#125;    &#123;:&lt;10&#125;&#x27;.format(&#x27;普朗特数&#x27;, self.Prl,   &#x27;-&#x27;))WaterProp(p=101325)&#x27;&#x27;&#x27;- 介质名称:      Water      单位- 计算压力:  101325.00    Pa- 饱和温度:     373.12    K- 液体密度:     958.37    kg/m3- 蒸汽密度:     0.5977    kg/m3- 汽化潜热: 2256471.59    J/kg- 导热系数:     0.6772    W/m.K- 运动粘度: 2.9389e-07    m2/s- 普朗特数:     1.7533    &#x27;&#x27;&#x27;\n\n\n3. 湿空气计算CoolProp 可以直接计算 湿空气的物性。\n\n参数说明：\n\n\n\n\n\n\n\n\n\n\n\nP\nPa\nPressure\n压力\n\n\nT\nK\nDry-Bulb Temp\n干球温度\n\n\nTwb\nK\nWet-Bulb Temp\n湿球温度\n\n\nTdp\nK\nDew-Point Temp\n露点温度\n\n\nR\n\nRelative humidity\n相对湿度\n\n\nW\nkg&#x2F;kga\nHumidity Ratio\n含湿量\n\n\nH\nJ&#x2F;kga\nMixture Enthalpy\n比焓\n\n\n\n示例：\n\nfrom CoolProp.HumidAirProp import HAPropsSIw = HAPropsSI(&#x27;W&#x27;, &#x27;T&#x27;, 273.15+25, &#x27;P&#x27;, 101325, &#x27;R&#x27;, 0.5)t_dp = HAPropsSI(&#x27;Tdp&#x27;, &#x27;T&#x27;, 273.15+25, &#x27;P&#x27;, 101325, &#x27;R&#x27;, 0.5)h = HAPropsSI(&#x27;H&#x27;, &#x27;T&#x27;, 273.15+25, &#x27;P&#x27;, 101325, &#x27;R&#x27;, 0.5)print(&#x27;\\n-------------CoolProp-------------&#x27;)print(&#x27;在 25℃ , 101325Pa 时，相对湿度为 50% 的湿空气, &#x27;)print(&#x27;- 含湿量为 &#123;:&gt;8.2%&#125;  kg/kga&#x27;.format(w))               # 0.99%print(&#x27;- 露点为   &#123;:&gt;8.2f&#125;  ℃&#x27;.format(t_dp-273.15))         # 13.87print(&#x27;- 比焓为   &#123;:&gt;8.2f&#125;  kJ/kg&#x27;.format(h/1000))          # 50.42\n\n\n\n更多用法见官网 : http://www.coolprop.org/coolprop/wrappers/Python/index.html#python\n\n","categories":["python"],"tags":["python","coolprop"]},{"title":"excel调用 Nist RefProp 计算介质的物性","url":"/2017/09/09/office/excel-%E8%B0%83%E7%94%A8Nist-RefProp%E8%AE%A1%E7%AE%97%E4%BB%8B%E8%B4%A8%E7%9A%84%E7%89%A9%E6%80%A7/","content":"Nist Refprop 是一个常用到的物性计算软件，在 Excel 中调用起来也比较方便。\n1. 安装 Nist Refprop V9.1\n官网\nNIST2391.EXE\n\n安装完之后：\n\n32位系统默认安装路径是 C:\\Program Files\\REFPROP\n64位系统默认安装路径是 C:\\Program Files (x86)\\REFPROP\n\n\n\n2. Excel 配置\n64位系统：先将 C:\\Program Files (x86) 目录下的 REFPROP 文件夹全部复制到 C:\\Program Files 内。。。\n\n\n新建一个excel表格\n\n打开 文件 - 选项 - 加载项\n\n选择下方的 管理 - excel加载项\n\n点击 转到 - 浏览\n\n选择路径 C:\\Program Files\\REFPROP\\REFPROP.XLA，确定\n\n在单元格里输入 =RefpropXLSVersionNumber() \n\n应该返回 9.1 ，表明配置正确。\n\n\n3. 使用3.1 常用函数\n\n\n函数名\n名称\n单位\n\n\n\nTemperature\n温度\nK\n\n\nPressure\n压力\nMPa\n\n\nDensity\n密度\nkg&#x2F;m^3\n\n\nCompressibilityFactor\n压缩比\n\n\n\nLiquidDensity\n液体密度\nkg&#x2F;m^3\n\n\nVaporDensity\n蒸汽密度\nkg&#x2F;m^3\n\n\nVolume\n体积\nm^3&#x2F;kg\n\n\nEnergy\n能量\nkJ&#x2F;kg\n\n\nEnthalpy\n焓\nkJ&#x2F;kg\n\n\nEntropy\n熵\nkJ&#x2F;kg-K\n\n\nIsochoricHeatCapacity\n等容热容量 (Cv)\nkJ&#x2F;kg-K\n\n\nIsobaricHeatCapacity\n等压热容量 (Cp)\nkJ&#x2F;kg-K\n\n\nSpeedOfSound\n声速\nm&#x2F;s\n\n\nHeatOfVaporization\n汽化潜热\nkJ&#x2F;kg\n\n\nVolumeExpansivity\n体积膨胀率\n1&#x2F;K\n\n\nViscosity\n粘性\nuPa-s\n\n\nKinematicViscosity\n粘性\ncm^2&#x2F;s\n\n\nThermalConductivity\n导热系数\nmW&#x2F;m-K\n\n\nPrandtl\n普朗特数\n\n\n\nSurfaceTension\n表面张力\nmN&#x2F;m\n\n\nDielectricConstant\n介电常数\n\n\n\nMolarMass\n摩尔质量\ng&#x2F;mol\n\n\nMoleFraction\n摩尔分数\nmol&#x2F;mol\n\n\nMassFraction\n质量分数\ng&#x2F;g\n\n\n3.2 使用说明result &#x3D; Float ( FluidName, InpCode, Units, Prop1, Prop2 )  \n\nFluidName: &quot;air&quot;, &quot;water&quot;, &quot;oxygen&quot;, &quot;nitrogen&quot;,      &quot;hydrogen&quot;, &quot;carbon dioxide”, &quot;methane&quot;, etc…\n\nInpCode: \n\n&quot;TP&quot;:     特定温度、压力下，Prop1 为温度，Prop2 为压力\n&quot;Tliq&quot;, &quot;Pvap&quot;:     饱和温度、压力下，Prop1 为温度&#x2F;压力，Prop2 为空\n\n\nUnits: &quot;SI&quot; \n\nProp1: value1\n\nProp2: value2\n\n\n\n示例1\n\n标态下空气密度（0℃, 0.101325MPa）\n公式 = Density(&quot;air&quot;,&quot;TP&quot;,&quot;SI&quot;,273.15,0.101325)\n返回值：1.293 (kg&#x2F;m^3)\n\n示例2\n\n标准大气压下水蒸汽饱和温度（0.101325MPa）\n\n公式 = Temperature(&quot;water&quot;,&quot;Pliq&quot;,&quot;SI&quot;,0.101325)-273.15\n\n返回值：99.97 (℃)\n\n也可以直接使用摄氏度单位制：\n\n公式 = Temperature(&quot;water&quot;,&quot;Pliq&quot;,&quot;SI with C&quot;,0.101325)\n\n返回值：99.97 (℃)\n\n\n示例3\n\n计算水蒸气的汽化潜热（0.101325MPa）\n\n公式 = HeatOfVaporization(&quot;water&quot;,&quot;Pvap&quot;,&quot;SI&quot;,0.101325)\n\n返回值：2256.4 (kJ&#x2F;kg)\n\n也可以使用焓计算：= Enthalpy(&quot;water&quot;,&quot;Pvap&quot;,&quot;SI&quot;,0.101325) - Enthalpy(&quot;water&quot;,&quot;Pliq&quot;,&quot;SI&quot;,0.101325)\n\n返回值：2256.4 (kJ&#x2F;kg)\n\n\n\n更多用法见官方帮助文档 : https://www.nist.gov/sites/default/files/documents/srd/REFPROP9.PDF\n\n","categories":["office"],"tags":["excel","RefProp"]},{"title":"git 常用命令","url":"/2017/09/04/apps/git-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"1. 新建远程仓库\n在 github.com 上新建 repository ：xxxx , 链接为：https://github.com/shenbo/xxxx.git\n本地新建文件夹：xxxx\n\ncd ~/xxxxgit initgit add .git commit -m &quot;first commit&quot;git remote add origin https://github.com/shenbo/xxxx.gitgit push -u origin master\n\n\n2. 远程仓库操作\n检出仓库：git clone https://github.com/shenbo/xxxx.git\n拉取仓库：git pull [remoteName] [localBranchName]\n推送仓库：git push [remoteName] [localBranchName]\n显示日志：git log -1 --stat  # 显示最近一次commit的更改统计概述\n\n3. 放弃本地修改，强制更新git fetch --allgit reset --hard origin/master# 删除 untracked 文件或文件夹，不含.gitignoregit clean -df\n\n3. 暂存本地修改# 暂存git stash# 恢复暂存git stash listgit stash apply 0# 删除暂存git stash clear\n\n4. 配置SSH4.1 生成 ssh key\n打开git bash，设置用户名，并生成ssh-key。\n\ngit config --global user.name &quot;shenbo&quot;git config --global user.email &quot;shenbo@hotmail.com&quot;ssh-keygen -t rsa -b 4096 -C &quot;shenbo@hotmail.com&quot;eval $(ssh-agent -s)     # start the ssh-agent in the backgroundssh-add ~/.ssh/id_rsa    # add SSH private key to the ssh-agentls ~/.ssh                # lists the files in your .ssh directory\n\n\n现在github推荐使用新的 Ed25519 加密算法https://docs.github.com/en/free-pro-team@latest/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent\n\ngit config --global user.name &quot;shenbo&quot;git config --global user.email &quot;shenbo@hotmail.com&quot;ssh-keygen -t ed25519 -C &quot;shenbo@hotmail.com&quot;eval $(ssh-agent -s)         # start the ssh-agent in the backgroundssh-add ~/.ssh/id_ed25519    # add SSH private key to the ssh-agent\n\n4.2 将 ssh 公钥添加到远程服务器如果是连接远程服务器，可使用 ssh-copy-id 命令。\nssh-copy-id -i ~.ssh/id_ed25519.pub user@xxx.xxx.xxx.xxx# 注意如果是使用 win10 的 powershell 终端，会报错&quot; 无法将ssh-copy-id识别为....&quot;，# 这是因为 win10 自带的 openssh 命令集不完整，# 只需要打开git bash终端，运行以上命令就可以了\n\n4.3 将 ssh 公钥添加 github.com\n复制~/.ssh/id_ed25519.pub\n\n在 github.com 个人设置页面，点击新建或添加 SSH key，将id_ed25519.pub内容复制进去。\n\n测试 git 客户端与 github 是否连接成功。\n\n\nssh -T git@github.com\n\n\n如果连接报错ssh: connect to host github.com port 22: Connection &gt; refused， 打开&#x2F;新建~/.ssh/config，修改内容如下，重新测试。\n\nHost github.comUser shenbo@hotmail.comHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_ed25519Port 443\n\n\n5. 永久删除文件(包括历史记录)\nref： https://help.github.com/articles/remove-sensitive-data\n\n\n5.1 删除文件命令：\n\ngit filter-branch --force --index-filter &#x27;git rm --cached --ignore-unmatch PATH-TO-YOUR-FILE-WITH-SENSITIVE-DATA&#x27; --prune-empty --tag-name-filter cat -- --all\n\n\n5.2 删除文件夹命令：\n\ngit filter-branch --force --index-filter \\&#x27;git rm --cached -r --ignore-unmatch PATH-TO-YOUR-FLODER-WITH-SENSITIVE-DATA&#x27; \\--prune-empty --tag-name-filter cat -- --all\n\n\n5.3 把文件或文件夹添加到.gitignore文件里：\n\necho &quot;YOUR-FILE-WITH-SENSITIVE-DATA&quot; &gt;&gt; .gitignoregit add .gitignoregit commit -m &quot;Add YOUR-FILE-WITH-SENSITIVE-DATA to .gitignore&quot;\n\n\n5.4 然后以强制覆盖的方式推送repo, 命令如下:\n\ngit push origin master --force git push origin master --force --tags\n\n\n5.5 清理和回收空间：\n\ngit for-each-ref --format=&#x27;delete %(refname)&#x27; refs/original | git update-ref --stdingit reflog expire --expire=now --allgit gc --prune=now\n\n\n5.6 另外，可以通过 rev-list 命令来找到仓库记录中的大文件：\n\ngit rev-list --objects --all | grep &quot;$(git verify-pack -v .git/objects/pack/*.idx | sort -k 3 -n | tail -5 | awk &#x27;&#123;print$1&#125;&#x27;)&quot;\n","categories":["apps"],"tags":["git"]},{"title":"生日快乐","url":"/2017/06/26/yoyo/20170626-%E5%91%A8%E5%B2%81/","content":"\n可遇不可求的事\n此时此刻的你\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"python执行cmd命令-os.popen与subprocess","url":"/2017/06/04/python/python-%E6%89%A7%E8%A1%8Ccmd%E5%91%BD%E4%BB%A4/","content":"1. os.popen 命令python 内置的 os.popen 命令可以用于执行简单的命令。\nimport os# 直接运行的命令，如：打开记事本os.popen(&#x27;notepad&#x27;)# 获得运行的log或结果，如：列出文件清单r = os.popen(&#x27;tree&#x27;)print(r.read())\n\n2. subprocess 模块复杂一点的命令可以使用 subprocess 模块，也是 python 内置的，可以对输入&#x2F;输出进行操作；\n2.1 subprocess.call 命令import subprocess# 可显示运行log/结果subprocess.call(&#x27;pip list&#x27;, shell=True)# 可交互subprocess.call(&#x27;pip uninstall pip&#x27;, shell=True)# 返回值为错误代码retcode = subprocess.call(&#x27;tree&#x27;, shell=True)print(retcode)\n\n2.2 subprocess.Popen 命令import subprocess# 获得运行结果，一次读取所有，要等待命令运行结束p = subprocess.Popen(&#x27;ping baidu.com&#x27;, shell=True, stdout=subprocess.PIPE).stdoutprint(p.read().decode(&#x27;gbk&#x27;))# 获得运行结果，一次读取一行p = subprocess.Popen(&#x27;ping baidu.com&#x27;, shell=True, stdout=subprocess.PIPE)for line in iter(p.stdout.readline, b&#x27;&#x27;):    print(line.strip().decode(&#x27;gbk&#x27;))\n\n\nsubprocess.Popen 参数比较复杂，更多用法参见：帮助文档\n\n","categories":["python"],"tags":["python"]},{"title":"吃饭","url":"/2017/05/24/yoyo/20170524-%E5%90%83%E9%A5%AD/","content":"\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"蜜糖","url":"/2017/04/18/yoyo/20170418-%E8%9C%9C%E7%B3%96/","content":"\n草在结它的种子\n风在摇它的叶子\n你们坐着，不说话\n就十分美好\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"pip 常用命令","url":"/2017/04/02/python/python-pip%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"1. 设置默认国内源\nWindows系统：\n\n命令行修改配置\npip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simplepip config set global.index-url https://pypi.mirrors.ustc.edu.cn/simple/# pip config list\n\n或手动修改&#x2F;新建文件 C:\\Users\\XXXX\\pip\\pip.ini ，内容为：\n[global]index-url = https://pypi.mirrors.ustc.edu.cn/simple/\n\n\n国内源：\n\n阿里云 http://mirrors.aliyun.com/pypi/simple/\n中国科技大学 https://pypi.mirrors.ustc.edu.cn/simple/\n清华大学 https://pypi.tuna.tsinghua.edu.cn/simple/\n\n\n\n加利福尼亚大学python扩展库（非官方）：\n\nhttps://www.lfd.uci.edu/~gohlke/pythonlibs/\n\n\n2. 更新所有安装包from pip._internal.utils.misc import get_installed_distributionsimport subprocessdef pip_upgrade_all():    for dist in get_installed_distributions():        print(dist)        ustc_source = &#x27;https://pypi.mirrors.ustc.edu.cn/simple/&#x27;        cmd = &#x27;pip install --upgrade &#123;&#125; -i &#123;&#125;&#x27;.format(dist.project_name, ustc_source)        subprocess.call(cmd, shell=True)pip_upgrade_all()\n\n\n\n3. 常用命令# 安装/升级包，指定国内源pip install -U tensorflow -i https://pypi.mirrors.ustc.edu.cn/simple/# 安装指定版本的包pip install tensorboard=1.8.0# 列出所有可以更新的包pip list -o# 从本地的 whl 文件安装pip install numpy-1.13.1+mkl-cp36-cp36m-win_amd64.whl\n\n4. 虚拟环境# 创建虚拟环境python -m venv .venv# 激活虚拟环境.venv/Scripts/activate","categories":["python"],"tags":["python"]},{"title":"发烧","url":"/2017/02/18/yoyo/20170218-%E5%8F%91%E7%83%A7/","content":"\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"raspberry pi 安装配置","url":"/2017/02/03/raspi/raspberry-pi-%E9%85%8D%E7%BD%AE/","content":"硬件准备\n树莓派3B，5V 2A充电器 + 充电线\nTF卡(&gt;8g，class10) + 读卡器\n无线路由器\n笔记本&#x2F;电脑\n显示器 + HDMI线\n\n软件准备\nRaspbian系统， https://www.raspberrypi.org/downloads/raspberry-pi-os/， （下载文件类似“201x-xx-xx-raspbian-buster-lite” ）\n\nWin32diskimager, https://sourceforge.net/projects/win32diskimager/ （用于烧录系统）\n\nSDCardFormatter, https://www.sdcard.org/ （非必需，用于SD卡格式化）\n\nputty （用于SSH；非必需，win10已自带openssh）\n\nVNC-Viewer （远程桌面）\n\n\n\n\n安装配置1. 制作系统盘\nTF卡装系统：将Raspbian系统文件 *.zip 解压，提取出 *.img 镜像文件 ，用 Win32diskimager 将 *.img 文件烧录至TF卡。\n\nSSH 服务：由于Raspbian系统默认关闭SSH，需要在TF卡根目录新建名字为 ssh 的文件或文件夹，开机后可自动启动SSH服务。\n\nWiFi配置：在TF卡根目录下新建 wpa_supplicant.conf 文件，填入以下内容并保存文件。\n\n\ncountry=CNctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdevupdate_config=1network=&#123;ssid=&quot;xxxx&quot;psk=&quot;12345678&quot;key_mgmt=WPA-PSKpriority=1&#125;\n\n2. 开机\n将TF卡插入树莓派，通电后自动开机；\nLED指示灯说明：PWR为电源，红色常亮；ACT为硬盘灯，绿色闪烁。\n\n3. SSH远程连接\n开机后WiFi自动连接(或用网线将pi与路由器连接)，进入路由器管理页面，找到raspi的ip。\n打开Powershell命令行，连接ip进入， 用户名为：pi，密码为：raspberry。\n或者直接ssh：\n\nssh pi@xxx.xxx.xxx.xxx\n\n4. 基本配置\n运行命令 sudo raspi-config\nNetwork Options： WiFi设置；\nInterfacing Options： ssh服务打开，vnc服务打开；\nAdvanced Options： Expand Filesystem。\n\n5. 笔记本端VNC-Viewer软件打开，输入ip连接。6. 启用root账户# 设置 root 账号的密码sudo passwd root# 启用 root 账号登录sudo passwd --unlock root# 测试su root\n\n7. 更换软件更新源。7.1 清华源\n\nref: https://mirrors.tuna.tsinghua.edu.cn/help/raspbian/\n\n\n运行命令 sudo nano /etc/apt/sources.list ，改为以下内容：\n\n# deb http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contribdeb-src http://mirrors.tuna.tsinghua.edu.cn/raspbian/raspbian/ buster main non-free contrib\n\n运行命令 sudo nano /etc/apt/sources.list.d/raspi.list ，改为以下内容：\n\n# deb http://mirrors.tuna.tsinghua.edu.cn/raspberrypi/ buster main ui\n7.2 中科大源\n\nref: https://mirrors.ustc.edu.cn/help/raspbian.htmlref: https://mirrors.ustc.edu.cn/help/ubuntu-ports.html直接运行：\n\nsudo sed -i &#x27;s|raspbian.raspberrypi.org|mirrors.ustc.edu.cn/raspbian|g&#x27; /etc/apt/sources.listsudo sed -i &#x27;s|//archive.raspberrypi.org|//mirrors.ustc.edu.cn/archive.raspberrypi.org|g&#x27; /etc/apt/sources.list.d/raspi.list\n\n当然也可以直接编辑 文件（需要使用 sudo）。删除原文件所有内容，用以下内容取代（以 Buster 示例）：\n# filename: /etc/apt/sources.list deb http://mirrors.ustc.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi#deb-src http://mirrors.ustc.edu.cn/raspbian/raspbian/ buster main contrib non-free rpi# filename: /etc/apt/sources.list.d/raspi.listdeb http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ buster main ui#deb-src http://mirrors.ustc.edu.cn/archive.raspberrypi.org/debian/ buster main ui\n\n\nError:\nW: GPG 错误：http://mirrors.ustc.edu.cn/raspbian/raspbian buster InRelease: 由于没有公钥，无法验证下列签名： NO_PUBKEY &gt; [xxxxxxxxxxxxx]E: 仓库 “http://mirrors.ustc.edu.cn/raspbian/raspbian buster InRelease” 没有数字签名。N: 无法安全地用该源进行更新，所以默认禁用该源。N: 参见 apt-secure(8) 手册以了解仓库创建和用户配置方面的细节。 \n解决方法：sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys [xxxxxxxxxxxxxxx]\n\n7.3 更新、升级\n\n编辑此文件后， 使用 sudo apt-get update命令，更新软件列表。\n使用sudo apt-get upgrade命令，更新软件。\n\n8. 安装中文字体。sudo apt-get install ttf-wqy-zenhei \n\n9. 安装teamviewer, https://www.teamviewer.com/zhcn/download/linux/。wget https://download.teamviewer.com/download/linux/teamviewer-host_armhf.deb\n10. python\n安装pip3\n\nsudo apt install python3-venv python3-pip\n\n修改pip源, sudo nano ~/.pip/pip.conf ，改为以下内容：\n\n[global]index-url = https://pypi.mirrors.ustc.edu.cn/simple/\n\n或 用命令行修改配置\n\npip config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple# pip config list\n\n11. zsh &amp; ohmyzsh参考 zsh &amp; oh-my-zsh 安装配置 \n","categories":["raspi"],"tags":["raspberry-pi"]},{"title":"正月初一登紫金山","url":"/2017/01/28/yoyo/20170128-%E7%B4%AB%E9%87%91%E5%B1%B1/","content":"\n青青紫金 悠悠我欣\n\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"横山徒步","url":"/2016/12/04/yoyo/20161204-%E6%A8%AA%E6%BA%AA/","content":"出去兜风，一不小心上新闻了。\n\n\n千人徒步越野 尽赏横山秋色\n2016-12-03 微江宁\n今天，1500多名户外徒步爱好者齐聚秋色迷人的革命老区横山，参加由江宁广电网络公司冠名的2016首届南京横溪•横山徒步越野大会。景致优美的赛道路线，准专业越野赛事的体验，让市民充分领略到全民健身的魅力。\n最小登山者：四个月大的沈悠悠小朋友。\n阅读原文\n\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"百天","url":"/2016/10/13/yoyo/20161014-100%E5%A4%A9/","content":"嘟嘟~\n\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"Hello World","url":"/2016/07/06/yoyo/20160706-%E5%87%BA%E7%94%9F/","content":"hello，world！我出生啦。\n\n\n\n小名\n糖圆\n\n\n\n性别\n女\n\n\n出生时间\n2016-07-06 17:33\n\n\n出生地点\n南京军区总院\n\n\n出生孕周\n41周(+3)\n\n\n出生体重\n3.6kg\n\n\n出生身高\n49cm\n\n\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"Hexo 安装与配置","url":"/2016/06/02/hexo/hexo-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/","content":"0. 安装前提Windows系统下安装 Hexo，需要先安装下列应用程序。\n\nnode.js, http://nodejs.org/\ngit, http://git-scm.com/\n\n1. 安装、初始化 Hexonpm install -g cnpm --registry=https://registry.npmmirror.comnpm install -g hexo-cli# 创建博客主文件夹为： hexohexo init hexocd hexonpm install\n\n创建新 post，新建的 post 文件位于source/_posts文件夹内。\nhexo new &quot;My New Post&quot;\n\n\n\n2. 服务器首先安装hexo-server，运行服务器。\nnpm install hexo-server --savehexo server\n\n网站会在 http://localhost:4000 下启动。\n3. 更换主题在终端窗口下，定位到 Hexo 站点目录下。使用 Git checkout 主题代码。\ncd hexogit clone https://github.com/theme-next/hexo-theme-next themes/next\n\n打开站点配置文件blog/_config.yaml，找到 theme 字段，并将其值更改为 next。\ntheme: next\n\n运行服务器,验证主题是否正确启用。\nhexo cleanhexo server\n\n3.1 主题配置打开主题配置文件hexo/themes/next/_config.yml，更改Scheme字段。\n#scheme: Muse#scheme: Mistscheme: Pisces\n\n3.2 更新主题打开主题配置文件夹&#96;hexo&#x2F;themes&#x2F;next’。\ncd themes/nextgit pull# 强制更新git fetch --allgit reset --hard origin/master\n\n4. 站点配置打开站点配置文件.\\_config.yaml，更改相关字段。\nauthor: shen bolanguage: zh-Hanstimezone: Asia/Shanghaiurl: https://shenbo.github.iodeploy:    type:  git  repo:  git@github.com:shenbo/shenbo.github.io.git  branch:  master\n\n5. Git 配置打开git bash，设置用户名，并生成ssh-key。\ngit config --global user.name &quot;shenbo&quot;git config --global user.email &quot;shenbo@hotmail.com&quot;ssh-keygen -t rsa -b 4096 -C &quot;shenbo@hotmail.com&quot;eval $(ssh-agent -s)     # start the ssh-agent in the backgroundssh-add ~/.ssh/id_rsa    # add SSH private key to the ssh-agentls ~/.ssh                # lists the files in your .ssh directory\n\n复制~/.ssh/id_rsa.pub，在 github 个人设置页面，点击新建或添加 SSH key，将id_rsa.pub内容复制进去。\n测试 git 客户端与 github 是否连接成功。\nssh -T git@github.com\n\n如果连接报错ssh: connect to host github.com port 22: Connection &gt; refused\n打开&#x2F;新建~/.ssh/config，修改内容如下，重新测试。\nHost github.comUser shenbo@hotmail.comHostname ssh.github.comPreferredAuthentications publickeyIdentityFile ~/.ssh/id_rsaPort 443\n\n如果连接报错&quot;Deployer not found: git&quot;，安装hexo-deployer-git。\nnpm install hexo-deployer-git --save\n\n6. 生成 &amp; 发布hexo generatehexo deploy\n","categories":["hexo"],"tags":["hexo"]},{"title":"常用apps配置","url":"/2016/03/14/apps/apps-config/","content":"pip\n设置默认国内源 - Windows系统\n\npip config set global.index-url &#x27;https://pypi.tuna.tsinghua.edu.cn/simple&#x27;pip config list\n\ngitgit config --global user.name &#x27;shenbo&#x27;git config --global user.email &#x27;shenbo@hotmail.com&#x27;git config --global http.proxy &#x27;http://127.0.0.1:9981&#x27;git config -lgit config --global core.editor code git config --global -e\n\nscoop\n设置 aria2 下载\n\nscoop config aria2-enabled true                   # default: truescoop config aria2-retry-wait 8                   # default: 2scoop config aria2-split 8                        # default: 5scoop config aria2-max-connection-per-server 8    # default: 5scoop config aria2-min-split-size] 2M             # default: 5M\n\n\n设置 proxy\n\nscoop config proxy 127.0.0.1:9981scoop config\n\nnpm\n设置默认国内源\n\nnpm config set registry https://registry.npmmirror.com/# 或用 nrmnpm install nrm -gnrm use taobao\n\n\n设置 proxy\n\nnpm config set proxy http://127.0.0.1:9981npm config list\n\n\n\n\n\nssh\n防止长时间无操作，连接断开\n\n在 C:\\Users\\XXXX\\.ssh\\config，内容为：\nServerAliveInterval 60\n\nyoutube-dl\n设置默认下载目录linux 系统: 修改&#x2F;新建文件 /etc/youtube-dl.conf，或 ~/.config/youtube-dl/config，内容为：\n\n-o ~/Sync/ytb/%(title)s.%(ext)s\n","categories":["apps"],"tags":["config"]},{"title":"田忌赛马","url":"/2016/02/16/yoyo/tianjisaima/","content":"田忌赛马从前，有一只小兔子，它长了三颗牙齿，一颗金牙齿，一颗银牙齿，一颗铜牙齿。\n有一天，它去地里拔萝卜。地里有三棵胡萝卜，一棵金胡萝卜，一棵银胡萝卜，一棵铜胡萝卜。\n小兔子用它的金牙啃金胡萝卜，哎呀，金萝卜太硬，小兔子的金牙一下子断掉了，好疼呀，5555。\n小兔子又用它的银牙啃银胡萝卜，银萝卜也很硬，小兔子的银牙也断了，5555。\n最后，小兔子又用它的铜牙啃铜胡萝卜，铜胡萝卜也很硬，铜牙也断了。小兔子三颗牙都断了，它再也忍不住，哇的一声哭了起来。\n正在这时，兔妈妈来了，小兔子看见妈妈来了，哭的更伤心啦。\n兔妈妈安慰小兔子，孩子，你不要伤心了，牙齿断了还可以再长出来，没关系。吃胡萝卜也要动脑筋呀，不能着急。下次你可以用你的金牙去啃银胡萝卜，用你的银牙去啃铜胡萝卜，铜牙啃不动金胡萝卜就不吃了，两个胡萝卜够你吃饱了呀！\n小兔子听了妈妈的话，恍然大悟。\n第二天，它按兔妈妈讲的方法，果然吃了个饱。\n\n三只斧头有一天，小白兔在河边玩耍，突然不小心摔了一跤，小白兔的门牙磕掉了。小白兔疼的哭了起来，这时小乌龟从河里爬了出来。\n小白兔，你为什么哭的这么伤心啊？\n我的牙磕掉了，好疼啊，555…\n那我帮你找吧。\n小乌龟游到河里，过了一会，拿了一颗金牙出来了，小白兔，这颗金牙是不是你的啊？\n小白兔摇摇头，不是哒。\n小乌龟又游到河里，过了一会，拿了一颗银牙出来了，小白兔，这颗银牙是不是你的啊？\n小白兔摇摇头，不是哒。\n小乌龟又游到河里，过了一会，拿了一颗普通的牙出来了，小白兔，这颗牙是不是你的啊？\n小白兔点点头，是我的，这就是我的牙~\n小乌龟说，小白兔，你真是个诚实的好孩子，这三颗牙都送给你了。\n\n守株待兔有一天，小乌龟在河里寻找食物，突然被什么东西砸了一下。\n原来是小白兔在河边玩耍，突然不小心摔了一跤，小白兔的金牙磕掉了。\n小乌龟捡起金牙高兴的走了，拿金牙换了两条鱼吃。\n第二天，小乌龟又到之前游泳的地方，小白兔在河边玩耍的时候不小心又摔了一跤，小白兔的银牙也磕掉了。\n小乌龟捡起银牙高兴的走了，拿银牙换了一条鱼吃。\n后来，小乌龟天天在河里等着小兔子摔跤，但是小兔子玩了很多天也没摔跤，小乌龟每次都空手而归。\n最后小乌龟饿死了。\n\n刻舟求剑有一天，小兔子在河里划船，突然摔了一跤，小兔子的门牙摔断了，掉进了水里。\n河里水很深，小兔子不会游泳，它打电话给小乌龟，想叫小乌龟帮忙把门牙捞出来，但是小乌龟去外婆家了。\n小兔子想啊想，终于想到一个好办法。它在船上做个记号，然后把船划到岸边水浅的地方，顺着做记号的地方跳到水里，开始找门牙。\n小兔子找了很久，也没找到它的门牙。\n\n乌鸦喝水+司马光砸缸有一天，小兔子和小乌龟在假山上玩，假山下边有一口空的水缸，突然小乌龟掉进了缸里。\n幸好小乌龟有壳，摔下去没有受伤。但是水缸里面很滑，小乌龟爬不出来。水缸很深，小兔子伸手拉小乌龟也拉不到它。\n怎么办呢？小乌龟急的要哭了。\n有了！小兔子找了一个水瓶，从山上接满水，倒进缸里，等缸里水满了，小乌龟就可以游出来了！\n小兔子接水、倒水，过了很长时间，缸里的水终于就要满了。小乌龟快要能爬出来了。\n这时，小熊走了过来，它看见小乌龟掉进了缸里，急忙从路边捡了一块大石头，朝水缸砸去。\n哗～\n水缸碎了个大洞，水从缸里流了出来。\n小乌龟终于得救了。\n","categories":["yoyo"],"tags":["yoyo"]},{"title":"使用scipy库的root和fsolve函数求解方程","url":"/2015/01/31/sci/%E4%BD%BF%E7%94%A8scipy%E5%BA%93%E7%9A%84root%E5%92%8Cfsolve%E5%87%BD%E6%95%B0%E6%B1%82%E8%A7%A3%E6%96%B9%E7%A8%8B/","content":"求解非线性方程使用scipy库的 root, fsolve 函数求解非线性方程。\nfrom scipy.optimize import fsolvefrom scipy.optimize import rootdef func(x):    return x ** 4 - x - 5x_root = root(func, 1.0)x_fsolve = fsolve(func, 1.0)print(x_root.x)print(x_fsolve)# [1.60300708]# [1.60300708]\n\n\n求解传热方程（热辐射+热传导）from scipy.optimize import fsolve# 热流密度q, w/m2# 方程为 q = k1 * (t0 ** 4 - t1 ** 4) + k2 * (t0 - t1)def solver(q, t0):    def func(t1):        eps1, eps2 = 0.1, 0.8   # 表面发射率 epsilon        lam = 0.04              # 热导率 lamda, w/(m.k)        dx = 0.005              # 材料的厚度, m        k1 = 5.67e-8 / (1 / eps1 + 1 / eps2 - 1)        k2 = 0.016 * lam / dx        return k1 * (t0 ** 4 - t1 ** 4) + k2 * (t0 - t1) - q    x = fsolve(func, t0 - 0.01)    return x[0]t = solver(q=1.0, t0=300.)print(t)# 298.6136062486314\n\n\nref：\n\nhttps://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.optimize.fsolve.html\nhttps://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.optimize.root.html\n\n","categories":["sci"],"tags":["scipy"]},{"title":"python自动更新hosts","url":"/2013/01/20/python/python-%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0hosts/","content":"windows 自动获得 google hosts 并更新。\nimport requests# windows系统 hosts文件地址hosts_file_dir = &#x27;C:/Windows/System32/drivers/etc/hosts&#x27;# 自定义 hostslocal_hosts = &#x27;127.0.0.1 localhost\\n\\n\\n&#x27;# google hosts urlgoog_hosts_url = &#x27;https://coding.net/u/scaffrey/p/hosts/git/raw/master/hosts-files/hosts&#x27;headers = &#123;&#x27;User-Agent&#x27;: &#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3689.0 Safari/537.36&#x27;&#125;req = requests.get(goog_hosts_url, headers=headers)goog_hosts = req.content.decode(encoding=&#x27;utf-8&#x27;)print(&#x27;- hosts downloaded !!!\\n&#x27;)with open(hosts_file_dir, &#x27;wb&#x27;) as fd:    fd.write(bytes(local_hosts + goog_hosts, &#x27;UTF-8&#x27;))print(&#x27;- hosts update succeed !&#x27;)\n","categories":["python"],"tags":["python"]},{"title":"python暴力穷举求所有四阶幻方","url":"/2013/01/02/python/python-%E6%9A%B4%E5%8A%9B%E7%A9%B7%E4%B8%BE%E6%B1%82%E6%89%80%E6%9C%89%E5%9B%9B%E9%98%B6%E5%B9%BB%E6%96%B9/","content":"四阶幻方构造方法将 1-16 填入4×4的方格里，一共有 16! &#x3D; 20922789888000 种组合，计算量有点大。\n可以先假设其中的 7 个数（用 a-g 表示），就可以推出其他数字：\n\n\n\n\n\n\n\n\n\n\na\nb\nc\n34-a-b-c\n\n\nd\ne\nf\n34-d-e-f\n\n\n34-2a-b-c-d+f+g\ng\n34-e-f-g\n2a+b+c+d+e-g-34\n\n\na+b+c-f-g\n34-b-e-g\n-c+e+g\n-a+f+g\n\n\n这样就减少到 A(16,7) &#x3D; 16! &#x2F; 9! &#x3D; 57657600 种组合。\n\npython 代码：\n\nimport itertoolsimport numpy as npdef gen_ms():    # itertools.permutations 函数 可以生成排列组合    for i in itertools.permutations(range(1, 17), 7):        (a, b, c, d, e, f, g) = i                ms = np.zeros(16, dtype=int)        ms[0] = a        ms[1] = b        ms[2] = c        ms[3] = 34 - a - b - c        ms[4] = d        ms[5] = e        ms[6] = f        ms[7] = 34 - d - e - f        ms[8] = 34 - 2 * a - b - c - d + f + g        ms[9] = g        ms[10] = 34 - e - f - g        ms[11] = 2 * a + b + c + d + e - g -34        ms[12] = a + b + c - f - g        ms[13] = 34 - b - e - g        ms[14] = -c + e + g        ms[15] = -a + f + g                # 判断        if np.max(ms) &gt; 16 or np.min(ms) &lt; 1 or len(np.unique(ms)) &lt; 16:            continue        print(ms)\n\n这是最直观的的穷举方法，性能有点弱鸡，跑完要 4-5 分钟。。。\n总共有 7040 种幻方，包含对称、镜像的形式；所以不重复的是 7040 &#x2F; 8 &#x3D; 880 种。\n\nPS：三阶幻方介绍三阶幻方又叫九宫格，最早是《河图洛书》的描述：\n\n二四为肩，六八为足，左七右三，戴九履一\n\n\n\n\n\n\n\n\n\n\n4\n9\n2\n\n\n3\n5\n7\n\n\n8\n1\n6\n\n\n","categories":["python"],"tags":["python"]}]